{"version":3,"file":"ej2-dropdowns.es2015.js","sources":["../src/es6/common/incremental-search.js","../src/es6/common/highlight-search.js","../src/es6/common/virtual-scroll.js","../src/es6/common/index.js","../src/es6/drop-down-base/drop-down-base.js","../src/es6/drop-down-base/index.js","../src/es6/drop-down-list/drop-down-list.js","../src/es6/drop-down-list/index.js","../src/es6/drop-down-tree/drop-down-tree.js","../src/es6/drop-down-tree/index.js","../src/es6/combo-box/combo-box.js","../src/es6/combo-box/index.js","../src/es6/auto-complete/auto-complete.js","../src/es6/auto-complete/index.js","../src/es6/multi-select/float-label.js","../src/es6/multi-select/multi-select.js","../src/es6/multi-select/checkbox-selection.js","../src/es6/multi-select/index.js","../src/es6/list-box/list-box.js","../src/es6/list-box/index.js","../src/es6/mention/mention.js","../src/es6/mention/index.js","../src/es6/index.js"],"sourcesContent":["/**\n * IncrementalSearch module file\n */\nlet queryString = '';\nlet prevString = '';\nlet matches = [];\nconst activeClass = 'e-active';\nlet prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(() => {\n        queryString = '';\n    }, 1000);\n    let index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString) {\n        for (let i = 0; i < matches.length; i++) {\n            if (matches[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches[index] ? matches[index] : matches[0];\n    }\n    else {\n        const listItems = items;\n        const strLength = queryString.length;\n        let text;\n        let item;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        let i = selectedIndex;\n        matches = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            if (i === -1) {\n                index = 0;\n            }\n            else {\n                index = i;\n            }\n            item = listItems[index];\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            if (text.substr(0, strLength) === queryString) {\n                matches.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        return matches[0];\n    }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {\n    const listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    const itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        const strLength = inputVal.length;\n        let queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        queryStr = escapeCharRegExp(queryStr);\n        for (let i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            const item = itemsData[i];\n            let text;\n            let filterValue;\n            if (items && dataSource) {\n                let checkField = item;\n                let fieldValue = fields.text.split('.');\n                dataSource.filter(function (data) {\n                    Array.prototype.slice.call(fieldValue).forEach(function (value) {\n                        /* eslint-disable security/detect-object-injection */\n                        if (type === 'object' && (!data.isHeader && checkField.textContent.toString().indexOf(data[value]) !== -1) && checkField.getAttribute('data-value') === data[fields.value].toString() || type === 'string' && checkField.textContent.toString().indexOf(data) !== -1) {\n                            filterValue = type === 'object' ? data[value] : data;\n                        }\n                    });\n                });\n            }\n            text = dataSource && filterValue ? (ignoreCase ? filterValue.toLocaleLowerCase() : filterValue).replace(/^\\s+|\\s+$/g, '') : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            /* eslint-disable security/detect-non-literal-regexp */\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) || (searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr) || (searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text))) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n        /* eslint-enable security/detect-non-literal-regexp */\n    }\n    return itemData;\n}\n/* eslint-enable security/detect-object-injection */\nexport function escapeCharRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function resetIncrementalSearchValues(elementId) {\n    if (prevElementId === elementId) {\n        prevElementId = '';\n        prevString = '';\n        queryString = '';\n        matches = [];\n    }\n}\n","/**\n * Function helps to find which highlightSearch is to call based on your data.\n *\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n * @returns {void}\n */\nexport function highlightSearch(element, query, ignoreCase, type) {\n    if (query === '') {\n        return;\n    }\n    else {\n        const ignoreRegex = ignoreCase ? 'gim' : 'gm';\n        // eslint-disable-next-line\n        query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n        const replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ?\n            '(' + query + ')$' : '(' + query + ')';\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        findTextNode(element, new RegExp(replaceQuery, ignoreRegex));\n    }\n}\n/* eslint-enable jsdoc/require-param, valid-jsdoc */\n/**\n *\n * @param {HTMLElement} element - Specifies the element.\n * @param {RegExp} pattern - Specifies the regex to match the searched text.\n * @returns {void}\n */\nfunction findTextNode(element, pattern) {\n    for (let index = 0; element.childNodes && (index < element.childNodes.length); index++) {\n        if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\n            const value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            element.childNodes[index].nodeValue = '';\n            element.innerHTML = element.innerHTML.trim() + value;\n            break;\n        }\n        else {\n            findTextNode(element.childNodes[index], pattern);\n        }\n    }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n *\n * @param  {HTMLElement} content - Specifies an content element.\n * @returns {void}\n */\nexport function revertHighlightSearch(content) {\n    const contentElement = content.querySelectorAll('.e-highlight');\n    for (let i = contentElement.length - 1; i >= 0; i--) {\n        const parent = contentElement[i].parentNode;\n        const text = document.createTextNode(contentElement[i].textContent);\n        parent.replaceChild(text, contentElement[i]);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { EventHandler, Browser, select, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { debounce, Touch } from '@syncfusion/ej2-base';\nimport { Query } from '@syncfusion/ej2-data';\nexport class VirtualScroll {\n    constructor(parent) {\n        this.sentinelInfo = {\n            'up': {\n                check: (rect, info) => {\n                    let top = rect.top - this.containerElementRect.top;\n                    info.entered = top >= 0;\n                    return top + (this.parent.listItemHeight * this.parent.virtualItemCount / 2) >= 0;\n                },\n                axis: 'Y'\n            },\n            'down': {\n                check: (rect, info) => {\n                    let cHeight = this.parent.popupContentElement.clientHeight;\n                    let top = rect.bottom;\n                    info.entered = rect.bottom <= this.containerElementRect.bottom;\n                    return top - (this.parent.listItemHeight * this.parent.virtualItemCount / 2) <= this.parent.listItemHeight * this.parent.virtualItemCount / 2;\n                }, axis: 'Y'\n            }\n        };\n        this.parent = parent;\n        this.removeEventListener();\n        this.addEventListener();\n    }\n    addEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on('observe', this.observe, this);\n        this.parent.on('setGeneratedData', this.setGeneratedData, this);\n        this.parent.on('dataProcessAsync', this.dataProcessAsync, this);\n        this.parent.on('setCurrentViewDataAsync', this.setCurrentViewDataAsync, this);\n        this.parent.on('bindScrollEvent', this.bindScrollEvent, this);\n    }\n    removeEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('observe', this.observe);\n        this.parent.off('setGeneratedData', this.setGeneratedData);\n        this.parent.off('dataProcessAsync', this.dataProcessAsync);\n        this.parent.off('setCurrentViewDataAsync', this.setCurrentViewDataAsync);\n        this.parent.off('bindScrollEvent', this.bindScrollEvent);\n    }\n    bindScrollEvent(component) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.component = component.component;\n        this.observe((scrollArgs) => this.scrollListener(scrollArgs));\n    }\n    observe(callback) {\n        this.containerElementRect = this.parent.popupContentElement.getBoundingClientRect();\n        EventHandler.add(this.parent.popupContentElement, 'wheel mousedown', this.popupScrollHandler, this);\n        this.touchModule = new Touch(this.parent.popupContentElement, {\n            scroll: this.popupScrollHandler.bind(this)\n        });\n        EventHandler.add(this.parent.popupContentElement, 'scroll', this.virtualScrollHandler(callback), this);\n    }\n    getModuleName() {\n        return 'VirtualScroll';\n    }\n    popupScrollHandler(e) {\n        this.parent.isMouseScrollAction = true;\n        this.parent.isPreventScrollAction = false;\n    }\n    getPageQuery(query, virtualStartIndex, virtualEndIndex) {\n        if (virtualEndIndex !== 0 && !this.parent.allowFiltering && this.component !== 'autocomplete') {\n            query = query.skip(virtualStartIndex);\n        }\n        return query;\n    }\n    setGeneratedData(qStartIndex, recentlyGeneratedData) {\n        let loopIteration = 0;\n        let endIndex = this.parent.listData.length + this.parent.virtualItemStartIndex;\n        for (let i = this.parent.virtualItemStartIndex; i < endIndex; i++) {\n            const alreadyAddedData = this.parent.generatedDataObject[i];\n            if (!alreadyAddedData) {\n                if (recentlyGeneratedData !== null && this.parent.listData.slice(loopIteration, loopIteration + 1).length > 0) {\n                    const slicedData = this.parent.listData.slice(loopIteration, loopIteration + 1);\n                    if (slicedData.length > 0) {\n                        // Safely assign slicedData to this.parent.generatedDataObject[i]\n                        this.parent.generatedDataObject[i] = slicedData;\n                    }\n                }\n            }\n            loopIteration++;\n        }\n    }\n    generateAndExecuteQueryAsync(query, virtualItemStartIndex = 0, virtualItemEndIndex = 0, isQueryGenerated = false) {\n        let dataSource = this.parent.dataSource;\n        if (!isQueryGenerated) {\n            query = this.getPageQuery(query, virtualItemStartIndex, virtualItemEndIndex);\n        }\n        this.parent.resetList(dataSource, this.parent.fields, query);\n    }\n    setCurrentViewDataAsync() {\n        // eslint-disable-next-line\n        let currentData = [];\n        for (let i = this.parent.viewPortInfo.startIndex; i < this.parent.viewPortInfo.endIndex; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const alreadyAddedData = this.parent.generatedDataObject[i];\n            if (alreadyAddedData) {\n                currentData.push(alreadyAddedData[0]);\n            }\n        }\n        this.parent.renderItems(currentData, this.parent.fields);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const virtualTrackElement = this.parent.list.getElementsByClassName('e-virtual-ddl')[0];\n        if (virtualTrackElement) {\n            (virtualTrackElement).style = this.parent.GetVirtualTrackHeight();\n        }\n        this.parent.UpdateSkeleton();\n        this.parent.liCollections = this.parent.list.querySelectorAll('.e-list-item');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const virtualContentElement = this.parent.list.getElementsByClassName('e-virtual-ddl-content')[0];\n        if (virtualContentElement) {\n            (virtualContentElement).style = this.parent.getTransformValues();\n        }\n    }\n    generateQueryAndSetQueryIndexAsync(query, isPopupOpen) {\n        let isStartIndexInitialised = false;\n        let queryStartIndex = 0;\n        let queryEndIndex = 0;\n        let sortedDataStartIndex = 0;\n        let vEndIndex = this.parent && this.parent.viewPortInfo.endIndex !== 0 ? this.parent.viewPortInfo.endIndex : sortedDataStartIndex + this.parent.getItems().length;\n        if (!isPopupOpen && vEndIndex !== 0) {\n            for (let i = this.parent.viewPortInfo.startIndex; i <= vEndIndex; i++) {\n                if (!(i in this.parent.generatedDataObject)) {\n                    if (!isStartIndexInitialised) {\n                        isStartIndexInitialised = true;\n                        queryStartIndex = queryEndIndex = i;\n                    }\n                    else {\n                        queryEndIndex = i === vEndIndex ? i : i + 1;\n                    }\n                }\n            }\n        }\n        if (isStartIndexInitialised && !((this.parent.totalItemCount == queryStartIndex) && (this.parent.totalItemCount == queryEndIndex))) {\n            this.parent.virtualItemStartIndex = queryStartIndex;\n            this.parent.virtualItemEndIndex = queryEndIndex;\n            this.generateAndExecuteQueryAsync(query, queryStartIndex, queryEndIndex);\n        }\n        this.setCurrentViewDataAsync();\n    }\n    dataProcessAsync(isOpenPopup) {\n        this.parent.selectedValueInfo = null;\n        this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;\n        this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;\n        this.generateQueryAndSetQueryIndexAsync(new Query(), isOpenPopup);\n    }\n    virtualScrollRefreshAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.parent.isCustomFilter = (!(this.parent.isTyped || (this.component === 'combobox' && this.parent.allowFiltering && this.parent.queryString != this.parent.typedString) || (!isNullOrUndefined(this.parent.filterInput) && !isNullOrUndefined(this.parent.filterInput.value) && this.parent.filterInput.value !== '') && this.component !== 'combobox') && !(this.component === 'autocomplete' && this.parent.value != null)) || this.parent.isCustomFilter;\n            if (this.parent.allowFiltering || this.component === 'autocomplete') {\n                if (!isNullOrUndefined(this.parent.typedString) && !(this.component === 'combobox' && !isNullOrUndefined(this.parent.typedString) && this.parent.allowFiltering)) {\n                    if (this.parent.viewPortInfo.endIndex >= this.parent.dataCount) {\n                        this.parent.viewPortInfo.endIndex = this.parent.dataCount;\n                    }\n                    if (this.parent.viewPortInfo.startIndex >= this.parent.dataCount) {\n                        this.parent.viewPortInfo.startIndex = this.parent.dataCount - this.parent.itemCount;\n                    }\n                }\n                else {\n                    this.parent.getSkeletonCount(true);\n                }\n            }\n            yield this.dataProcessAsync();\n            if (this.parent.keyboardEvent != null) {\n                this.parent.handleVirtualKeyboardActions(this.parent.keyboardEvent, this.parent.pageCount);\n            }\n            this.parent.isCustomFilter = false;\n        });\n    }\n    scrollListener(scrollArgs) {\n        if (!this.parent.isPreventScrollAction) {\n            let info = scrollArgs.sentinel;\n            let pStartIndex = this.parent.previousStartIndex;\n            this.parent.viewPortInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset, false);\n            this.parent.isUpwardScrolling = false;\n            if (this.parent.previousStartIndex !== pStartIndex && !this.parent.isKeyBoardAction) {\n                this.parent.isScrollActionTriggered = false;\n                this.parent.currentPageNumber = this.parent.viewPortInfo.currentPageNumber;\n                this.parent.virtualListInfo = Object.assign({}, this.parent.viewPortInfo);\n                this.parent.isPreventKeyAction = true;\n                this.parent.isVirtualScrolling = true;\n                setTimeout(() => {\n                    this.parent.pageCount = this.parent.getPageCount();\n                    this.virtualScrollRefreshAsync().then(() => {\n                        if (this.parent.popupObj) {\n                            this.parent.list = this.parent.popupObj.element.querySelector('.' + 'e-content') || select('.' + 'e-content');\n                            this.parent.updateSelectionList();\n                            this.parent.liCollections = this.parent.getItems();\n                        }\n                        this.parent.isKeyBoardAction = false;\n                        this.parent.isVirtualScrolling = false;\n                        this.parent.isPreventKeyAction = false;\n                    });\n                }, 5);\n            }\n            else if (this.parent.isScrollActionTriggered) {\n                this.parent.isPreventKeyAction = false;\n                this.parent.isScrollActionTriggered = false;\n                let virtualListCount = this.parent.list.querySelectorAll('.e-virtual-list').length;\n                let listElement = this.parent.list.querySelector('.' + 'e-list-item');\n                let translateY = scrollArgs.offset.top - (listElement.offsetHeight * virtualListCount);\n                this.parent.list.getElementsByClassName('e-virtual-ddl-content')[0].style.transform = \"translate(0px,\" + translateY + \"px)\";\n            }\n            this.parent.previousInfo = this.parent.viewPortInfo;\n        }\n    }\n    getPageCount(popupElement, returnExactCount = false) {\n        var list = popupElement && popupElement.querySelector('.e-content');\n        if (list) {\n            var liHeight = list.classList.contains('e-nodata') ? null : getComputedStyle(list.querySelectorAll('.e-list-item')[0], null).getPropertyValue('height');\n            var pageCount = list.getBoundingClientRect().height / parseInt(liHeight, 10);\n            return returnExactCount ? pageCount : Math.round(pageCount);\n        }\n        return 0;\n    }\n    ;\n    getRowHeight() {\n        return (isNullOrUndefined(this.parent.liCollections) || this.parent.liCollections.length == 0) ? 0 : Math.ceil(this.parent.liCollections[0].getBoundingClientRect().height);\n    }\n    getInfoFromView(direction, info, e, isscrollAction) {\n        let infoType = {\n            direction: direction, sentinelInfo: info, offsets: e,\n            startIndex: this.parent.previousStartIndex, endIndex: this.parent.previousEndIndex\n        };\n        let vHeight = this.parent.popupContentElement.getBoundingClientRect().height;\n        //Row Start and End Index calculation\n        let rowHeight = this.parent.listItemHeight;\n        let exactTopIndex = e.top / rowHeight;\n        let infoViewIndices = vHeight / rowHeight;\n        let exactEndIndex = exactTopIndex + infoViewIndices;\n        let pageSizeBy4 = this.parent.virtualItemCount / 4;\n        let totalItemCount = this.parent.totalItemCount;\n        if (infoType.direction === 'down') {\n            let sIndex = Math.round(exactEndIndex) - Math.round((pageSizeBy4));\n            if (isNullOrUndefined(infoType.startIndex) || (exactEndIndex >\n                (infoType.startIndex + Math.round((this.parent.virtualItemCount / 2 + pageSizeBy4)))\n                && infoType.endIndex !== totalItemCount)) {\n                infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;\n                infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;\n                let eIndex = infoType.startIndex + this.parent.virtualItemCount;\n                infoType.startIndex = eIndex < exactEndIndex ? (Math.ceil(exactEndIndex) - this.parent.virtualItemCount)\n                    : infoType.startIndex;\n                infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;\n                infoType.startIndex = eIndex >= totalItemCount ? (infoType.endIndex - this.parent.virtualItemCount > 0 ? infoType.endIndex - this.parent.virtualItemCount : 0) : infoType.startIndex;\n                infoType.currentPageNumber = Math.ceil(infoType.endIndex / this.parent.virtualItemCount);\n            }\n        }\n        else if (infoType.direction === 'up') {\n            if (infoType.startIndex && infoType.endIndex) {\n                let loadAtIndex = Math.round(((infoType.startIndex * rowHeight) + (pageSizeBy4 * rowHeight)) / rowHeight);\n                if (exactTopIndex < loadAtIndex) {\n                    let idxAddedToExactTop = (pageSizeBy4) > infoViewIndices ? pageSizeBy4 :\n                        (infoViewIndices + infoViewIndices / 4);\n                    let eIndex = Math.round(exactTopIndex + idxAddedToExactTop);\n                    infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;\n                    let sIndex = infoType.endIndex - this.parent.virtualItemCount;\n                    infoType.startIndex = sIndex > 0 ? sIndex : 0;\n                    infoType.endIndex = sIndex < 0 ? this.parent.virtualItemCount : infoType.endIndex;\n                    infoType.currentPageNumber = Math.ceil(infoType.startIndex / this.parent.virtualItemCount);\n                }\n            }\n        }\n        if (!isscrollAction) {\n            this.parent.previousStartIndex = infoType.startIndex;\n            this.parent.startIndex = infoType.startIndex;\n            this.parent.previousEndIndex = infoType.endIndex;\n        }\n        else {\n            this.parent.scrollPreStartIndex = infoType.startIndex;\n        }\n        return infoType;\n    }\n    virtualScrollHandler(callback) {\n        let delay = Browser.info.name === 'chrome' ? 200 : 100;\n        let prevTop = 0;\n        let debounced100 = debounce(callback, delay);\n        let debounced50 = debounce(callback, 50);\n        return (e) => {\n            let top = e.target.scrollTop;\n            let left = e.target.scrollLeft;\n            let direction = prevTop < top && !this.parent.isUpwardScrolling ? 'down' : 'up';\n            prevTop = top;\n            let current = this.sentinelInfo[direction];\n            var pstartIndex = this.parent.scrollPreStartIndex;\n            var scrollOffsetargs = {\n                top: top,\n                left: left\n            };\n            if (this.parent.list.querySelectorAll('.e-virtual-list').length > 0) {\n                var infoview = this.getInfoFromView(direction, current, scrollOffsetargs, true);\n                if (this.parent.scrollPreStartIndex != pstartIndex && !this.parent.isPreventScrollAction) {\n                    this.parent.isScrollActionTriggered = true;\n                    let virtualPoup = (this.parent.list.querySelector('.e-virtual-ddl-content'));\n                    virtualPoup.style.transform = \"translate(0px,\" + top + \"px)\";\n                }\n            }\n            let debounceFunction = debounced100;\n            if (current.axis === 'X') {\n                debounceFunction = debounced50;\n            }\n            debounceFunction({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                focusElement: document.activeElement });\n        };\n    }\n    destroy() {\n        this.removeEventListener();\n    }\n}\n","/**\n * Common source\n */\nexport * from './incremental-search';\nexport * from './highlight-search';\nexport * from './virtual-scroll';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, EventHandler, addClass, append, Property, Event, L10n, compile } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, extend, removeClass, prepend, isNullOrUndefined, detach, getValue } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, rippleEffect, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { DataManager, Query, DataUtil } from '@syncfusion/ej2-data';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { select, selectAll } from '@syncfusion/ej2-base';\nexport class FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property()\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"value\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\nexport const dropDownBaseClasses = {\n    root: 'e-dropdownbase',\n    rtl: 'e-rtl',\n    content: 'e-content',\n    selected: 'e-active',\n    hover: 'e-hover',\n    noData: 'e-nodata',\n    fixedHead: 'e-fixed-head',\n    focus: 'e-item-focus',\n    li: 'e-list-item',\n    group: 'e-list-group-item',\n    disabled: 'e-disabled',\n    grouping: 'e-dd-group'\n};\nconst ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\nconst DISPLAYTEMPLATE_PROPERTY = 'DisplayTemplate';\nconst SPINNERTEMPLATE_PROPERTY = 'SpinnerTemplate';\nconst VALUETEMPLATE_PROPERTY = 'ValueTemplate';\nconst GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';\nconst NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';\nconst HIDE_GROUPLIST = 'e-hide-group-header';\n/**\n * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components\n */\nlet DropDownBase = class DropDownBase extends Component {\n    /**\n     * * Constructor for DropDownBase class\n     *\n     * @param {DropDownBaseModel} options - Specifies the DropDownBase model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.preventChange = false;\n        this.isAngular = false;\n        this.isPreventChange = false;\n        this.isDynamicDataChange = false;\n        this.addedNewItem = false;\n        this.isAddNewItemTemplate = false;\n        this.isRequesting = false;\n        this.isVirtualizationEnabled = false;\n        this.isAllowFiltering = false;\n        this.virtualizedItemsCount = 0;\n        this.totalItemCount = 0;\n        this.dataCount = 0;\n    }\n    getPropObject(prop, newProp, oldProp) {\n        const newProperty = new Object();\n        const oldProperty = new Object();\n        const propName = (prop) => {\n            return prop;\n        };\n        newProperty[propName(prop)] = newProp[propName(prop)];\n        oldProperty[propName(prop)] = oldProp[propName(prop)];\n        const data = new Object();\n        data.newProperty = newProperty;\n        data.oldProperty = oldProperty;\n        return data;\n    }\n    getValueByText(text, ignoreCase, ignoreAccent) {\n        let value = null;\n        if (!isNullOrUndefined(this.listData)) {\n            if (ignoreCase) {\n                value = this.checkValueCase(text, true, ignoreAccent);\n            }\n            else {\n                value = this.checkValueCase(text, false, ignoreAccent);\n            }\n        }\n        return value;\n    }\n    checkValueCase(text, ignoreCase, ignoreAccent, isTextByValue) {\n        let value = null;\n        if (isTextByValue) {\n            value = text;\n        }\n        const dataSource = this.listData;\n        const fields = this.fields;\n        const type = this.typeOfData(dataSource).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            for (const item of dataSource) {\n                if (!isNullOrUndefined(item)) {\n                    if (ignoreAccent) {\n                        value = this.checkingAccent(String(item), text, ignoreCase);\n                    }\n                    else {\n                        if (ignoreCase) {\n                            if (this.checkIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase);\n                            }\n                        }\n                        else {\n                            if (this.checkNonIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (ignoreCase) {\n                dataSource.filter((item) => {\n                    const itemValue = getValue(fields.value, item);\n                    if (!isNullOrUndefined(itemValue) && this.checkIgnoreCase(getValue(fields.text, item).toString(), text)) {\n                        value = getValue(fields.value, item);\n                    }\n                });\n            }\n            else {\n                if (isTextByValue) {\n                    let compareValue = null;\n                    compareValue = value;\n                    dataSource.filter((item) => {\n                        const itemValue = getValue(fields.value, item);\n                        if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue.toString()) {\n                            value = getValue(fields.text, item);\n                        }\n                    });\n                }\n                else {\n                    dataSource.filter((item) => {\n                        if (this.checkNonIgnoreCase(getValue(fields.text, item), text)) {\n                            value = getValue(fields.value, item);\n                        }\n                    });\n                }\n            }\n        }\n        return value;\n    }\n    checkingAccent(item, text, ignoreCase) {\n        const dataItem = DataUtil.ignoreDiacritics(String(item));\n        const textItem = DataUtil.ignoreDiacritics(text.toString());\n        let value = null;\n        if (ignoreCase) {\n            if (this.checkIgnoreCase(dataItem, textItem)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        else {\n            if (this.checkNonIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        return value;\n    }\n    checkIgnoreCase(item, text) {\n        return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;\n    }\n    checkNonIgnoreCase(item, text) {\n        return String(item) === text.toString() ? true : false;\n    }\n    getItemValue(dataItem, typedText, ignoreCase, isTextByValue) {\n        let value = null;\n        const dataSource = this.listData;\n        const type = this.typeOfData(dataSource).typeof;\n        if (isTextByValue) {\n            value = dataItem.toString();\n        }\n        else {\n            if (ignoreCase) {\n                value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));\n            }\n            else {\n                value = type === 'string' ? typedText : this.getFormattedValue(typedText);\n            }\n        }\n        return value;\n    }\n    templateCompiler(baseTemplate) {\n        let checkTemplate = false;\n        if (typeof baseTemplate !== 'function' && baseTemplate) {\n            try {\n                checkTemplate = (selectAll(baseTemplate, document).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    l10nUpdate(actionFailure) {\n        const ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;\n        if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {\n            const template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            let compiledString;\n            const templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            ele.innerHTML = '';\n            const tempaltecheck = this.templateCompiler(template);\n            if (typeof template !== 'function' && tempaltecheck) {\n                compiledString = compile(select(template, document).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(template);\n            }\n            const templateName = actionFailure ? 'actionFailureTemplate' : 'noRecordsTemplate';\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let noDataElement;\n            if ((this.isReact) && typeof template === 'function') {\n                noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null);\n            }\n            else {\n                noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);\n            }\n            if (noDataElement && noDataElement.length > 0) {\n                for (let i = 0; i < noDataElement.length; i++) {\n                    if (this.getModuleName() === 'listbox' && templateName === 'noRecordsTemplate') {\n                        if (noDataElement[i].nodeName === '#text') {\n                            const liElem = this.createElement('li');\n                            liElem.textContent = noDataElement[i].textContent;\n                            liElem.classList.add('e-list-nrt');\n                            liElem.setAttribute('role', 'option');\n                            ele.appendChild(liElem);\n                        }\n                        else {\n                            noDataElement[i].classList.add('e-list-nr-template');\n                            ele.appendChild(noDataElement[i]);\n                        }\n                    }\n                    else {\n                        if (noDataElement[i] instanceof HTMLElement) {\n                            ele.appendChild(noDataElement[i]);\n                        }\n                    }\n                }\n            }\n            this.renderReactTemplates();\n        }\n        else {\n            const l10nLocale = { noRecordsTemplate: 'No records found', actionFailureTemplate: 'Request failed' };\n            const componentLocale = new L10n(this.getLocaleName(), {}, this.locale);\n            if (componentLocale.getConstant('actionFailureTemplate') !== '' || componentLocale.getConstant('noRecordsTemplate') !== '') {\n                this.l10n = componentLocale;\n            }\n            else {\n                this.l10n = new L10n(this.getModuleName() === 'listbox' ? 'listbox' :\n                    this.getModuleName() === 'mention' ? 'mention' : 'dropdowns', l10nLocale, this.locale);\n            }\n            const content = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n            if (this.getModuleName() === 'listbox') {\n                const liElem = this.createElement('li');\n                liElem.textContent = content;\n                ele.appendChild(liElem);\n                liElem.classList.add('e-list-nrt');\n                liElem.setAttribute('role', 'option');\n            }\n            else {\n                if (!isNullOrUndefined(ele)) {\n                    ele.innerHTML = content;\n                }\n            }\n        }\n    }\n    getLocaleName() {\n        return 'drop-down-base';\n    }\n    getTextByValue(value) {\n        const text = this.checkValueCase(value, false, false, true);\n        return text;\n    }\n    getFormattedValue(value) {\n        if (this.listData && this.listData.length) {\n            let item;\n            if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {\n                item = this.typeOfData(this.properties.value);\n            }\n            else {\n                item = this.typeOfData(this.listData);\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'number'\n                || item.typeof === 'number') {\n                return parseFloat(value);\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'boolean'\n                || item.typeof === 'boolean') {\n                return ((value === 'true') || ('' + value === 'true'));\n            }\n        }\n        return value;\n    }\n    /**\n     * Sets RTL to dropdownbase wrapper\n     *\n     * @returns {void}\n     */\n    setEnableRtl() {\n        if (!isNullOrUndefined(this.enableRtlElements)) {\n            if (this.list) {\n                this.enableRtlElements.push(this.list);\n            }\n            if (this.enableRtl) {\n                addClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n            }\n            else {\n                removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n            }\n        }\n    }\n    /**\n     * Initialize the Component.\n     *\n     * @returns {void}\n     */\n    initialize(e) {\n        this.bindEvent = true;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE_PROPERTY}`;\n        if (this.element.tagName === 'UL') {\n            const jsonElement = ListBase.createJsonFromElement(this.element);\n            this.setProperties({ fields: { text: 'text', value: 'text' } }, true);\n            this.resetList(jsonElement, this.fields);\n        }\n        else if (this.element.tagName === 'SELECT') {\n            const dataSource = this.dataSource instanceof Array ? (this.dataSource.length > 0 ? true : false)\n                : !isNullOrUndefined(this.dataSource) ? true : false;\n            if (!dataSource) {\n                this.renderItemsBySelect();\n            }\n            else if (this.isDynamicDataChange) {\n                this.setListData(this.dataSource, this.fields, this.query);\n            }\n        }\n        else {\n            this.setListData(this.dataSource, this.fields, this.query, e);\n        }\n    }\n    /**\n     * Get the properties to be maintained in persisted state.\n     *\n     * @returns {string} Returns the persisted data of the component.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Sets the enabled state to DropDownBase.\n     *\n     * @param {string} value - Specifies the attribute values to add on the input element.\n     * @returns {void}\n     */\n    updateDataAttribute(value) {\n        const invalidAttr = ['class', 'style', 'id', 'type', 'aria-expanded', 'aria-autocomplete', 'aria-readonly'];\n        const attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    renderItemsBySelect() {\n        const element = this.element;\n        const fields = { value: 'value', text: 'text' };\n        const jsonElement = [];\n        const group = element.querySelectorAll('select>optgroup');\n        const option = element.querySelectorAll('select>option');\n        this.getJSONfromOption(jsonElement, option, fields);\n        if (group.length) {\n            for (let i = 0; i < group.length; i++) {\n                const item = group[i];\n                const optionGroup = {};\n                optionGroup[fields.text] = item.label;\n                optionGroup.isHeader = true;\n                const child = item.querySelectorAll('option');\n                jsonElement.push(optionGroup);\n                this.getJSONfromOption(jsonElement, child, fields);\n            }\n            element.querySelectorAll('select>option');\n        }\n        this.updateFields(fields.text, fields.value, this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss);\n        this.resetList(jsonElement, fields);\n    }\n    updateFields(text, value, groupBy, htmlAttributes, iconCss) {\n        const field = {\n            'fields': {\n                text: text,\n                value: value,\n                groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,\n                htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,\n                iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss\n            }\n        };\n        this.setProperties(field, true);\n    }\n    getJSONfromOption(items, options, fields) {\n        for (const option of options) {\n            const json = {};\n            json[fields.text] = option.innerText;\n            json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ?\n                option.getAttribute(fields.value) : option.innerText;\n            items.push(json);\n        }\n    }\n    /**\n     * Execute before render the list items\n     *\n     * @private\n     * @returns {void}\n     */\n    preRender() {\n        // there is no event handler\n        this.scrollTimer = -1;\n        this.enableRtlElements = [];\n        this.isRequested = false;\n        this.isDataFetched = false;\n        this.itemTemplateId = `${this.element.id}${ITEMTEMPLATE_PROPERTY}`;\n        this.displayTemplateId = `${this.element.id}${DISPLAYTEMPLATE_PROPERTY}`;\n        this.spinnerTemplateId = `${this.element.id}${SPINNERTEMPLATE_PROPERTY}`;\n        this.valueTemplateId = `${this.element.id}${VALUETEMPLATE_PROPERTY}`;\n        this.groupTemplateId = `${this.element.id}${GROUPTEMPLATE_PROPERTY}`;\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE_PROPERTY}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE_PROPERTY}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE_PROPERTY}`;\n    }\n    /**\n     * Creates the list items of DropDownBase component.\n     *\n     * @param {Object[] | string[] | number[] | DataManager | boolean[]} dataSource - Specifies the data to generate the list.\n     * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n     * @param {Query} query - Accepts the external Query that execute along with data processing.\n     * @returns {void}\n     */\n    setListData(dataSource, fields, query, event) {\n        fields = fields ? fields : this.fields;\n        let ulElement;\n        this.isActive = true;\n        const eventArgs = { cancel: false, data: dataSource, query: query };\n        this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;\n        if (!this.isRequesting) {\n            this.trigger('actionBegin', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    this.isRequesting = true;\n                    this.showSpinner();\n                    if (dataSource instanceof DataManager) {\n                        this.isRequested = true;\n                        if (this.isDataFetched) {\n                            this.emptyDataRequest(fields);\n                            return;\n                        }\n                        eventArgs.data.executeQuery(this.getQuery(eventArgs.query)).then((e) => {\n                            this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;\n                            this.trigger('actionComplete', e, (e) => {\n                                if (!e.cancel) {\n                                    const listItems = e.result;\n                                    if (listItems.length === 0) {\n                                        this.isDataFetched = true;\n                                    }\n                                    this.dataCount = e.count;\n                                    this.totalItemCount = e.count;\n                                    ulElement = this.renderItems(listItems, fields);\n                                    this.onActionComplete(ulElement, listItems, e);\n                                    if (this.groupTemplate) {\n                                        this.renderGroupTemplate(ulElement);\n                                    }\n                                    this.isRequested = false;\n                                    this.bindChildItems(listItems, ulElement, fields, e);\n                                }\n                                this.isRequesting = false;\n                            });\n                        }).catch((e) => {\n                            this.isRequested = false;\n                            this.isRequesting = false;\n                            this.onActionFailure(e);\n                            this.hideSpinner();\n                        });\n                    }\n                    else {\n                        this.isRequesting = false;\n                        const dataManager = new DataManager(eventArgs.data);\n                        let listItems = (this.getQuery(eventArgs.query)).executeLocal(dataManager);\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.dataCount = listItems.count;\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.totalItemCount = listItems.count;\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        listItems = this.isVirtualizationEnabled ? listItems.result : listItems;\n                        const localDataArgs = { cancel: false, result: listItems };\n                        this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;\n                        this.trigger('actionComplete', localDataArgs, (localDataArgs) => {\n                            if (!localDataArgs.cancel) {\n                                ulElement = this.renderItems(localDataArgs.result, fields);\n                                this.onActionComplete(ulElement, localDataArgs.result, event);\n                                if (this.groupTemplate) {\n                                    this.renderGroupTemplate(ulElement);\n                                }\n                                this.bindChildItems(localDataArgs.result, ulElement, fields);\n                                setTimeout(() => {\n                                    if (this.getModuleName() === 'multiselect' && this.itemTemplate != null && (ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || (this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0)))) {\n                                        this.updateDataList();\n                                    }\n                                });\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n    bindChildItems(listItems, ulElement, fields, e) {\n        if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {\n            setTimeout(() => {\n                const childNode = this.remainingItems(this.sortedData, fields);\n                append(childNode, ulElement);\n                this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                this.updateListValues();\n                this.raiseDataBound(listItems, e);\n            }, 0);\n        }\n        else {\n            this.raiseDataBound(listItems, e);\n        }\n    }\n    updateListValues() {\n        // Used this method in component side.\n    }\n    findListElement(list, findNode, attribute, value) {\n        let liElement = null;\n        if (list) {\n            const listArr = [].slice.call(list.querySelectorAll(findNode));\n            for (let index = 0; index < listArr.length; index++) {\n                if (listArr[index].getAttribute(attribute) === (value + '')) {\n                    liElement = listArr[index];\n                    break;\n                }\n            }\n        }\n        return liElement;\n    }\n    raiseDataBound(listItems, e) {\n        this.hideSpinner();\n        const dataBoundEventArgs = {\n            items: listItems,\n            e: e\n        };\n        this.trigger('dataBound', dataBoundEventArgs);\n    }\n    remainingItems(dataSource, fields) {\n        const spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));\n        if (this.itemTemplate) {\n            const listElements = this.templateListItem(spliceData, fields);\n            return [].slice.call(listElements.childNodes);\n        }\n        const type = this.typeOfData(spliceData).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);\n        }\n        return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);\n    }\n    emptyDataRequest(fields) {\n        const listItems = [];\n        this.onActionComplete(this.renderItems(listItems, fields), listItems);\n        this.isRequested = false;\n        this.hideSpinner();\n    }\n    showSpinner() {\n        // Used this method in component side.\n    }\n    hideSpinner() {\n        // Used this method in component side.\n    }\n    onActionFailure(e) {\n        this.liCollections = [];\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        if (!isNullOrUndefined(this.list)) {\n            addClass([this.list], dropDownBaseClasses.noData);\n        }\n    }\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onActionComplete(ulElement, list, e) {\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        this.listData = list;\n        if (this.isVirtualizationEnabled) {\n            this.notify(\"setGeneratedData\", {\n                module: \"VirtualScroll\",\n            });\n        }\n        if (this.getModuleName() !== 'listbox') {\n            ulElement.setAttribute('tabindex', '0');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate(['itemTemplate', 'groupTemplate', 'actionFailureTemplate', 'noRecordsTemplate']);\n        }\n        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;\n        if (this.getModuleName() === 'multiselect' && this.properties.allowCustomValue && this.fields.groupBy) {\n            for (let i = 0; i < ulElement.childElementCount; i++) {\n                if (ulElement.children[i].classList.contains('e-list-group-item')) {\n                    if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML == \"\") {\n                        addClass([ulElement.children[i]], HIDE_GROUPLIST);\n                    }\n                }\n            }\n        }\n        if (!isNullOrUndefined(this.list)) {\n            if (!this.isVirtualizationEnabled) {\n                this.list.innerHTML = '';\n                this.list.appendChild(ulElement);\n                this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                this.ulElement = this.list.querySelector('ul');\n                this.postRender(this.list, list, this.bindEvent);\n            }\n        }\n    }\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    postRender(listElement, list, bindEvent) {\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        const focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);\n        const selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);\n        if (focusItem && !selectedItem) {\n            focusItem.classList.add(dropDownBaseClasses.focus);\n        }\n        if (list.length <= 0) {\n            this.l10nUpdate();\n            addClass([listElement], dropDownBaseClasses.noData);\n        }\n        else {\n            listElement.classList.remove(dropDownBaseClasses.noData);\n        }\n    }\n    /**\n     * Get the query to do the data operation before list item generation.\n     *\n     * @param {Query} query - Accepts the external Query that execute along with data processing.\n     * @returns {Query} Returns the query to do the data query operation.\n     */\n    getQuery(query) {\n        return query ? query : this.query ? this.query : new Query();\n    }\n    updateVirtualizationProperties(itemCount, filtering) {\n        this.isVirtualizationEnabled = true;\n        this.virtualizedItemsCount = itemCount;\n        this.isAllowFiltering = filtering;\n    }\n    /**\n     * To render the template content for group header element.\n     *\n     * @param {HTMLElement} listEle - Specifies the group list elements.\n     * @returns {void}\n     */\n    renderGroupTemplate(listEle) {\n        if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {\n            const dataSource = this.dataSource;\n            const option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };\n            const headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);\n            const groupcheck = this.templateCompiler(this.groupTemplate);\n            if (typeof this.groupTemplate !== 'function' && groupcheck) {\n                const groupValue = select(this.groupTemplate, document).innerHTML.trim();\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this);\n                //EJ2-55168- Group checkbox is not working with group template\n                if (this.isGroupChecking) {\n                    for (let i = 0; i < tempHeaders.length; i++) {\n                        this.notify('addItem', { module: 'CheckBoxSelection', item: tempHeaders[i] });\n                    }\n                }\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this);\n                //EJ2-55168- Group checkbox is not working with group template\n                if (this.isGroupChecking) {\n                    for (let i = 0; i < tempHeaders.length; i++) {\n                        this.notify('addItem', { module: 'CheckBoxSelection', item: tempHeaders[i] });\n                    }\n                }\n            }\n            this.renderReactTemplates();\n        }\n    }\n    /**\n     * To create the ul li list items\n     *\n     * @param {object []} dataSource - Specifies the data to generate the list.\n     * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n     * @returns {HTMLElement} Return the ul li list items.\n     */\n    createListItems(dataSource, fields) {\n        if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {\n            if (fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            addClass([this.list], dropDownBaseClasses.grouping);\n        }\n        else {\n            dataSource = this.getSortedDataSource(dataSource);\n        }\n        const options = this.listOption(dataSource, fields);\n        const spliceData = (dataSource.length > 100) ?\n            new DataManager(dataSource).executeLocal(new Query().take(100))\n            : dataSource;\n        this.sortedData = dataSource;\n        return ListBase.createList(this.createElement, (this.getModuleName() === 'autocomplete') ? spliceData : dataSource, options, true, this);\n    }\n    listOption(dataSource, fields) {\n        const iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        const fieldValues = !isNullOrUndefined(fields.properties) ?\n            fields.properties : fields;\n        const options = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldValues,\n            showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        return extend({}, options, fields, true);\n    }\n    setFloatingHeader(e) {\n        if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n            if (isNullOrUndefined(this.fixedHeaderElement)) {\n                this.fixedHeaderElement = this.createElement('div', { className: dropDownBaseClasses.fixedHead });\n                if (!isNullOrUndefined(this.list) && !this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {\n                    this.fixedHeaderElement.style.display = 'none';\n                }\n                if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {\n                    prepend([this.fixedHeaderElement], this.list);\n                }\n                this.setFixedHeader();\n            }\n            if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {\n                this.setFixedHeader();\n            }\n            this.scrollStop(e);\n        }\n    }\n    scrollStop(e) {\n        const target = !isNullOrUndefined(e) ? e.target : this.list;\n        const liHeight = parseInt(getComputedStyle(this.getValidLi(), null).getPropertyValue('height'), 10);\n        const topIndex = Math.round(target.scrollTop / liHeight);\n        const liCollections = this.list.querySelectorAll('li' + ':not(.e-hide-listitem)');\n        for (let i = topIndex; i > -1; i--) {\n            if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {\n                const currentLi = liCollections[i];\n                this.fixedHeaderElement.innerHTML = currentLi.innerHTML;\n                this.fixedHeaderElement.style.top = target.scrollTop + 'px';\n                this.fixedHeaderElement.style.display = 'block';\n                break;\n            }\n            else {\n                this.fixedHeaderElement.style.display = 'none';\n                this.fixedHeaderElement.style.top = 'none';\n            }\n        }\n    }\n    getValidLi() {\n        return this.liCollections[0];\n    }\n    /**\n     * To render the list items\n     *\n     * @param {object[]} listData - Specifies the list of array of data.\n     * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n     * @returns {HTMLElement} Return the list items.\n     */\n    renderItems(listData, fields) {\n        let ulElement;\n        if (this.itemTemplate && listData) {\n            let dataSource = listData;\n            if (dataSource && fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            else {\n                dataSource = this.getSortedDataSource(dataSource);\n            }\n            this.sortedData = dataSource;\n            const spliceData = (dataSource.length > 100) ?\n                new DataManager(dataSource).executeLocal(new Query().take(100))\n                : dataSource;\n            ulElement = this.templateListItem((this.getModuleName() === 'autocomplete') ? spliceData : dataSource, fields);\n            if (this.isVirtualizationEnabled) {\n                var oldUlElement = this.list.querySelector('.e-list-parent');\n                var virtualUlElement = this.list.querySelector('.e-virtual-ddl-content');\n                if ((listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement) || (oldUlElement && virtualUlElement && this.isAllowFiltering) || (oldUlElement && virtualUlElement && this.getModuleName() === 'autocomplete')) {\n                    virtualUlElement.replaceChild(ulElement, oldUlElement);\n                    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                    this.ulElement = this.list.querySelector('ul');\n                    this.listData = listData;\n                    this.postRender(this.list, listData, this.bindEvent);\n                }\n                else if ((!virtualUlElement)) {\n                    this.list.innerHTML = '';\n                    this.list.appendChild(ulElement);\n                    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                    this.ulElement = this.list.querySelector('ul');\n                    this.listData = listData;\n                    this.postRender(this.list, listData, this.bindEvent);\n                }\n            }\n        }\n        else {\n            ulElement = this.createListItems(listData, fields);\n            if (this.isVirtualizationEnabled) {\n                var oldUlElement = this.list.querySelector('.e-list-parent');\n                var virtualUlElement = this.list.querySelector('.e-virtual-ddl-content');\n                if ((listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement) || (oldUlElement && virtualUlElement && this.isAllowFiltering) || (oldUlElement && virtualUlElement && this.getModuleName() === 'autocomplete')) {\n                    virtualUlElement.replaceChild(ulElement, oldUlElement);\n                    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                    this.ulElement = this.list.querySelector('ul');\n                    this.listData = listData;\n                    this.postRender(this.list, listData, this.bindEvent);\n                }\n                else if ((!virtualUlElement)) {\n                    this.list.innerHTML = '';\n                    this.list.appendChild(ulElement);\n                    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                    this.ulElement = this.list.querySelector('ul');\n                    this.listData = listData;\n                    this.postRender(this.list, listData, this.bindEvent);\n                }\n            }\n        }\n        return ulElement;\n    }\n    templateListItem(dataSource, fields) {\n        const option = this.listOption(dataSource, fields);\n        option.templateID = this.itemTemplateId;\n        option.isStringTemplate = this.isStringTemplate;\n        const itemcheck = this.templateCompiler(this.itemTemplate);\n        if (typeof this.itemTemplate !== 'function' && itemcheck) {\n            const itemValue = select(this.itemTemplate, document).innerHTML.trim();\n            return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);\n        }\n        else {\n            return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);\n        }\n    }\n    typeOfData(items) {\n        let item = { typeof: null, item: null };\n        for (let i = 0; (!isNullOrUndefined(items) && i < items.length); i++) {\n            if (!isNullOrUndefined(items[i])) {\n                const listDataType = typeof (items[i]) === 'string' ||\n                    typeof (items[i]) === 'number' || typeof (items[i]) === 'boolean';\n                const isNullData = listDataType ? isNullOrUndefined(items[i]) :\n                    isNullOrUndefined(getValue((this.fields.value ? this.fields.value : 'value'), items[i]));\n                if (!isNullData) {\n                    return item = { typeof: typeof items[i], item: items[i] };\n                }\n            }\n        }\n        return item;\n    }\n    setFixedHeader() {\n        if (!isNullOrUndefined(this.list)) {\n            this.list.parentElement.style.display = 'block';\n        }\n        let borderWidth = 0;\n        if (this.list && this.list.parentElement) {\n            borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);\n            /*Shorthand property not working in Firefox for getComputedStyle method.\n            Refer bug report https://bugzilla.mozilla.org/show_bug.cgi?id=137688\n            Refer alternate solution https://stackoverflow.com/a/41696234/9133493*/\n            if (isNaN(borderWidth)) {\n                let borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-top-width'), 10);\n                let borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-bottom-width'), 10);\n                let borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-left-width'), 10);\n                let borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-right-width'), 10);\n                borderWidth = (borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth);\n            }\n        }\n        if (!isNullOrUndefined(this.liCollections)) {\n            const liWidth = this.getValidLi().offsetWidth - borderWidth;\n            this.fixedHeaderElement.style.width = liWidth.toString() + 'px';\n        }\n        setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });\n        const firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group + ':not(.e-hide-listitem)');\n        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n    }\n    getSortedDataSource(dataSource) {\n        if (dataSource && this.sortOrder !== 'None') {\n            let textField = this.fields.text ? this.fields.text : 'text';\n            if (this.typeOfData(dataSource).typeof === 'string' || this.typeOfData(dataSource).typeof === 'number'\n                || this.typeOfData(dataSource).typeof === 'boolean') {\n                textField = '';\n            }\n            dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));\n        }\n        return dataSource;\n    }\n    /**\n     * Return the index of item which matched with given value in data source\n     *\n     * @param {string | number | boolean} value - Specifies given value.\n     * @returns {number} Returns the index of the item.\n     */\n    getIndexByValueFilter(value) {\n        let index;\n        const listItems = this.renderItems(this.selectData, this.fields);\n        for (let i = 0; i < listItems.children.length; i++) {\n            if (!isNullOrUndefined(value) && listItems.children[i].getAttribute('data-value') === value.toString()) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the index of item which matched with given value in data source\n     *\n     * @param {string | number | boolean} value - Specifies given value.\n     * @returns {number} Returns the index of the item.\n     */\n    getIndexByValue(value) {\n        let index;\n        const listItems = this.getItems();\n        for (let i = 0; i < listItems.length; i++) {\n            if (!isNullOrUndefined(value) && listItems[i].getAttribute('data-value') === value.toString()) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    /**\n     * To dispatch the event manually\n     *\n     * @param {HTMLElement} element - Specifies the element to dispatch the event.\n     * @param {string} type - Specifies the name of the event.\n     * @returns {void}\n     */\n    dispatchEvent(element, type) {\n        const evt = document.createEvent('HTMLEvents');\n        evt.initEvent(type, false, true);\n        if (element) {\n            element.dispatchEvent(evt);\n        }\n    }\n    /**\n     * To set the current fields\n     *\n     * @returns {void}\n     */\n    setFields() {\n        if (this.fields.value && !this.fields.text) {\n            this.updateFields(this.fields.value, this.fields.value);\n        }\n        else if (!this.fields.value && this.fields.text) {\n            this.updateFields(this.fields.text, this.fields.text);\n        }\n        else if (!this.fields.value && !this.fields.text) {\n            this.updateFields('text', 'text');\n        }\n    }\n    /**\n     * reset the items list.\n     *\n     * @param {Object[] | string[] | number[] | DataManager | boolean[]} dataSource - Specifies the data to generate the list.\n     * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n     * @param {Query} query - Accepts the external Query that execute along with data processing.\n     * @returns {void}\n     */\n    resetList(dataSource, fields, query, e) {\n        if (this.list) {\n            if ((this.element.tagName === 'SELECT' && this.element.options.length > 0)\n                || (this.element.tagName === 'UL' && this.element.childNodes.length > 0)) {\n                const data = dataSource instanceof Array ? (dataSource.length > 0)\n                    : !isNullOrUndefined(dataSource);\n                if (!data && this.selectData && this.selectData.length > 0) {\n                    dataSource = this.selectData;\n                }\n            }\n            dataSource = this.getModuleName() === 'combobox' && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;\n            this.addedNewItem = false;\n            this.setListData(dataSource, fields, query, e);\n        }\n    }\n    updateSelectElementData(isFiltering) {\n        if ((isFiltering || this.isVirtualizationEnabled) && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {\n            this.selectData = this.listData;\n        }\n    }\n    updateSelection() {\n        // This is for after added the item, need to update the selected index values.\n    }\n    renderList() {\n        // This is for render the list items.\n        this.render();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateDataSource(props) {\n        this.resetList(this.dataSource);\n        this.totalItemCount = this.dataSource instanceof DataManager ? this.dataSource.dataSource.json.length : 0;\n    }\n    setUpdateInitial(props, newProp) {\n        this.isDataFetched = false;\n        const updateData = {};\n        for (let j = 0; props.length > j; j++) {\n            if (newProp[props[j]] && props[j] === 'fields') {\n                this.setFields();\n                updateData[props[j]] = newProp[props[j]];\n            }\n            else if (newProp[props[j]]) {\n                updateData[props[j]] = newProp[props[j]];\n            }\n        }\n        if (Object.keys(updateData).length > 0) {\n            if (Object.keys(updateData).indexOf('dataSource') === -1) {\n                updateData.dataSource = this.dataSource;\n            }\n            this.updateDataSource(updateData);\n        }\n    }\n    /**\n     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n     *\n     * @param {DropDownBaseModel} newProp - Returns the dynamic property value of the component.\n     * @param {DropDownBaseModel} oldProp - Returns the previous property value of the component.\n     * @private\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'dropdownbase') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'sortOrder':\n                case 'dataSource':\n                case 'itemTemplate':\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'groupTemplate':\n                    this.renderGroupTemplate(this.list);\n                    if (this.ulElement && this.fixedHeaderElement) {\n                        const firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n                        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n                    }\n                    break;\n                case 'locale':\n                    if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {\n                        this.l10nUpdate();\n                    }\n                    break;\n                case 'zIndex':\n                    this.setProperties({ zIndex: newProp.zIndex }, true);\n                    this.setZIndex();\n                    break;\n            }\n        }\n    }\n    /**\n     * Build and render the component\n     *\n     * @param {boolean} isEmptyData - Specifies the component to initialize with list data or not.\n     * @private\n     * @returns {void}\n     */\n    render(e, isEmptyData) {\n        if (this.getModuleName() === 'listbox') {\n            this.list = this.createElement('div', { className: dropDownBaseClasses.content, attrs: { 'tabindex': '0' } });\n        }\n        else {\n            this.list = this.createElement('div', { className: dropDownBaseClasses.content });\n        }\n        this.list.classList.add(dropDownBaseClasses.root);\n        this.setFields();\n        const rippleModel = { duration: 300, selector: '.' + dropDownBaseClasses.li };\n        this.rippleFun = rippleEffect(this.list, rippleModel);\n        const group = this.element.querySelector('select>optgroup');\n        if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {\n            EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n        }\n        if (this.getModuleName() === 'dropdownbase') {\n            if (this.element.getAttribute('tabindex')) {\n                this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));\n            }\n            removeClass([this.element], dropDownBaseClasses.root);\n            this.element.style.display = 'none';\n            const wrapperElement = this.createElement('div');\n            this.element.parentElement.insertBefore(wrapperElement, this.element);\n            wrapperElement.appendChild(this.element);\n            wrapperElement.appendChild(this.list);\n        }\n        this.setEnableRtl();\n        if (!isEmptyData) {\n            this.initialize(e);\n        }\n    }\n    removeScrollEvent() {\n        if (this.list) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        }\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'dropdownbase';\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Gets all the list items bound on this component.\n     *\n     * @returns {Element[]}\n     */\n    getItems() {\n        return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     *\n     * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @returns {void}\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        if (!this.list || (this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox')) {\n            this.renderList();\n        }\n        if (this.sortOrder !== 'None' && isNullOrUndefined(itemIndex)) {\n            let newList = [].slice.call(this.listData);\n            newList.push(items);\n            newList = this.getSortedDataSource(newList);\n            if (this.fields.groupBy) {\n                newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);\n                itemIndex = newList.indexOf(items);\n            }\n            else {\n                itemIndex = newList.indexOf(items);\n            }\n        }\n        const itemsCount = this.getItems().length;\n        const selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        items = (items instanceof Array ? items : [items]);\n        let index;\n        index = (isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1) ? itemsCount : itemIndex;\n        const fields = this.fields;\n        if (items && fields.groupBy) {\n            items = ListBase.groupDataSource(items, fields.properties);\n        }\n        const liCollections = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const isHeader = item.isHeader;\n            const li = this.createElement('li', { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: 'option-add-' + i });\n            const itemText = item instanceof Object ? getValue(fields.text, item) : item;\n            if (isHeader) {\n                li.innerText = itemText;\n            }\n            if (this.itemTemplate && !isHeader) {\n                const itemCheck = this.templateCompiler(this.itemTemplate);\n                const compiledString = typeof this.itemTemplate !== 'function' &&\n                    itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const addItemTemplate = compiledString(item, this, 'itemTemplate', this.itemTemplateId, this.isStringTemplate, null, li);\n                if (addItemTemplate) {\n                    append(addItemTemplate, li);\n                }\n            }\n            else if (!isHeader) {\n                li.appendChild(document.createTextNode(itemText));\n            }\n            li.setAttribute('data-value', item instanceof Object ? getValue(fields.value, item) : item);\n            li.setAttribute('role', 'option');\n            this.notify('addItem', { module: 'CheckBoxSelection', item: li });\n            liCollections.push(li);\n            this.listData.push(item);\n            if (this.sortOrder === 'None' && isNullOrUndefined(itemIndex) && index === 0) {\n                index = null;\n            }\n            this.updateActionCompleteData(li, item, index);\n            //Listbox event\n            this.trigger('beforeItemRender', { element: li, item: item });\n        }\n        if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector('ul'))) {\n            if (!isNullOrUndefined(this.list)) {\n                this.list.innerHTML = '';\n                this.list.classList.remove(dropDownBaseClasses.noData);\n                this.isAddNewItemTemplate = true;\n                if (!isNullOrUndefined(this.ulElement)) {\n                    this.list.appendChild(this.ulElement);\n                }\n            }\n            this.liCollections = liCollections;\n            if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {\n                append(liCollections, this.ulElement);\n            }\n            this.updateAddItemList(this.list, itemsCount);\n        }\n        else {\n            if (this.getModuleName() === 'listbox' && itemsCount === 0) {\n                this.ulElement.innerHTML = '';\n            }\n            const attr = [];\n            for (let i = 0; i < items.length; i++) {\n                const listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');\n                for (let j = 0; j < listGroupItem.length; j++) {\n                    attr[j] = listGroupItem[j].innerText;\n                }\n                if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {\n                    for (let j = 0; j < listGroupItem.length; j++) {\n                        if (attr[j] === liCollections[i].innerText) {\n                            if (this.sortOrder === 'None') {\n                                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);\n                            }\n                            else {\n                                this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);\n                            }\n                            i = i + 1;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    if (this.liCollections[index]) {\n                        this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);\n                    }\n                    else {\n                        this.ulElement.appendChild(liCollections[i]);\n                    }\n                }\n                const tempLi = [].slice.call(this.liCollections);\n                tempLi.splice(index, 0, liCollections[i]);\n                this.liCollections = tempLi;\n                index += 1;\n                if (this.getModuleName() === 'multiselect') {\n                    this.updateDataList();\n                }\n            }\n        }\n        if (this.getModuleName() === 'listbox' && this.isReact) {\n            this.renderReactTemplates();\n        }\n        if (selectedItemValue || itemIndex === 0) {\n            this.updateSelection();\n        }\n        this.addedNewItem = true;\n    }\n    validationAttribute(target, hidden) {\n        const name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n        hidden.setAttribute('name', name);\n        target.removeAttribute('name');\n        const attributes = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes.length; i++) {\n            if (!target.getAttribute(attributes[i])) {\n                continue;\n            }\n            const attr = target.getAttribute(attributes[i]);\n            hidden.setAttribute(attributes[i], attr);\n            target.removeAttribute(attributes[i]);\n        }\n    }\n    setZIndex() {\n        // this is for component wise\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateActionCompleteData(li, item, index) {\n        // this is for ComboBox custom value\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateAddItemList(list, itemCount) {\n        // this is for multiselect add item\n    }\n    updateDataList() {\n        // this is for multiselect update list items\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Gets the data Object that matches the given value.\n     *\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns {Object}\n     */\n    getDataByValue(value) {\n        if (!isNullOrUndefined(this.listData)) {\n            const type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (const item of this.listData) {\n                    if (!isNullOrUndefined(item) && item === value) {\n                        return item;\n                    }\n                }\n            }\n            else {\n                for (const item of this.listData) {\n                    if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                        return item;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    destroy() {\n        if (document.body.contains(this.list)) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n            if (!isNullOrUndefined(this.rippleFun)) {\n                this.rippleFun();\n            }\n            detach(this.list);\n        }\n        this.liCollections = null;\n        this.ulElement = null;\n        this.list = null;\n        this.enableRtlElements = null;\n        this.rippleFun = null;\n        super.destroy();\n    }\n};\n__decorate([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], DropDownBase.prototype, \"fields\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Property('No records found')\n], DropDownBase.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property('Request failed')\n], DropDownBase.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property('None')\n], DropDownBase.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property([])\n], DropDownBase.prototype, \"dataSource\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"query\", void 0);\n__decorate([\n    Property('StartsWith')\n], DropDownBase.prototype, \"filterType\", void 0);\n__decorate([\n    Property(true)\n], DropDownBase.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(1000)\n], DropDownBase.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], DropDownBase.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Property()\n], DropDownBase.prototype, \"locale\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionFailure\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"dataBound\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"destroyed\", void 0);\nDropDownBase = __decorate([\n    NotifyPropertyChanges\n], DropDownBase);\nexport { DropDownBase };\n","/**\n * export all modules from current location\n */\nexport * from './drop-down-base';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\nimport { EventHandler, Property, Event, compile, KeyboardEvents, append, select } from '@syncfusion/ej2-base';\nimport { attributes, isNullOrUndefined, getUniqueID, formatUnit, isUndefined, getValue } from '@syncfusion/ej2-base';\nimport { Animation, Browser, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, prepend, detach, classList } from '@syncfusion/ej2-base';\nimport { Popup, isCollide, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { incrementalSearch, resetIncrementalSearchValues } from '../common/incremental-search';\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nimport { DataManager, Query, Predicate } from '@syncfusion/ej2-data';\nimport { Skeleton } from '@syncfusion/ej2-notifications';\n[];\n// don't use space in classnames\nexport const dropDownListClasses = {\n    root: 'e-dropdownlist',\n    hover: dropDownBaseClasses.hover,\n    selected: dropDownBaseClasses.selected,\n    rtl: dropDownBaseClasses.rtl,\n    li: dropDownBaseClasses.li,\n    disable: dropDownBaseClasses.disabled,\n    base: dropDownBaseClasses.root,\n    focus: dropDownBaseClasses.focus,\n    content: dropDownBaseClasses.content,\n    input: 'e-input-group',\n    inputFocus: 'e-input-focus',\n    icon: 'e-input-group-icon e-ddl-icon',\n    iconAnimation: 'e-icon-anim',\n    value: 'e-input-value',\n    device: 'e-ddl-device',\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    mobileFilter: 'e-ddl-device-filter',\n    footer: 'e-ddl-footer',\n    header: 'e-ddl-header',\n    clearIcon: 'e-clear-icon',\n    clearIconHide: 'e-clear-icon-hide',\n    popupFullScreen: 'e-popup-full-page',\n    disableIcon: 'e-ddl-disable-icon',\n    hiddenElement: 'e-ddl-hidden',\n    virtualList: 'e-list-item e-virtual-list',\n};\nconst inputObject = {\n    container: null,\n    buttons: []\n};\n/**\n * The DropDownList component contains a list of predefined values from which you can\n * choose a single value.\n * ```html\n * <input type=\"text\" tabindex=\"1\" id=\"list\"> </input>\n * ```\n * ```typescript\n *   let dropDownListObj:DropDownList = new DropDownList();\n *   dropDownListObj.appendTo(\"#list\");\n * ```\n */\nlet DropDownList = class DropDownList extends DropDownBase {\n    /**\n     * * Constructor for creating the DropDownList component.\n     *\n     * @param {DropDownListModel} options - Specifies the DropDownList model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.skeletonCount = 32;\n        this.isListSearched = false;\n        this.preventChange = false;\n        this.isAngular = false;\n        this.itemCount = 10;\n        this.virtualListHeight = 0;\n        this.isVirtualScrolling = false;\n        this.isPreventScrollAction = false;\n        this.scrollPreStartIndex = 0;\n        this.isScrollActionTriggered = false;\n        this.previousStartIndex = 0;\n        this.isMouseScrollAction = false;\n        this.isKeyBoardAction = false;\n        this.isUpwardScrolling = false;\n        this.startIndex = 0;\n        this.currentPageNumber = 0;\n        this.pageCount = 0;\n        this.isPreventKeyAction = false;\n        this.generatedDataObject = {};\n        this.isTouched = false;\n        this.virtualListInfo = {\n            currentPageNumber: null,\n            direction: null,\n            sentinelInfo: {},\n            offsets: {},\n            startIndex: 0,\n            endIndex: 0,\n        };\n        this.viewPortInfo = {\n            currentPageNumber: null,\n            direction: null,\n            sentinelInfo: {},\n            offsets: {},\n            startIndex: 0,\n            endIndex: 0,\n        };\n        this.selectedValueInfo = {\n            currentPageNumber: null,\n            direction: null,\n            sentinelInfo: {},\n            offsets: {},\n            startIndex: 0,\n            endIndex: 0,\n        };\n        this.IsScrollerAtEnd = function () {\n            return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;\n        };\n    }\n    /**\n     * Initialize the event handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    preRender() {\n        this.valueTempElement = null;\n        this.element.style.opacity = '0';\n        this.initializeData();\n        super.preRender();\n        this.activeIndex = this.index;\n        this.queryString = '';\n    }\n    initializeData() {\n        this.isPopupOpen = false;\n        this.isDocumentClick = false;\n        this.isInteracted = false;\n        this.isFilterFocus = false;\n        this.beforePopupOpen = false;\n        this.initial = true;\n        this.initRemoteRender = false;\n        this.isNotSearchList = false;\n        this.isTyped = false;\n        this.isSelected = false;\n        this.preventFocus = false;\n        this.preventAutoFill = false;\n        this.isValidKey = false;\n        this.typedString = '';\n        this.isEscapeKey = false;\n        this.isPreventBlur = false;\n        this.isTabKey = false;\n        this.actionCompleteData = { isUpdated: false };\n        this.actionData = { isUpdated: false };\n        this.prevSelectPoints = {};\n        this.isSelectCustom = false;\n        this.isDropDownClick = false;\n        this.preventAltUp = false;\n        this.isCustomFilter = false;\n        this.isSecondClick = false;\n        this.previousValue = null;\n        this.keyConfigure = {\n            tab: 'tab',\n            enter: '13',\n            escape: '27',\n            end: '35',\n            home: '36',\n            down: '40',\n            up: '38',\n            pageUp: '33',\n            pageDown: '34',\n            open: 'alt+40',\n            close: 'shift+tab',\n            hide: 'alt+38',\n            space: '32'\n        };\n        this.viewPortInfo = {\n            currentPageNumber: null,\n            direction: null,\n            sentinelInfo: {},\n            offsets: {},\n            startIndex: 0,\n            endIndex: this.itemCount,\n        };\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    requiredModules() {\n        const modules = [];\n        if (this.enableVirtualization) {\n            modules.push({ args: [this], member: 'VirtualScroll' });\n        }\n        return modules;\n    }\n    renderList(e, isEmptyData) {\n        super.render(e, isEmptyData);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;\n        this.unWireListEvents();\n        this.wireListEvents();\n    }\n    floatLabelChange() {\n        if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {\n            const floatElement = this.inputWrapper.container.querySelector('.e-float-text');\n            if (this.inputElement.value !== '' || this.isInteracted) {\n                classList(floatElement, ['e-label-top'], ['e-label-bottom']);\n            }\n            else {\n                classList(floatElement, ['e-label-bottom'], ['e-label-top']);\n            }\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        this.clearAll(e);\n        if (this.enableVirtualization) {\n            this.list.scrollTop = 0;\n            this.virtualListInfo = null;\n            this.previousStartIndex = 0;\n            this.previousEndIndex = 0;\n        }\n    }\n    resetFocusElement() {\n        this.removeHover();\n        this.removeSelection();\n        this.removeFocus();\n        this.list.scrollTop = 0;\n        if (this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.ulElement)) {\n            let li = this.ulElement.querySelector('.' + dropDownListClasses.li);\n            if (this.enableVirtualization) {\n                li = this.liCollections[this.skeletonCount];\n            }\n            if (li) {\n                li.classList.add(dropDownListClasses.focus);\n            }\n        }\n    }\n    clearAll(e, properties) {\n        this.previousItemData = (!isNullOrUndefined(this.itemData)) ? this.itemData : null;\n        if (isNullOrUndefined(properties) || (!isNullOrUndefined(properties) &&\n            (isNullOrUndefined(properties.dataSource) ||\n                (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n            this.isActive = true;\n            this.resetSelection(properties);\n        }\n        const dataItem = this.getItemData();\n        if (this.previousValue === dataItem.value) {\n            return;\n        }\n        this.onChangeEvent(e);\n        this.checkAndResetCache();\n        if (this.enableVirtualization) {\n            this.updateInitialData();\n        }\n    }\n    resetSelection(properties) {\n        if (this.list) {\n            if ((!isNullOrUndefined(properties) &&\n                (isNullOrUndefined(properties.dataSource) ||\n                    (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n                this.selectedLI = null;\n                this.actionCompleteData.isUpdated = false;\n                this.actionCompleteData.ulElement = null;\n                this.actionCompleteData.list = null;\n                this.resetList(properties.dataSource);\n            }\n            else {\n                if (this.allowFiltering && this.getModuleName() !== 'autocomplete'\n                    && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) &&\n                    this.actionCompleteData.list.length > 0) {\n                    this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);\n                }\n                this.resetFocusElement();\n            }\n        }\n        if (!isNullOrUndefined(this.hiddenElement)) {\n            this.hiddenElement.innerHTML = '';\n        }\n        if (!isNullOrUndefined(this.inputElement)) {\n            this.inputElement.value = '';\n        }\n        this.value = null;\n        this.itemData = null;\n        this.text = null;\n        this.index = null;\n        this.activeIndex = null;\n        this.item = null;\n        this.queryString = '';\n        if (this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n            this.valueTempElement = null;\n        }\n        this.setSelection(null, null);\n        this.isSelectCustom = false;\n        this.updateIconState();\n        this.cloneElements();\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (const htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    const updatedClassValue = (this.htmlAttributes[`${htmlAttr}`].replace(/\\s+/g, ' ')).trim();\n                    if (updatedClassValue !== '') {\n                        addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n                    }\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[`${htmlAttr}`] === 'disabled') {\n                    this.enabled = false;\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[`${htmlAttr}`])) {\n                    this.readonly = true;\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.container.setAttribute('style', this.htmlAttributes[`${htmlAttr}`]);\n                }\n                else if (htmlAttr === 'aria-label') {\n                    if ((this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') && !this.readonly) {\n                        this.inputElement.setAttribute('aria-label', this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                    else if (this.getModuleName() === 'dropdownlist') {\n                        this.inputWrapper.container.setAttribute('aria-label', this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                }\n                else {\n                    const defaultAttr = ['title', 'id', 'placeholder',\n                        'role', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    const validateAttr = ['name', 'required'];\n                    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n                        defaultAttr.push('tabindex');\n                    }\n                    if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf('data') === 0) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        if (htmlAttr === 'placeholder') {\n                            Input.setPlaceholder(this.htmlAttributes[`${htmlAttr}`], this.inputElement);\n                        }\n                        else {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                    }\n                    else {\n                        this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                }\n            }\n        }\n        if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            this.inputWrapper.container.removeAttribute('tabindex');\n        }\n    }\n    getAriaAttributes() {\n        return {\n            'aria-disabled': 'false',\n            'role': 'combobox',\n            'aria-expanded': 'false',\n            'aria-live': 'polite',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    setEnableRtl() {\n        Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);\n        if (this.popupObj) {\n            this.popupObj.enableRtl = this.enableRtl;\n            this.popupObj.dataBind();\n        }\n    }\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputElement);\n        if (this.enabled) {\n            removeClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'false');\n            this.targetElement().setAttribute('tabindex', this.tabIndex);\n        }\n        else {\n            this.hidePopup();\n            addClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'true');\n            this.targetElement().tabIndex = -1;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} Returns the persisted data of the component.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    getLocaleName() {\n        return 'drop-down-list';\n    }\n    preventTabIndex(element) {\n        if (this.getModuleName() === 'dropdownlist') {\n            element.tabIndex = -1;\n        }\n    }\n    targetElement() {\n        return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;\n    }\n    getNgDirective() {\n        return 'EJS-DROPDOWNLIST';\n    }\n    getElementByText(text) {\n        return this.getElementByValue(this.getValueByText(text));\n    }\n    getElementByValue(value) {\n        let item;\n        const listItems = this.getItems();\n        for (const liItem of listItems) {\n            if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {\n                item = liItem;\n                break;\n            }\n        }\n        return item;\n    }\n    initValue() {\n        this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;\n        this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;\n        this.renderList();\n        if (this.dataSource instanceof DataManager) {\n            this.initRemoteRender = true;\n        }\n        else {\n            this.updateValues();\n        }\n    }\n    updateValues() {\n        this.selectedValueInfo = this.viewPortInfo;\n        if (!isNullOrUndefined(this.value)) {\n            this.setSelection(this.getElementByValue(this.value), null);\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            const element = this.getElementByText(this.text);\n            if (isNullOrUndefined(element)) {\n                this.setProperties({ text: null });\n                return;\n            }\n            else {\n                this.setSelection(element, null);\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    onBlurHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        const target = e.relatedTarget;\n        const currentTarget = e.target;\n        const isPreventBlur = this.isPreventBlur;\n        this.isPreventBlur = false;\n        //IE 11 - issue\n        if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) ||\n            !this.isFilterLayout() && isNullOrUndefined(target))) {\n            if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {\n                this.filterInput.focus();\n            }\n            else {\n                this.targetElement().focus();\n            }\n            return;\n        }\n        if (this.isDocumentClick || (!isNullOrUndefined(this.popupObj)\n            && document.body.contains(this.popupObj.element) &&\n            this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter))) {\n            if (!this.beforePopupOpen) {\n                this.isDocumentClick = false;\n            }\n            return;\n        }\n        if (((this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement)\n            && (document.activeElement !== target || (document.activeElement === target &&\n                currentTarget.classList.contains(dropDownListClasses.inputFocus)))) ||\n            (isNullOrUndefined(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering &&\n                currentTarget !== this.inputWrapper.container) || this.getModuleName() !== 'dropdownlist' &&\n            !this.inputWrapper.container.contains(target) || this.isTabKey) {\n            this.isDocumentClick = this.isPopupOpen ? true : false;\n            this.focusOutAction(e);\n            this.isTabKey = false;\n        }\n        if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {\n            this.isActive = false;\n            this.beforePopupOpen = false;\n        }\n    }\n    focusOutAction(e) {\n        this.isInteracted = false;\n        this.focusOut(e);\n        this.onFocusOut();\n    }\n    onFocusOut() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.isSelected) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(null);\n        }\n        this.floatLabelChange();\n        this.dispatchEvent(this.hiddenElement, 'change');\n        if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {\n            this.dispatchEvent(this.inputElement, 'blur');\n        }\n        if (this.inputWrapper.clearButton) {\n            addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n        }\n        this.trigger('blur');\n    }\n    onFocus(e) {\n        if (!this.isInteracted) {\n            this.isInteracted = true;\n            const args = { isInteracted: e ? true : false, event: e };\n            this.trigger('focus', args);\n        }\n        this.updateIconState();\n    }\n    resetValueHandler(e) {\n        const formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            const val = (this.element.tagName === this.getNgDirective()) ? null : this.inputElement.getAttribute('value');\n            this.text = val;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        this.bindCommonEvent();\n    }\n    bindCommonEvent() {\n        EventHandler.add(this.targetElement(), 'blur', this.onBlurHandler, this);\n        const formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.keyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        else {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.mobileKeyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        this.bindClearEvent();\n    }\n    windowResize() {\n        if (this.isPopupOpen) {\n            this.popupObj.refreshPosition(this.inputWrapper.container);\n        }\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n        }\n    }\n    unBindCommonEvent() {\n        if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {\n            EventHandler.remove(this.targetElement(), 'blur', this.onBlurHandler);\n        }\n        const formElement = this.inputElement && closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule.destroy();\n        }\n        if (this.showClearButton) {\n            EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);\n        }\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    /**\n     * Event binding for list\n     *\n     * @returns {void}\n     */\n    wireListEvents() {\n        if (!isNullOrUndefined(this.list)) {\n            EventHandler.add(this.list, 'click', this.onMouseClick, this);\n            EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n            EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n        }\n    }\n    onSearch(e) {\n        if (e.charCode !== 32 && e.charCode !== 13) {\n            if (this.list === undefined) {\n                this.renderList();\n            }\n            this.searchKeyEvent = e;\n            this.onServerIncrementalSearch(e);\n        }\n    }\n    onServerIncrementalSearch(e) {\n        if (!this.isRequested && !isNullOrUndefined(this.list) &&\n            !isNullOrUndefined(this.list.querySelector('li')) && this.enabled && !this.readonly) {\n            this.incrementalSearch(e);\n        }\n    }\n    onMouseClick(e) {\n        const target = e.target;\n        this.keyboardEvent = null;\n        const li = closest(target, '.' + dropDownBaseClasses.li);\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        this.setSelection(li, e);\n        if (Browser.isDevice && this.isFilterLayout()) {\n            history.back();\n        }\n        else {\n            const delay = 100;\n            this.closePopup(delay, e);\n        }\n    }\n    onMouseOver(e) {\n        const currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        this.setHover(currentLi);\n    }\n    setHover(li) {\n        if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n    }\n    onMouseLeave() {\n        this.removeHover();\n    }\n    removeHover() {\n        if (this.list) {\n            const hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.hover);\n            }\n        }\n    }\n    isValidLI(li) {\n        return (li && li.hasAttribute('role') && li.getAttribute('role') === 'option');\n    }\n    incrementalSearch(e) {\n        if (this.liCollections.length > 0) {\n            const li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);\n            if (!isNullOrUndefined(li)) {\n                this.setSelection(li, e);\n                this.setScrollPosition();\n            }\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     *\n     * @returns {void}\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            this.spinnerElement.innerHTML = '';\n            this.spinnerElement = null;\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     *\n     * @returns {void}\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] ||\n                !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    keyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.keyboardEvent = e;\n        if (this.isPreventKeyAction && this.enableVirtualization) {\n            e.preventDefault();\n        }\n        const preventAction = e.action === 'pageUp' || e.action === 'pageDown';\n        const preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');\n        this.isEscapeKey = e.action === 'escape';\n        this.isTabKey = !this.isPopupOpen && e.action === 'tab';\n        const isNavigation = (e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown'\n            || e.action === 'home' || e.action === 'end');\n        if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            const isTabAction = e.action === 'tab' || e.action === 'close';\n            if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== 'escape') {\n                this.searchKeyEvent = e;\n                this.renderList(e);\n            }\n            if (isNullOrUndefined(this.list) || (!isNullOrUndefined(this.liCollections) &&\n                isNavigation && this.liCollections.length === 0) || this.isRequested) {\n                return;\n            }\n            if ((isTabAction && this.getModuleName() !== 'autocomplete') && this.isPopupOpen\n                || e.action === 'escape') {\n                e.preventDefault();\n            }\n            this.isSelected = e.action === 'escape' ? false : this.isSelected;\n            this.isTyped = (isNavigation || e.action === 'escape') ? false : this.isTyped;\n            switch (e.action) {\n                case 'down':\n                case 'up':\n                    this.updateUpDownAction(e);\n                    break;\n                case 'pageUp':\n                    this.pageUpSelection(this.activeIndex - this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'pageDown':\n                    this.pageDownSelection(this.activeIndex + this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'home':\n                    this.isMouseScrollAction = true;\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'end':\n                    this.isMouseScrollAction = true;\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'space':\n                    if (this.getModuleName() === 'dropdownlist') {\n                        if (!this.beforePopupOpen) {\n                            this.showPopup();\n                        }\n                    }\n                    break;\n                case 'open':\n                    this.showPopup(e);\n                    break;\n                case 'hide':\n                    this.preventAltUp = this.isPopupOpen;\n                    this.hidePopup(e);\n                    this.focusDropDown(e);\n                    break;\n                case 'enter':\n                    this.selectCurrentItem(e);\n                    break;\n                case 'tab':\n                    this.selectCurrentValueOnTab(e);\n                    break;\n                case 'escape':\n                case 'close':\n                    if (this.isPopupOpen) {\n                        this.hidePopup(e);\n                        this.focusDropDown(e);\n                    }\n                    break;\n            }\n        }\n    }\n    updateUpDownAction(e, isVirtualKeyAction) {\n        if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== 'autocomplete') {\n            let value = this.getItemData().value;\n            let filterIndex = this.getIndexByValue(value);\n            if (!isNullOrUndefined(filterIndex)) {\n                this.activeIndex = filterIndex;\n            }\n        }\n        const focusEle = this.list.querySelector('.' + dropDownListClasses.focus);\n        if (this.isSelectFocusItem(focusEle) && !isVirtualKeyAction) {\n            this.setSelection(focusEle, e);\n            if (this.enableVirtualization) {\n                let selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + (this.virtualListInfo.startIndex * this.selectedLI.offsetHeight) : this.selectedLI.offsetTop;\n                this.list.scrollTop = selectedLiOffsetTop - (this.list.querySelectorAll('.e-virtual-list').length * this.selectedLI.offsetHeight);\n            }\n        }\n        else if (!isNullOrUndefined(this.liCollections)) {\n            let virtualIndex = this.activeIndex;\n            let index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n            index = isVirtualKeyAction ? virtualIndex : index;\n            let startIndex = 0;\n            if (this.getModuleName() === 'autocomplete') {\n                startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n                index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n            }\n            let nextItem;\n            if (this.getModuleName() !== 'autocomplete' || this.getModuleName() === 'autocomplete' && this.isPopupOpen) {\n                if (!this.enableVirtualization) {\n                    nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex]\n                        : this.liCollections[index];\n                }\n                else {\n                    if (!isVirtualKeyAction) {\n                        nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[this.skeletonCount]\n                            : this.liCollections[index];\n                        nextItem = !isNullOrUndefined(nextItem) && !nextItem.classList.contains('e-virtual-list') ? nextItem : null;\n                    }\n                    else {\n                        if (this.getModuleName() === 'autocomplete') {\n                            var value = this.selectedLI.dataset.value;\n                            nextItem = this.getElementByValue(value);\n                        }\n                        else {\n                            nextItem = this.getElementByValue(this.getItemData().value);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(nextItem)) {\n                this.setSelection(nextItem, e);\n            }\n        }\n        if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== 'autocomplete') {\n            let value = this.getItemData().value;\n            let filterIndex = this.getIndexByValueFilter(value);\n            if (!isNullOrUndefined(filterIndex)) {\n                this.activeIndex = filterIndex;\n            }\n        }\n        e.preventDefault();\n    }\n    updateHomeEndAction(e, isVirtualKeyAction) {\n        if (this.getModuleName() === 'dropdownlist') {\n            let findLi = 0;\n            if (e.action === 'home') {\n                findLi = 0;\n                if (this.enableVirtualization) {\n                    findLi = this.skeletonCount;\n                }\n            }\n            else {\n                findLi = this.getItems().length - 1;\n            }\n            e.preventDefault();\n            if (this.activeIndex === findLi) {\n                if (isVirtualKeyAction) {\n                    this.setSelection(this.liCollections[findLi], e);\n                }\n                return;\n            }\n            this.setSelection(this.liCollections[findLi], e);\n        }\n    }\n    selectCurrentValueOnTab(e) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.selectCurrentItem(e);\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup(e);\n                this.focusDropDown(e);\n            }\n        }\n    }\n    mobileKeyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if ((this.isEditTextBox()) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            if (this.list === undefined && !this.isRequested) {\n                this.searchKeyEvent = e;\n                this.renderList();\n            }\n            if (isNullOrUndefined(this.list) || (!isNullOrUndefined(this.liCollections) &&\n                this.liCollections.length === 0) || this.isRequested) {\n                return;\n            }\n            if (e.action === 'enter') {\n                this.selectCurrentItem(e);\n            }\n        }\n    }\n    handleVirtualKeyboardActions(e, pageCount) {\n        switch (e.action) {\n            case 'down':\n            case 'up':\n                if (this.itemData != null || this.getModuleName() === 'autocomplete') {\n                    this.updateUpDownAction(e, true);\n                }\n                break;\n            case 'pageUp':\n                let count = (pageCount * 2) - 4;\n                this.activeIndex = Math.round(count);\n                this.pageUpSelection(this.activeIndex - this.getPageCount(), e, true);\n                e.preventDefault();\n                break;\n            case 'pageDown':\n                this.activeIndex = 1;\n                this.pageDownSelection(this.activeIndex + this.getPageCount(), e, true);\n                e.preventDefault();\n                break;\n            case 'home':\n                this.isMouseScrollAction = true;\n                this.updateHomeEndAction(e, true);\n                break;\n            case 'end':\n                this.isMouseScrollAction = true;\n                this.updateHomeEndAction(e, true);\n                break;\n        }\n        this.keyboardEvent = null;\n    }\n    selectCurrentItem(e) {\n        if (this.isPopupOpen) {\n            const li = this.list.querySelector('.' + dropDownListClasses.focus);\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n            this.hidePopup(e);\n            this.focusDropDown(e);\n        }\n        else {\n            this.showPopup();\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    getPageCount(returnExactCount) {\n        const liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        let pageCount = Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));\n        return returnExactCount ? pageCount : Math.round(pageCount);\n    }\n    pageUpSelection(steps, event, isVirtualKeyAction) {\n        let previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];\n        if ((this.enableVirtualization && this.activeIndex == null) || isVirtualKeyAction) {\n            previousItem = steps >= 0 ? this.liCollections[steps + this.skeletonCount + 1] : this.liCollections[0];\n        }\n        if (!isNullOrUndefined(previousItem) && previousItem.classList.contains('e-virtual-list')) {\n            previousItem = this.liCollections[this.skeletonCount];\n        }\n        this.PageUpDownSelection(previousItem, event);\n    }\n    PageUpDownSelection(previousItem, event) {\n        if (this.enableVirtualization) {\n            if (!isNullOrUndefined(previousItem) && ((this.getModuleName() !== 'autocomplete' && !previousItem.classList.contains('e-active')) || (this.getModuleName() === 'autocomplete' && !previousItem.classList.contains('e-item-focus')))) {\n                this.setSelection(previousItem, event);\n            }\n        }\n        else {\n            this.setSelection(previousItem, event);\n        }\n    }\n    pageDownSelection(steps, event, isVirtualKeyAction) {\n        const list = this.getItems();\n        let previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];\n        if ((this.enableVirtualization && this.activeIndex == null) || isVirtualKeyAction) {\n            previousItem = steps <= list.length ? this.liCollections[steps + this.skeletonCount - 1] : this.liCollections[list.length - 1];\n        }\n        this.PageUpDownSelection(previousItem, event);\n    }\n    unWireEvent() {\n        if (!isNullOrUndefined(this.inputWrapper)) {\n            EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);\n            EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);\n            EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);\n            EventHandler.remove(window, 'resize', this.windowResize);\n        }\n        this.unBindCommonEvent();\n    }\n    /**\n     * Event un binding for list items.\n     *\n     * @returns {void}\n     */\n    unWireListEvents() {\n        if (this.list) {\n            EventHandler.remove(this.list, 'click', this.onMouseClick);\n            EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n            EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n        }\n    }\n    checkSelector(id) {\n        return '[id=\"' + id.replace(/(:|\\.|\\[|\\]|,|=|@|\\\\|\\/|#)/g, '\\\\$1') + '\"]';\n    }\n    onDocumentClick(e) {\n        const target = e.target;\n        if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) &&\n            !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {\n            if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {\n                this.isDocumentClick = true;\n                const isActive = this.isRequested;\n                this.isInteracted = false;\n                this.hidePopup(e);\n                if (!isActive) {\n                    this.onFocusOut();\n                    this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n                }\n            }\n        }\n        else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput)\n            && !(this.getModuleName() === 'combobox' &&\n                !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {\n            this.isPreventBlur = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.targetElement() ||\n                document.activeElement === this.filterInput);\n            e.preventDefault();\n        }\n    }\n    activeStateChange() {\n        if (this.isDocumentClick) {\n            this.hidePopup();\n            this.onFocusOut();\n            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n        }\n    }\n    focusDropDown(e) {\n        if (!this.initial && this.isFilterLayout()) {\n            this.focusIn(e);\n        }\n    }\n    dropDownClick(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        this.keyboardEvent = null;\n        if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {\n            return;\n        }\n        const target = e.target;\n        if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {\n            e.preventDefault();\n        }\n        if (!this.readonly) {\n            if (this.isPopupOpen) {\n                this.hidePopup(e);\n                if (this.isFilterLayout()) {\n                    this.focusDropDown(e);\n                }\n            }\n            else {\n                this.focusIn(e);\n                this.floatLabelChange();\n                this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;\n                this.isDropDownClick = true;\n                this.showPopup(e);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const proxy = this;\n            // eslint-disable-next-line max-len\n            const duration = (this.element.tagName === this.getNgDirective() && this.itemTemplate) ? 500 : 100;\n            if (!this.isSecondClick) {\n                setTimeout(() => {\n                    proxy.cloneElements();\n                    proxy.isSecondClick = true;\n                }, duration);\n            }\n        }\n        else {\n            this.focusIn(e);\n        }\n    }\n    cloneElements() {\n        if (this.list) {\n            let ulElement = this.list.querySelector('ul');\n            if (ulElement) {\n                ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                this.actionCompleteData.ulElement = ulElement;\n            }\n        }\n    }\n    updateSelectedItem(li, e, preventSelect, isSelection) {\n        this.removeSelection();\n        li.classList.add(dropDownBaseClasses.selected);\n        this.removeHover();\n        const value = li.getAttribute('data-value') !== \"null\" ? this.getFormattedValue(li.getAttribute('data-value')) : null;\n        const selectedData = this.getDataByValue(value);\n        if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {\n            const items = this.detachChanges(selectedData);\n            this.isSelected = true;\n            const eventArgs = {\n                e: e,\n                item: li,\n                itemData: items,\n                isInteracted: e ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    li.classList.remove(dropDownBaseClasses.selected);\n                }\n                else {\n                    this.selectEventCallback(li, e, preventSelect, selectedData, value);\n                    if (isSelection) {\n                        this.setSelectOptions(li, e);\n                    }\n                }\n            });\n        }\n        else {\n            this.selectEventCallback(li, e, preventSelect, selectedData, value);\n            if (isSelection) {\n                this.setSelectOptions(li, e);\n            }\n        }\n    }\n    selectEventCallback(li, e, preventSelect, selectedData, value) {\n        this.previousItemData = (!isNullOrUndefined(this.itemData)) ? this.itemData : null;\n        if (this.itemData != selectedData) {\n            this.previousValue = (!isNullOrUndefined(this.itemData)) ? typeof this.itemData == \"object\" ? this.checkFieldValue(this.itemData, this.fields.value.split('.')) : this.itemData : null;\n        }\n        this.item = li;\n        this.itemData = selectedData;\n        const focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (focusedItem) {\n            removeClass([focusedItem], dropDownBaseClasses.focus);\n        }\n        li.setAttribute('aria-selected', 'true');\n        if (isNullOrUndefined(value)) {\n            value = 'null';\n        }\n        if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== 'autocomplete') {\n            let filterIndex = this.getIndexByValueFilter(value);\n            if (!isNullOrUndefined(filterIndex)) {\n                this.activeIndex = filterIndex;\n            }\n            else {\n                this.activeIndex = this.getIndexByValue(value);\n            }\n        }\n        else {\n            this.activeIndex = this.getIndexByValue(value);\n        }\n    }\n    activeItem(li) {\n        if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {\n            this.removeSelection();\n            li.classList.add(dropDownBaseClasses.selected);\n            this.removeHover();\n            li.setAttribute('aria-selected', 'true');\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setValue(e) {\n        const dataItem = this.getItemData();\n        if (dataItem.value === null) {\n            Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n        else {\n            Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n        if (this.valueTemplate && this.itemData !== null) {\n            this.setValueTemplate();\n        }\n        else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n        }\n        if (!isNullOrUndefined(dataItem.value) && !this.enableVirtualization && this.allowFiltering) {\n            this.activeIndex = this.getIndexByValueFilter(dataItem.value);\n        }\n        const clearIcon = dropDownListClasses.clearIcon;\n        const isFilterElement = this.isFiltering() && this.filterInput && (this.getModuleName() === 'combobox');\n        const clearElement = isFilterElement && this.filterInput.parentElement.querySelector('.' + clearIcon);\n        if (this.isFiltering() && clearElement) {\n            clearElement.style.removeProperty('visibility');\n        }\n        if (this.previousValue === dataItem.value) {\n            this.isSelected = false;\n            return true;\n        }\n        else {\n            this.isSelected = !this.initial ? true : false;\n            this.isSelectCustom = false;\n            if (this.getModuleName() === 'dropdownlist') {\n                this.updateIconState();\n            }\n            return false;\n        }\n    }\n    setSelection(li, e) {\n        if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || (this.isPopupOpen && this.isSelected\n            && li.classList.contains(dropDownBaseClasses.selected)))) {\n            this.updateSelectedItem(li, e, false, true);\n        }\n        else {\n            this.setSelectOptions(li, e);\n            if (this.enableVirtualization) {\n                const fields = (this.fields.value) ? this.fields.value : '';\n                const getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, 'equal', this.value)));\n                if (getItem && getItem.length > 0) {\n                    this.itemData = getItem[0];\n                    this.setProperties({ 'text': getItem[0].text, 'value': getItem[0].value }, true);\n                }\n            }\n        }\n    }\n    setSelectOptions(li, e) {\n        if (this.list) {\n            this.removeHover();\n        }\n        this.previousSelectedLI = (!isNullOrUndefined(this.selectedLI)) ? this.selectedLI : null;\n        this.selectedLI = li;\n        if (this.setValue(e)) {\n            return;\n        }\n        if ((!this.isPopupOpen && !isNullOrUndefined(li)) || (this.isPopupOpen && !isNullOrUndefined(e) &&\n            (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter'))) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(e);\n        }\n        if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {\n            this.setScrollPosition(e);\n        }\n        if (Browser.info.name !== 'mozilla') {\n            if (this.targetElement()) {\n                attributes(this.targetElement(), { 'aria-describedby': this.inputElement.id !== '' ? this.inputElement.id : this.element.id });\n                this.targetElement().removeAttribute('aria-live');\n            }\n        }\n        if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n            attributes(this.targetElement(), { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id });\n        }\n        else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-active')[0])) {\n            attributes(this.targetElement(), { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-active')[0].id });\n        }\n    }\n    dropdownCompiler(dropdownTemplate) {\n        let checkTemplate = false;\n        if (typeof dropdownTemplate !== 'function' && dropdownTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(dropdownTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    setValueTemplate() {\n        let compiledString;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate(['valueTemplate']);\n            if (this.valueTempElement) {\n                detach(this.valueTempElement);\n                this.inputElement.style.display = 'block';\n                this.valueTempElement = null;\n            }\n        }\n        if (!this.valueTempElement) {\n            this.valueTempElement = this.createElement('span', { className: dropDownListClasses.value });\n            this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);\n            this.inputElement.style.display = 'none';\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            this.valueTempElement.innerHTML = '';\n        }\n        const valuecheck = this.dropdownCompiler(this.valueTemplate);\n        if (typeof this.valueTemplate !== 'function' && valuecheck) {\n            compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.valueTemplate);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const valueCompTemp = compiledString(this.itemData, this, 'valueTemplate', this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);\n        if (valueCompTemp && valueCompTemp.length > 0) {\n            append(valueCompTemp, this.valueTempElement);\n        }\n        this.renderReactTemplates();\n    }\n    removeSelection() {\n        if (this.list) {\n            const selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n            if (selectedItems.length) {\n                removeClass(selectedItems, dropDownBaseClasses.selected);\n                selectedItems[0].removeAttribute('aria-selected');\n            }\n        }\n    }\n    getItemData() {\n        const fields = this.fields;\n        let dataItem = null;\n        dataItem = this.itemData;\n        let dataValue;\n        let dataText;\n        if (!isNullOrUndefined(dataItem)) {\n            dataValue = getValue(fields.value, dataItem);\n            dataText = getValue(fields.text, dataItem);\n        }\n        const value = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataValue : dataItem);\n        const text = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataText : dataItem);\n        return { value: value, text: text };\n    }\n    /**\n     * To trigger the change event for list.\n     *\n     * @param {MouseEvent | KeyboardEvent | TouchEvent} eve - Specifies the event arguments.\n     * @returns {void}\n     */\n    onChangeEvent(eve) {\n        const dataItem = this.getItemData();\n        const index = this.isSelectCustom ? null : this.activeIndex;\n        this.setProperties({ 'index': index, 'text': dataItem.text, 'value': dataItem.value }, true);\n        this.detachChangeEvent(eve);\n    }\n    detachChanges(value) {\n        let items;\n        if (typeof value === 'string' ||\n            typeof value === 'boolean' ||\n            typeof value === 'number') {\n            items = Object.defineProperties({}, {\n                value: {\n                    value: value,\n                    enumerable: true\n                },\n                text: {\n                    value: value,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            items = value;\n        }\n        return items;\n    }\n    detachChangeEvent(eve) {\n        this.isSelected = false;\n        this.previousValue = this.value;\n        this.activeIndex = this.index;\n        this.typedString = !isNullOrUndefined(this.text) ? this.text : '';\n        if (!this.initial) {\n            const items = this.detachChanges(this.itemData);\n            let preItems;\n            if (typeof this.previousItemData === 'string' ||\n                typeof this.previousItemData === 'boolean' ||\n                typeof this.previousItemData === 'number') {\n                preItems = Object.defineProperties({}, {\n                    value: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    },\n                    text: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    }\n                });\n            }\n            else {\n                preItems = this.previousItemData;\n            }\n            this.setHiddenValue();\n            const eventArgs = {\n                e: eve,\n                item: this.item,\n                itemData: items,\n                previousItem: this.previousSelectedLI,\n                previousItemData: preItems,\n                isInteracted: eve ? true : false,\n                value: this.value,\n                element: this.element,\n                event: eve\n            };\n            if (this.isAngular && this.preventChange) {\n                this.preventChange = false;\n            }\n            else {\n                this.trigger('change', eventArgs);\n            }\n        }\n        if ((isNullOrUndefined(this.value) || this.value === '') && this.floatLabelType !== 'Always') {\n            removeClass([this.inputWrapper.container], 'e-valid-input');\n        }\n    }\n    setHiddenValue() {\n        if (!isNullOrUndefined(this.value)) {\n            if (this.hiddenElement.querySelector('option')) {\n                const selectedElement = this.hiddenElement.querySelector('option');\n                selectedElement.textContent = this.text;\n                selectedElement.setAttribute('value', this.value.toString());\n            }\n            else {\n                if (!isNullOrUndefined(this.hiddenElement)) {\n                    this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';\n                    const selectedElement = this.hiddenElement.querySelector('option');\n                    selectedElement.setAttribute('value', this.value.toString());\n                }\n            }\n        }\n        else {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /**\n     * Filter bar implementation\n     *\n     * @param {KeyboardEventArgs} e - Specifies the event arguments.\n     * @returns {void}\n     */\n    onFilterUp(e) {\n        if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                case 38: //up arrow\n                case 40: //down arrow\n                    if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else {\n                        this.preventAutoFill = false;\n                    }\n                    this.preventAltUp = false;\n                    if (this.getModuleName() === 'autocomplete' && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n                        attributes(this.targetElement(), { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id });\n                    }\n                    e.preventDefault();\n                    break;\n                case 46: //delete\n                case 8: //backspace\n                    this.typedString = this.filterInput.value;\n                    if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '') {\n                        if (this.list) {\n                            this.resetFocusElement();\n                        }\n                        this.activeIndex = null;\n                        if (this.getModuleName() !== 'dropdownlist') {\n                            this.preventAutoFill = true;\n                            this.searchLists(e);\n                            if (this.getModuleName() === 'autocomplete') {\n                                this.hidePopup();\n                            }\n                        }\n                    }\n                    e.preventDefault();\n                    break;\n                default:\n                    this.typedString = this.filterInput.value;\n                    this.preventAutoFill = false;\n                    this.searchLists(e);\n                    if (this.enableVirtualization) {\n                        this.getFilteringSkeletonCount();\n                    }\n                    break;\n            }\n        }\n        else {\n            this.isValidKey = false;\n        }\n    }\n    getFilteringSkeletonCount() {\n        const difference = this.dataCount - this.viewPortInfo.endIndex;\n        const currentSkeletonCount = this.skeletonCount;\n        this.getSkeletonCount(true);\n        this.skeletonCount = this.dataCount > this.itemCount * 2 ? this.skeletonCount : difference > this.skeletonCount ? this.skeletonCount : difference > 0 ? difference : 0;\n        if (!this.list.classList.contains(dropDownBaseClasses.noData)) {\n            const isSkeletonCountChange = currentSkeletonCount !== this.skeletonCount;\n            if (currentSkeletonCount !== this.skeletonCount) {\n                this.UpdateSkeleton(true, Math.abs(currentSkeletonCount - this.skeletonCount));\n            }\n            else {\n                this.UpdateSkeleton();\n            }\n            this.liCollections = this.list.querySelectorAll('.e-list-item');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.list.getElementsByClassName('e-virtual-ddl')[0].style = this.GetVirtualTrackHeight();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.list.getElementsByClassName('e-virtual-ddl-content')[0].style = this.getTransformValues();\n        }\n    }\n    getSkeletonCount(retainSkeleton) {\n        this.virtualListHeight = this.listHeight != null ? parseInt(this.listHeight, 10) : this.virtualListHeight;\n        const actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;\n        this.skeletonCount = actualCount * 2 < this.itemCount ? this.itemCount : actualCount * 2;\n        this.itemCount = retainSkeleton ? this.itemCount : this.skeletonCount;\n        this.skeletonCount = Math.floor(this.skeletonCount / 2) + 2;\n    }\n    onFilterDown(e) {\n        switch (e.keyCode) {\n            case 13: //enter\n                break;\n            case 40: //down arrow\n            case 38: //up arrow\n                this.queryString = this.filterInput.value;\n                e.preventDefault();\n                break;\n            case 9: //tab\n                if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                this.prevSelectPoints = this.getSelectionPoints();\n                this.queryString = this.filterInput.value;\n                break;\n        }\n    }\n    removeFillSelection() {\n        if (this.isInteracted) {\n            const selection = this.getSelectionPoints();\n            this.inputElement.setSelectionRange(selection.end, selection.end);\n        }\n    }\n    getQuery(query) {\n        let filterQuery;\n        if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {\n            filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n            const filterType = this.typedString === '' ? 'contains' : this.filterType;\n            const dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                const fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        }\n        if (this.enableVirtualization && (this.viewPortInfo.endIndex != 0)) {\n            var takeValue = this.getTakeValue();\n            if (this.allowFiltering) {\n                filterQuery.skip(this.virtualItemStartIndex);\n            }\n            filterQuery.take(takeValue);\n            filterQuery.requiresCount();\n        }\n        return filterQuery;\n    }\n    getSelectionPoints() {\n        const input = this.inputElement;\n        return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.activeIndex = null;\n        this.isListSearched = true;\n        if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {\n            const clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n        this.isDataFetched = false;\n        if (this.isFiltering()) {\n            this.checkAndResetCache();\n            const eventArgs = {\n                preventDefaultAction: false,\n                text: this.filterInput.value,\n                updateData: (dataSource, query, fields) => {\n                    if (eventArgs.cancel) {\n                        return;\n                    }\n                    this.isCustomFilter = true;\n                    this.filteringAction(dataSource, query, fields);\n                },\n                baseEventArgs: e,\n                cancel: false\n            };\n            this.trigger('filtering', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel && !this.isCustomFilter && !eventArgs.preventDefaultAction) {\n                    this.filteringAction(this.dataSource, null, this.fields);\n                }\n            });\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     *\n     * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param {Query} query - Specify the query to filter the data.\n     * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFilter = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        if (!isNullOrUndefined(this.filterInput)) {\n            this.beforePopupOpen = (!this.isPopupOpen && this.getModuleName() === 'combobox' && this.filterInput.value === '') ?\n                false : true;\n            let isNoData = this.list.classList.contains(dropDownBaseClasses.noData);\n            if (this.filterInput.value.trim() === '' && !this.itemTemplate) {\n                this.actionCompleteData.isUpdated = false;\n                this.isTyped = false;\n                if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n                    if (this.enableVirtualization) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;\n                        this.resetList(dataSource, fields, query);\n                        if (isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n                            if (!this.list.querySelector('.e-virtual-ddl-content')) {\n                                this.list.appendChild(this.createElement('div', {\n                                    className: 'e-virtual-ddl-content',\n                                    styles: this.getTransformValues()\n                                })).appendChild(this.list.querySelector('.e-list-parent'));\n                            }\n                            if (!this.list.querySelector('.e-virtual-ddl')) {\n                                var virualElement = this.createElement('div', {\n                                    id: this.element.id + '_popup', className: 'e-virtual-ddl', styles: this.GetVirtualTrackHeight()\n                                });\n                                document.getElementsByClassName('e-popup')[0].querySelector('.e-dropdownbase').appendChild(virualElement);\n                            }\n                        }\n                    }\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);\n                }\n                this.isTyped = true;\n                if (!isNullOrUndefined(this.itemData) && this.getModuleName() === 'dropdownlist') {\n                    this.focusIndexItem();\n                    this.setScrollPosition();\n                }\n                this.isNotSearchList = true;\n            }\n            else {\n                this.isNotSearchList = false;\n                query = (this.filterInput.value.trim() === '') ? null : query;\n                if (this.enableVirtualization && this.isFiltering() && this.isTyped) {\n                    this.isPreventScrollAction = true;\n                    this.list.scrollTop = 0;\n                    this.previousStartIndex = 0;\n                    this.virtualListInfo = null;\n                }\n                this.resetList(dataSource, fields, query);\n                if (this.enableVirtualization && isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n                    if (!this.list.querySelector('.e-virtual-ddl-content')) {\n                        this.list.appendChild(this.createElement('div', {\n                            className: 'e-virtual-ddl-content',\n                            styles: this.getTransformValues()\n                        })).appendChild(this.list.querySelector('.e-list-parent'));\n                    }\n                    if (!this.list.querySelector('.e-virtual-ddl')) {\n                        var virualElement = this.createElement('div', {\n                            id: this.element.id + '_popup', className: 'e-virtual-ddl', styles: this.GetVirtualTrackHeight()\n                        });\n                        document.getElementsByClassName('e-popup')[0].querySelector('.e-dropdownbase').appendChild(virualElement);\n                    }\n                }\n            }\n            if (this.enableVirtualization) {\n                this.getFilteringSkeletonCount();\n            }\n            this.renderReactTemplates();\n        }\n    }\n    setSearchBox(popupElement) {\n        if (this.isFiltering()) {\n            const parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ?\n                popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {\n                className: dropDownListClasses.filterParent\n            });\n            this.filterInput = this.createElement('input', {\n                attrs: { type: 'text' },\n                className: dropDownListClasses.filterInput\n            });\n            this.element.parentNode.insertBefore(this.filterInput, this.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ?\n                    [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],\n                properties: { placeholder: this.filterBarPlaceholder }\n            }, this.createElement);\n            if (!isNullOrUndefined(this.cssClass)) {\n                if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], parentElement);\n            prepend([parentElement], popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'role': 'combobox',\n                'autocomplete': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            if (!Browser.isDevice) {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.keyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            else {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.mobileKeyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            EventHandler.add(this.filterInput, 'input', this.onInput, this);\n            EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.filterInput, 'blur', this.onBlurHandler, this);\n            EventHandler.add(this.filterInput, 'paste', this.pasteHandler, this);\n            return this.filterInputObj;\n        }\n        else {\n            return inputObject;\n        }\n    }\n    onInput(e) {\n        this.isValidKey = true;\n        if (this.getModuleName() === 'combobox') {\n            this.updateIconState();\n        }\n        // For filtering works in mobile firefox.\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.typedString = this.filterInput.value;\n            this.preventAutoFill = true;\n            this.searchLists(e);\n        }\n    }\n    pasteHandler(e) {\n        setTimeout(() => {\n            this.typedString = this.filterInput.value;\n            this.searchLists(e);\n        });\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        if (this.beforePopupOpen) {\n            this.renderPopup();\n        }\n    }\n    UpdateSkeleton(isSkeletonCountChange, skeletonCount) {\n        let isContainSkeleton = this.list.querySelector('.e-virtual-ddl-content');\n        let isContainVirtualList = this.list.querySelector('.e-virtual-list');\n        if (isContainSkeleton && (!isContainVirtualList || isSkeletonCountChange) && this.enableVirtualization) {\n            const totalSkeletonCount = isSkeletonCountChange ? skeletonCount : this.skeletonCount;\n            for (let i = 0; i < totalSkeletonCount; i++) {\n                const liElement = this.createElement('li', { className: dropDownListClasses.virtualList, styles: 'overflow: inherit' });\n                if (this.enableVirtualization && this.itemTemplate) {\n                    liElement.style.height = this.listItemHeight + 'px';\n                }\n                let skeleton = new Skeleton({\n                    shape: \"Text\",\n                    height: \"10px\",\n                    width: \"95%\",\n                    cssClass: \"e-skeleton-text\",\n                });\n                skeleton.appendTo(this.createElement('div'));\n                liElement.appendChild(skeleton.element);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                isContainSkeleton.firstChild.insertBefore(liElement, isContainSkeleton.firstChild.children[0]);\n            }\n        }\n    }\n    getTakeValue() {\n        return this.allowFiltering && this.getModuleName() === 'dropdownlist' && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onActionComplete(ulElement, list, e, isUpdated) {\n        if (this.dataSource instanceof DataManager && !isNullOrUndefined(e)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.totalItemCount = e.count;\n        }\n        if (this.isNotSearchList && !this.enableVirtualization) {\n            this.isNotSearchList = false;\n            return;\n        }\n        let tempItemCount = this.itemCount;\n        if (this.isActive || !isNullOrUndefined(ulElement)) {\n            const selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;\n            super.onActionComplete(ulElement, list, e);\n            this.skeletonCount = this.totalItemCount != 0 && this.totalItemCount < (this.itemCount * 2) ? 0 : this.skeletonCount;\n            this.updateSelectElementData(this.allowFiltering);\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {\n                this.isRequested = false;\n                this.keyActionHandler(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {\n                this.incrementalSearch(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            if (!this.enableVirtualization) {\n                this.list.scrollTop = 0;\n            }\n            if (!isNullOrUndefined(ulElement)) {\n                attributes(ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n            }\n            if (this.initRemoteRender) {\n                this.initial = true;\n                this.activeIndex = this.index;\n                this.initRemoteRender = false;\n                if (this.value && this.dataSource instanceof DataManager) {\n                    const checkField = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n                    const fieldValue = this.fields.value.split('.');\n                    const checkVal = list.some((x) => isNullOrUndefined(x[checkField]) && fieldValue.length > 1 ?\n                        this.checkFieldValue(x, fieldValue) === this.value : x[checkField] === this.value);\n                    if (!checkVal) {\n                        this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField, 'equal', this.value)))\n                            .then((e) => {\n                            if (e.result.length > 0) {\n                                this.addItem(e.result, list.length);\n                                this.updateValues();\n                            }\n                            else {\n                                this.updateValues();\n                            }\n                        });\n                    }\n                    else {\n                        this.updateValues();\n                    }\n                }\n                else {\n                    this.updateValues();\n                }\n                this.initial = false;\n            }\n            else if (this.getModuleName() === 'autocomplete' && this.value) {\n                this.setInputValue();\n            }\n            if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {\n                if (!this.actionCompleteData.isUpdated || ((!this.isCustomFilter\n                    && !this.isFilterFocus) || (isNullOrUndefined(this.itemData) && this.allowFiltering)\n                    && ((this.dataSource instanceof DataManager)\n                        || (!isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) &&\n                            this.dataSource.length !== 0)))) {\n                    if (this.itemTemplate && this.element.tagName === 'EJS-COMBOBOX' && this.allowFiltering) {\n                        setTimeout(() => {\n                            this.updateActionCompleteDataValues(ulElement, list);\n                        }, 0);\n                    }\n                    else {\n                        this.updateActionCompleteDataValues(ulElement, list);\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if ((this.allowCustom || (this.allowFiltering && !this.isValueInList(list, this.value) && this.dataSource instanceof DataManager)) && !this.enableVirtualization) {\n                    this.addNewItem(list, selectedItem);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                else if ((this.allowCustom || (this.allowFiltering && this.isValueInList(list, this.value))) && !this.enableVirtualization) {\n                    this.addNewItem(list, selectedItem);\n                }\n                if (!isNullOrUndefined(this.itemData) || (isNullOrUndefined(this.itemData) && this.enableVirtualization)) {\n                    this.focusIndexItem();\n                }\n                if (this.enableVirtualization) {\n                    this.updateActionCompleteDataValues(ulElement, list);\n                }\n            }\n            else if (this.enableVirtualization && this.getModuleName() !== 'autocomplete' && !this.isFiltering()) {\n                const value = this.getItemData().value;\n                this.activeIndex = this.getIndexByValue(value);\n                const element = this.findListElement(this.list, 'li', 'data-value', value);\n                this.selectedLI = element;\n            }\n            else if (this.enableVirtualization && this.getModuleName() === 'autocomplete') {\n                this.activeIndex = this.skeletonCount;\n            }\n            if (this.beforePopupOpen) {\n                this.renderPopup(e);\n                if (this.enableVirtualization) {\n                    if (!this.list.querySelector('.e-virtual-list')) {\n                        this.UpdateSkeleton();\n                        this.liCollections = this.list.querySelectorAll('.e-list-item');\n                    }\n                }\n                if (this.enableVirtualization && tempItemCount != this.itemCount) {\n                    this.resetList(this.dataSource, this.fields);\n                }\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isValueInList(list, valueToFind) {\n        if (Array.isArray(list)) {\n            for (let i = 0; i < list.length; i++) {\n                if (list[i] === valueToFind) {\n                    return true;\n                }\n            }\n        }\n        else if (typeof list === 'object' && list !== null) {\n            for (const key in list) {\n                if (Object.prototype.hasOwnProperty.call(list, key) && list[key] === valueToFind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    checkFieldValue(list, fieldValue) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let checkField = list;\n        fieldValue.forEach((value) => {\n            checkField = checkField[value];\n        });\n        return checkField;\n    }\n    updateActionCompleteDataValues(ulElement, list) {\n        this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list: list, isUpdated: true };\n        if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {\n            this.actionData = this.actionCompleteData;\n        }\n    }\n    addNewItem(listData, newElement) {\n        if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {\n            const value = this.getItemData().value;\n            const isExist = listData.some((data) => {\n                return (((typeof data === 'string' || typeof data === 'number') && data === value) ||\n                    (getValue(this.fields.value, data) === value));\n            });\n            if (!isExist) {\n                this.addItem(this.itemData);\n            }\n        }\n    }\n    updateActionCompleteData(li, item, index) {\n        if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {\n            if (this.itemTemplate && this.element.tagName === 'EJS-COMBOBOX' && this.allowFiltering) {\n                setTimeout(() => {\n                    this.actionCompleteDataUpdate(li, item, index);\n                }, 0);\n            }\n            else {\n                this.actionCompleteDataUpdate(li, item, index);\n            }\n        }\n    }\n    actionCompleteDataUpdate(li, item, index) {\n        if (index !== null) {\n            this.actionCompleteData.ulElement.\n                insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);\n        }\n        else {\n            this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));\n        }\n        if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {\n            this.actionCompleteData.list.push(item);\n        }\n    }\n    focusIndexItem() {\n        const value = this.getItemData().value;\n        this.activeIndex = this.getIndexByValue(value);\n        const element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.selectedLI = element;\n        this.activeItem(element);\n        if (!(this.enableVirtualization && isNullOrUndefined(element))) {\n            this.removeFocus();\n        }\n    }\n    updateSelection() {\n        const selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        if (selectedItem) {\n            this.setProperties({ 'index': this.getIndexByValue(selectedItem.getAttribute('data-value')) });\n            this.activeIndex = this.index;\n        }\n        else {\n            this.removeFocus();\n            this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);\n        }\n    }\n    updateSelectionList() {\n        let selectedItem = this.list && this.list.querySelector('.' + 'e-active');\n        if (!selectedItem && !isNullOrUndefined(this.value)) {\n            var findEle = this.findListElement(this.list, 'li', 'data-value', this.value);\n            if (findEle) {\n                findEle.classList.add('e-active');\n            }\n        }\n    }\n    checkAndResetCache() {\n        if (this.enableVirtualization) {\n            this.generatedDataObject = {};\n            this.virtualItemStartIndex = this.virtualItemEndIndex = 0;\n            this.viewPortInfo = { currentPageNumber: null,\n                direction: null,\n                sentinelInfo: {},\n                offsets: {},\n                startIndex: 0,\n                endIndex: this.itemCount, };\n            this.selectedValueInfo = null;\n        }\n    }\n    removeFocus() {\n        const highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);\n        if (highlightedItem && highlightedItem.length) {\n            removeClass(highlightedItem, dropDownListClasses.focus);\n        }\n    }\n    getTransformValues() {\n        let translateY = this.viewPortInfo.startIndex * this.listItemHeight;\n        translateY = translateY - (this.skeletonCount * this.listItemHeight);\n        translateY = this.viewPortInfo.startIndex === 0 && this.listData && this.listData.length === 0 ? 0 : translateY;\n        const styleText = `transform: translate(0px, ${translateY}px);`;\n        return styleText;\n    }\n    GetVirtualTrackHeight() {\n        const height = this.totalItemCount === this.viewPortInfo.endIndex ? this.totalItemCount * this.listItemHeight - this.itemCount * this.listItemHeight : this.totalItemCount * this.listItemHeight;\n        const heightDimension = `height: ${height - this.itemCount * this.listItemHeight}px;`;\n        return heightDimension;\n    }\n    renderPopup(e) {\n        if (this.popupObj && document.body.contains(this.popupObj.element)) {\n            this.refreshPopup();\n            return;\n        }\n        const args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                const popupEle = this.createElement('div', {\n                    id: this.element.id + '_popup', className: 'e-ddl e-popup ' + (this.cssClass !== null ? this.cssClass : '')\n                });\n                const searchBox = this.setSearchBox(popupEle);\n                this.listHeight = formatUnit(this.popupHeight);\n                if (this.headerTemplate) {\n                    this.setHeaderTemplate(popupEle);\n                }\n                append([this.list], popupEle);\n                if (this.footerTemplate) {\n                    this.setFooterTemplate(popupEle);\n                }\n                document.body.appendChild(popupEle);\n                if (this.enableVirtualization && this.itemTemplate) {\n                    var listitems = popupEle.querySelectorAll('li.e-list-item:not(.e-virtual-list)');\n                    this.listItemHeight = listitems.length > 0 ? Math.ceil(listitems[0].getBoundingClientRect().height) : 0;\n                }\n                if (this.enableVirtualization && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n                    if (!this.list.querySelector('.e-virtual-ddl-content')) {\n                        this.list.appendChild(this.createElement('div', {\n                            className: 'e-virtual-ddl-content',\n                            styles: this.getTransformValues()\n                        })).appendChild(this.list.querySelector('.e-list-parent'));\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.list.getElementsByClassName('e-virtual-ddl-content')[0].style = this.getTransformValues();\n                    }\n                    this.UpdateSkeleton();\n                    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                    this.virtualItemCount = this.itemCount;\n                    if (!this.list.querySelector('.e-virtual-ddl')) {\n                        var virualElement = this.createElement('div', {\n                            id: this.element.id + '_popup', className: 'e-virtual-ddl', styles: this.GetVirtualTrackHeight()\n                        });\n                        popupEle.querySelector('.e-dropdownbase').appendChild(virualElement);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.list.getElementsByClassName('e-virtual-ddl')[0].style = this.GetVirtualTrackHeight();\n                    }\n                }\n                popupEle.style.visibility = 'hidden';\n                if (this.popupHeight !== 'auto') {\n                    this.searchBoxHeight = 0;\n                    if (!isNullOrUndefined(searchBox.container) && this.getModuleName() !== 'combobox' && this.getModuleName() !== 'autocomplete') {\n                        this.searchBoxHeight = (searchBox.container.parentElement).getBoundingClientRect().height;\n                        this.listHeight = (parseInt(this.listHeight, 10) - (this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.headerTemplate) {\n                        this.header = this.header ? this.header : popupEle.querySelector('.e-ddl-header');\n                        const height = Math.round(this.header.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.footerTemplate) {\n                        this.footer = this.footer ? this.footer : popupEle.querySelector('.e-ddl-footer');\n                        const height = Math.round(this.footer.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n                    popupEle.style.maxHeight = formatUnit(this.popupHeight);\n                }\n                else {\n                    popupEle.style.height = 'auto';\n                }\n                let offsetValue = 0;\n                let left;\n                this.isPreventScrollAction = true;\n                if (!isNullOrUndefined(this.selectedLI) && (!isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0)) {\n                    this.setScrollPosition();\n                }\n                else if (this.enableVirtualization) {\n                    this.setScrollPosition();\n                }\n                else {\n                    this.list.scrollTop = 0;\n                }\n                if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n                    (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n                    offsetValue = this.getOffsetValue(popupEle);\n                    const firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n                    if (!isNullOrUndefined(this.inputElement)) {\n                        left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                            parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                            parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10));\n                    }\n                }\n                this.getFocusElement();\n                this.createPopup(popupEle, offsetValue, left);\n                this.popupContentElement = this.popupObj.element.querySelector('.e-content');\n                this.checkCollision(popupEle);\n                if (Browser.isDevice) {\n                    this.popupObj.element.classList.add(dropDownListClasses.device);\n                    if (this.getModuleName() === 'dropdownlist' || (this.getModuleName() === 'combobox'\n                        && !this.allowFiltering && this.isDropDownClick)) {\n                        this.popupObj.collision = { X: 'fit', Y: 'fit' };\n                    }\n                    if (this.isFilterLayout()) {\n                        this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);\n                        this.popupObj.position = { X: 0, Y: 0 };\n                        this.popupObj.dataBind();\n                        attributes(this.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n                        addClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n                        this.setSearchBoxPosition();\n                        this.backIconElement = searchBox.container.querySelector('.e-back-icon');\n                        this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);\n                        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n                        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                    }\n                }\n                popupEle.style.visibility = 'visible';\n                addClass([popupEle], 'e-popup-close');\n                const scrollParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n                for (const element of scrollParentElements) {\n                    EventHandler.add(element, 'scroll', this.scrollHandler, this);\n                }\n                if (!isNullOrUndefined(this.list)) {\n                    this.unWireListEvents();\n                    this.wireListEvents();\n                }\n                this.selectedElementID = this.selectedLI ? this.selectedLI.id : null;\n                if (this.enableVirtualization) {\n                    this.notify(\"bindScrollEvent\", {\n                        module: \"VirtualScroll\",\n                        component: this.getModuleName(),\n                        enable: this.enableVirtualization,\n                    });\n                    setTimeout(() => {\n                        if (this.value) {\n                            this.updateSelectionList();\n                            if (this.selectedValueInfo && this.viewPortInfo && this.viewPortInfo.offsets.top) {\n                                this.list.scrollTop = this.viewPortInfo.offsets.top;\n                            }\n                            else {\n                                this.scrollBottom(true, true);\n                            }\n                        }\n                    }, 5);\n                }\n                attributes(this.targetElement(), { 'aria-expanded': 'true', 'aria-owns': this.element.id + '_options' });\n                this.inputElement.setAttribute('aria-expanded', 'true');\n                const inputParent = this.isFiltering() ? this.filterInput.parentElement : this.inputWrapper.container;\n                addClass([inputParent], [dropDownListClasses.inputFocus]);\n                const animModel = { name: 'FadeIn', duration: 100 };\n                this.beforePopupOpen = true;\n                const popupInstance = this.popupObj;\n                const eventArgs = { popup: popupInstance, event: e, cancel: false, animation: animModel };\n                this.trigger('open', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        if (!isNullOrUndefined(this.inputWrapper)) {\n                            addClass([this.inputWrapper.container], [dropDownListClasses.iconAnimation]);\n                        }\n                        this.renderReactTemplates();\n                        if (!isNullOrUndefined(this.popupObj)) {\n                            this.popupObj.show(new Animation(eventArgs.animation), (this.zIndex === 1000) ? this.element : null);\n                        }\n                    }\n                    else {\n                        this.beforePopupOpen = false;\n                        this.destroyPopup();\n                    }\n                });\n            }\n            else {\n                this.beforePopupOpen = false;\n            }\n        });\n    }\n    checkCollision(popupEle) {\n        if (!Browser.isDevice || (Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick))) {\n            const collision = isCollide(popupEle);\n            if (collision.length > 0) {\n                popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n            }\n            this.popupObj.resolveCollision();\n        }\n    }\n    getOffsetValue(popupEle) {\n        const popupStyles = getComputedStyle(popupEle);\n        const borderTop = parseInt(popupStyles.borderTopWidth, 10);\n        const borderBottom = parseInt(popupStyles.borderBottomWidth, 10);\n        return this.setPopupPosition(borderTop + borderBottom);\n    }\n    createPopup(element, offsetValue, left) {\n        this.popupObj = new Popup(element, {\n            width: this.setWidth(), targetType: 'relative',\n            relateTo: this.inputWrapper.container,\n            collision: this.enableRtl ? { X: 'fit', Y: 'flip' } : { X: 'flip', Y: 'flip' }, offsetY: offsetValue,\n            enableRtl: this.enableRtl, offsetX: left,\n            position: this.enableRtl ? { X: 'right', Y: 'bottom' } : { X: 'left', Y: 'bottom' },\n            zIndex: this.zIndex,\n            close: () => {\n                if (!this.isDocumentClick) {\n                    this.focusDropDown();\n                }\n                // eslint-disable-next-line\n                if (this.isReact) {\n                    this.clearTemplate(['headerTemplate', 'footerTemplate']);\n                }\n                this.isNotSearchList = false;\n                this.isDocumentClick = false;\n                this.destroyPopup();\n                if (this.isFiltering() && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n                    this.isActive = true;\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n                }\n            },\n            open: () => {\n                EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                this.isPopupOpen = true;\n                const actionList = this.actionCompleteData && this.actionCompleteData.ulElement &&\n                    this.actionCompleteData.ulElement.querySelector('li');\n                const ulElement = this.list.querySelector('ul li');\n                if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n                    attributes(this.targetElement(), { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id });\n                }\n                else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-active')[0])) {\n                    attributes(this.targetElement(), { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-active')[0].id });\n                }\n                if (this.isFiltering() && this.itemTemplate && (this.element.tagName === this.getNgDirective()) &&\n                    (actionList && ulElement && actionList.textContent !== ulElement.textContent) &&\n                    this.element.tagName !== 'EJS-COMBOBOX') {\n                    this.cloneElements();\n                }\n                if (this.isFilterLayout()) {\n                    removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n                    this.isFilterFocus = true;\n                    this.filterInput.focus();\n                    if (this.inputWrapper.clearButton) {\n                        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n                    }\n                }\n                this.activeStateChange();\n            },\n            targetExitViewport: () => {\n                if (!Browser.isDevice) {\n                    this.hidePopup();\n                }\n            }\n        });\n    }\n    isEmptyList() {\n        return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;\n    }\n    getFocusElement() {\n        // combo-box used this method\n    }\n    isFilterLayout() {\n        return this.getModuleName() === 'dropdownlist' && this.allowFiltering;\n    }\n    scrollHandler() {\n        if (Browser.isDevice && ((this.getModuleName() === 'dropdownlist' &&\n            !this.isFilterLayout()) || (this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick))) {\n            this.hidePopup();\n        }\n    }\n    setSearchBoxPosition() {\n        const searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        this.popupObj.element.style.maxHeight = '100%';\n        this.popupObj.element.style.width = '100%';\n        this.list.style.maxHeight = (window.innerHeight - searchBoxHeight) + 'px';\n        this.list.style.height = (window.innerHeight - searchBoxHeight) + 'px';\n        const clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupPosition(border) {\n        let offsetValue;\n        const popupOffset = border;\n        const selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;\n        const firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n        const lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];\n        const liHeight = firstItem.getBoundingClientRect().height;\n        this.listItemHeight = liHeight;\n        const listHeight = this.list.offsetHeight / 2;\n        const height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;\n        const lastItemOffsetValue = lastItem.offsetTop;\n        if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) &&\n            this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {\n            const count = this.list.offsetHeight / liHeight;\n            const paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);\n            offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;\n            this.list.scrollTop = selectedLI.offsetTop;\n        }\n        else if (height > listHeight && !this.enableVirtualization) {\n            offsetValue = listHeight - liHeight / 2;\n            this.list.scrollTop = height - listHeight + liHeight / 2;\n        }\n        else {\n            offsetValue = height;\n        }\n        const inputHeight = this.inputWrapper.container.offsetHeight;\n        offsetValue = offsetValue + liHeight + popupOffset - ((liHeight - inputHeight) / 2);\n        return -offsetValue;\n    }\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            const inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n            (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n            const firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n            width = (parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2) + 'px';\n        }\n        return width;\n    }\n    scrollBottom(isInitial, isInitialSelection = false, keyAction = null) {\n        if (isNullOrUndefined(this.selectedLI) && this.enableVirtualization) {\n            this.selectedLI = this.list.querySelector('.' + dropDownBaseClasses.li);\n            if (!isNullOrUndefined(this.selectedLI) && this.selectedLI.classList.contains('e-virtual-list')) {\n                this.selectedLI = this.liCollections[this.skeletonCount];\n            }\n        }\n        if (!isNullOrUndefined(this.selectedLI)) {\n            this.isUpwardScrolling = false;\n            let virtualListCount = this.list.querySelectorAll('.e-virtual-list').length;\n            let lastElementValue = this.list.querySelector('li:last-of-type') ? this.list.querySelector('li:last-of-type').getAttribute('data-value') : null;\n            let selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + (this.virtualListInfo.startIndex * this.selectedLI.offsetHeight) : this.selectedLI.offsetTop;\n            const currentOffset = this.list.offsetHeight;\n            let nextBottom = selectedLiOffsetTop - (virtualListCount * this.selectedLI.offsetHeight) + this.selectedLI.offsetHeight - this.list.scrollTop;\n            let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n            let isScrollerCHanged = false;\n            let isScrollTopChanged = false;\n            nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);\n            let boxRange = selectedLiOffsetTop - (virtualListCount * this.selectedLI.offsetHeight) + this.selectedLI.offsetHeight - this.list.scrollTop;\n            boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n            if (this.activeIndex === 0 && !this.enableVirtualization) {\n                this.list.scrollTop = 0;\n                isScrollerCHanged = this.isKeyBoardAction;\n            }\n            else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                let currentElementValue = this.selectedLI ? this.selectedLI.getAttribute('data-value') : null;\n                var liCount = keyAction == \"pageDown\" ? this.getPageCount() - 2 : 1;\n                if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {\n                    if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyAction != \"end\" && !this.isVirtualScrolling) {\n                        this.isPreventKeyAction = true;\n                        if (this.enableVirtualization && this.itemTemplate) {\n                            this.list.scrollTop += nextOffset;\n                        }\n                        else {\n                            this.list.scrollTop += this.selectedLI.offsetHeight * liCount;\n                        }\n                        this.isPreventKeyAction = this.IsScrollerAtEnd() ? false : this.isPreventKeyAction;\n                        this.isKeyBoardAction = false;\n                        this.isPreventScrollAction = false;\n                    }\n                    else if (this.enableVirtualization && keyAction == \"end\") {\n                        this.isPreventKeyAction = false;\n                        this.isKeyBoardAction = false;\n                        this.isPreventScrollAction = false;\n                        this.list.scrollTop = this.list.scrollHeight;\n                    }\n                    else {\n                        if (keyAction == \"pageDown\" && this.enableVirtualization && !this.isVirtualScrolling) {\n                            this.isPreventKeyAction = false;\n                            this.isKeyBoardAction = false;\n                            this.isPreventScrollAction = false;\n                            nextOffset = nextOffset + (this.selectedLI.offsetHeight * liCount);\n                        }\n                        this.list.scrollTop = nextOffset;\n                    }\n                }\n                else {\n                    this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight : 0;\n                }\n                isScrollerCHanged = this.isKeyBoardAction;\n                isScrollTopChanged = true;\n            }\n            this.isKeyBoardAction = isScrollerCHanged;\n        }\n    }\n    scrollTop(keyAction = null) {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let virtualListCount = this.list.querySelectorAll('.e-virtual-list').length;\n            let selectedLiOffsetTop = (this.virtualListInfo && this.virtualListInfo.startIndex) ? this.selectedLI.offsetTop + (this.virtualListInfo.startIndex * this.selectedLI.offsetHeight) : this.selectedLI.offsetTop;\n            let nextOffset = selectedLiOffsetTop - (virtualListCount * this.selectedLI.offsetHeight) - this.list.scrollTop;\n            let firstElementValue = this.list.querySelector('li.e-list-item:not(.e-virtual-list)') ? this.list.querySelector('li.e-list-item:not(.e-virtual-list)').getAttribute('data-value') : null;\n            nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n            let boxRange = (selectedLiOffsetTop - (virtualListCount * this.selectedLI.offsetHeight) + this.selectedLI.offsetHeight - this.list.scrollTop);\n            let isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === 'autocomplete' && nextOffset <= 0;\n            if (this.activeIndex === 0 && !this.enableVirtualization) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextOffset < 0 || isPageUpKeyAction) {\n                var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute('data-value') : null;\n                var liCount = keyAction == \"pageUp\" ? this.getPageCount() - 2 : 1;\n                if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyAction != \"home\" && !this.isVirtualScrolling) {\n                    this.isUpwardScrolling = true;\n                    this.isPreventKeyAction = true;\n                    this.list.scrollTop -= this.selectedLI.offsetHeight * liCount;\n                    this.isPreventKeyAction = this.list.scrollTop != 0 ? this.isPreventKeyAction : false;\n                    this.isKeyBoardAction = false;\n                    this.isPreventScrollAction = false;\n                }\n                else if (this.enableVirtualization && keyAction == \"home\") {\n                    this.isPreventScrollAction = false;\n                    this.isPreventKeyAction = true;\n                    this.isKeyBoardAction = false;\n                    this.list.scrollTo(0, 0);\n                }\n                else {\n                    if (keyAction == \"pageUp\" && this.enableVirtualization && !this.isVirtualScrolling) {\n                        this.isPreventKeyAction = false;\n                        this.isKeyBoardAction = false;\n                        this.isPreventScrollAction = false;\n                        nextOffset = nextOffset - (this.selectedLI.offsetHeight * liCount);\n                    }\n                    this.list.scrollTop = this.list.scrollTop + nextOffset;\n                }\n            }\n            else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                    this.fixedHeaderElement.offsetHeight : 0);\n            }\n        }\n    }\n    isEditTextBox() {\n        return false;\n    }\n    isFiltering() {\n        return this.allowFiltering;\n    }\n    isPopupButton() {\n        return true;\n    }\n    setScrollPosition(e) {\n        this.isPreventScrollAction = true;\n        if (!isNullOrUndefined(e)) {\n            switch (e.action) {\n                case 'pageDown':\n                case 'down':\n                case 'end':\n                    this.isKeyBoardAction = true;\n                    this.scrollBottom(false, false, e.action);\n                    break;\n                default:\n                    this.isKeyBoardAction = e.action == 'up' || e.action == 'pageUp' || e.action == 'open';\n                    this.scrollTop(e.action);\n                    break;\n            }\n        }\n        else {\n            this.scrollBottom(true);\n        }\n        this.isKeyBoardAction = false;\n    }\n    clearText() {\n        this.filterInput.value = this.typedString = '';\n        this.searchLists(null);\n        if (this.enableVirtualization) {\n            this.list.scrollTop = 0;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.list.getElementsByClassName('e-virtual-ddl')[0]) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.list.getElementsByClassName('e-virtual-ddl')[0].style = this.GetVirtualTrackHeight();\n            }\n            this.getSkeletonCount();\n            this.UpdateSkeleton();\n            this.liCollections = this.list.querySelectorAll('.e-list-item');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.list.getElementsByClassName('e-virtual-ddl-content')[0]) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.list.getElementsByClassName('e-virtual-ddl-content')[0].style = this.getTransformValues();\n            }\n        }\n    }\n    setEleWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputWrapper.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.inputWrapper.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    closePopup(delay, e) {\n        let isFilterValue = !isNullOrUndefined(this.filterInput) && !isNullOrUndefined(this.filterInput.value) && this.filterInput.value !== '';\n        const typedString = this.getModuleName() === 'combobox' ? this.typedString : null;\n        this.isTyped = false;\n        if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n            return;\n        }\n        this.keyboardEvent = null;\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.isActive = false;\n        this.filterInputObj = null;\n        this.isDropDownClick = false;\n        this.preventAutoFill = false;\n        const scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n        for (const element of scrollableParentElements) {\n            EventHandler.remove(element, 'scroll', this.scrollHandler);\n        }\n        if (Browser.isDevice && this.isFilterLayout()) {\n            removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n        }\n        if (this.isFilterLayout()) {\n            if (!Browser.isDevice) {\n                this.searchKeyModule.destroy();\n                if (this.clearIconElement) {\n                    EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n                }\n            }\n            if (this.backIconElement) {\n                EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);\n                EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n            }\n            if (!isNullOrUndefined(this.filterInput)) {\n                EventHandler.remove(this.filterInput, 'input', this.onInput);\n                EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);\n                EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);\n                EventHandler.remove(this.filterInput, 'blur', this.onBlurHandler);\n                EventHandler.remove(this.filterInput, 'paste', this.pasteHandler);\n            }\n            this.filterInput = null;\n        }\n        attributes(this.targetElement(), { 'aria-expanded': 'false' });\n        this.inputElement.setAttribute('aria-expanded', 'false');\n        this.targetElement().removeAttribute('aria-owns');\n        this.targetElement().removeAttribute('aria-activedescendant');\n        this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);\n        if (this.isFiltering()) {\n            this.actionCompleteData.isUpdated = false;\n        }\n        if (this.enableVirtualization) {\n            if ((this.value == null || this.isTyped)) {\n                this.viewPortInfo.endIndex = this.viewPortInfo && this.viewPortInfo.endIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;\n                if (this.getModuleName() === 'autocomplete' || (this.getModuleName() === 'dropdownlist' && !isNullOrUndefined(this.typedString) && this.typedString != \"\") || (this.getModuleName() === 'combobox' && this.allowFiltering && !isNullOrUndefined(this.typedString) && this.typedString != \"\")) {\n                    this.checkAndResetCache();\n                }\n            }\n            else if (this.getModuleName() === 'autocomplete') {\n                this.checkAndResetCache();\n            }\n            if ((this.getModuleName() === 'dropdownlist' || this.getModuleName() === 'combobox') && !(this.skeletonCount == 0)) {\n                this.getSkeletonCount(true);\n            }\n        }\n        this.beforePopupOpen = false;\n        const animModel = {\n            name: 'FadeOut',\n            duration: 100,\n            delay: delay ? delay : 0\n        };\n        const popupInstance = this.popupObj;\n        const eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };\n        this.trigger('close', eventArgs, (eventArgs) => {\n            if (!isNullOrUndefined(this.popupObj) &&\n                !isNullOrUndefined(this.popupObj.element.querySelector('.e-fixed-head'))) {\n                const fixedHeader = this.popupObj.element.querySelector('.e-fixed-head');\n                fixedHeader.parentNode.removeChild(fixedHeader);\n                this.fixedHeaderElement = null;\n            }\n            if (!eventArgs.cancel) {\n                if (this.getModuleName() === 'autocomplete') {\n                    this.rippleFun();\n                }\n                if (this.isPopupOpen) {\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                }\n                else {\n                    this.destroyPopup();\n                }\n            }\n        });\n        if (this.isReact && this.isFiltering() && this.itemTemplate != null) {\n            this.actionCompleteData.ulElement = this.ulElement.cloneNode(true);\n        }\n        const dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;\n        if (this.enableVirtualization && this.isFiltering() && this.value != null && isFilterValue && this.totalItemCount !== dataSourceCount) {\n            this.updateInitialData();\n            this.checkAndResetCache();\n        }\n    }\n    updateInitialData() {\n        let currentData = this.selectData;\n        let ulElement = this.renderItems(currentData, this.fields);\n        this.list.scrollTop = 0;\n        this.virtualListInfo = {\n            currentPageNumber: null,\n            direction: null,\n            sentinelInfo: {},\n            offsets: {},\n            startIndex: 0,\n            endIndex: 0,\n        };\n        if (this.getModuleName() === 'combobox') {\n            this.typedString = \"\";\n        }\n        this.previousStartIndex = 0;\n        this.previousEndIndex = 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.list.getElementsByClassName('e-virtual-ddl')[0]) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.list.getElementsByClassName('e-virtual-ddl')[0].style = this.GetVirtualTrackHeight();\n        }\n        if (this.getModuleName() !== 'autocomplete' && this.totalItemCount != 0 && this.totalItemCount > (this.itemCount * 2)) {\n            this.getSkeletonCount();\n        }\n        this.UpdateSkeleton();\n        this.listData = currentData;\n        this.updateActionCompleteDataValues(ulElement, currentData);\n        this.liCollections = this.list.querySelectorAll('.e-list-item');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.list.getElementsByClassName('e-virtual-ddl-content')[0]) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.list.getElementsByClassName('e-virtual-ddl-content')[0].style = this.getTransformValues();\n        }\n    }\n    destroyPopup() {\n        this.isPopupOpen = false;\n        this.isFilterFocus = false;\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            detach(this.popupObj.element);\n        }\n    }\n    clickOnBackIcon() {\n        this.hidePopup();\n        this.focusIn();\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        this.preselectedIndex = !isNullOrUndefined(this.index) ? this.index : null;\n        if (this.element.tagName === 'INPUT') {\n            this.inputElement = this.element;\n            if (isNullOrUndefined(this.inputElement.getAttribute('role'))) {\n                this.inputElement.setAttribute('role', 'combobox');\n            }\n            if (isNullOrUndefined(this.inputElement.getAttribute('type'))) {\n                this.inputElement.setAttribute('type', 'text');\n            }\n            this.inputElement.setAttribute('aria-expanded', 'false');\n        }\n        else {\n            this.inputElement = this.createElement('input', { attrs: { role: 'combobox', type: 'text' } });\n            if (this.element.tagName !== this.getNgDirective()) {\n                this.element.style.display = 'none';\n            }\n            this.element.parentElement.insertBefore(this.inputElement, this.element);\n            this.preventTabIndex(this.inputElement);\n        }\n        let updatedCssClassValues = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(closest(this.element, 'fieldset')) && closest(this.element, 'fieldset').disabled) {\n            this.enabled = false;\n        }\n        this.inputWrapper = Input.createInput({\n            element: this.inputElement,\n            buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,\n                placeholder: this.placeholder,\n                cssClass: updatedCssClassValues,\n                enabled: this.enabled,\n                enableRtl: this.enableRtl,\n                showClearButton: this.showClearButton\n            }\n        }, this.createElement);\n        if (this.element.tagName === this.getNgDirective()) {\n            this.element.appendChild(this.inputWrapper.container);\n        }\n        else {\n            this.inputElement.parentElement.insertBefore(this.element, this.inputElement);\n        }\n        this.hiddenElement = this.createElement('select', {\n            attrs: { 'aria-hidden': 'true', 'aria-label': this.getModuleName(), 'tabindex': '-1', 'class': dropDownListClasses.hiddenElement }\n        });\n        prepend([this.hiddenElement], this.inputWrapper.container);\n        this.validationAttribute(this.element, this.hiddenElement);\n        this.setReadOnly();\n        this.setFields();\n        this.inputWrapper.container.style.width = formatUnit(this.width);\n        this.inputWrapper.container.classList.add('e-ddl');\n        if (this.floatLabelType === 'Auto') {\n            Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never') {\n            this.inputWrapper.container.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n        }\n        this.wireEvent();\n        this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n        this.element.removeAttribute('tabindex');\n        const id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n        this.element.id = id;\n        this.hiddenElement.id = id + '_hidden';\n        this.targetElement().setAttribute('tabindex', this.tabIndex);\n        if ((this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') && !this.readonly) {\n            this.inputElement.setAttribute('aria-label', this.getModuleName());\n        }\n        else if (this.getModuleName() === 'dropdownlist') {\n            attributes(this.targetElement(), { 'aria-label': this.getModuleName() });\n        }\n        attributes(this.targetElement(), this.getAriaAttributes());\n        this.updateDataAttribute(this.htmlAttributes);\n        this.setHTMLAttributes();\n        if (this.targetElement() === this.inputElement) {\n            this.inputElement.removeAttribute('aria-labelledby');\n        }\n        if (this.value !== null || this.activeIndex !== null || this.text !== null) {\n            if (this.enableVirtualization) {\n                this.listItemHeight = this.getListHeight();\n                this.getSkeletonCount();\n                this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);\n            }\n            this.initValue();\n            this.selectedValueInfo = this.viewPortInfo;\n            if (this.enableVirtualization) {\n                this.activeIndex = this.activeIndex + this.skeletonCount;\n            }\n        }\n        else if (this.element.tagName === 'SELECT' && this.element.options[0]) {\n            const selectElement = this.element;\n            this.value = selectElement.options[selectElement.selectedIndex].value;\n            this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;\n            this.initValue();\n        }\n        this.setEnabled();\n        this.preventTabIndex(this.element);\n        if (!this.enabled) {\n            this.targetElement().tabIndex = -1;\n        }\n        this.initial = false;\n        this.element.style.opacity = '';\n        this.inputElement.onselect = (e) => {\n            e.stopImmediatePropagation();\n        };\n        this.inputElement.onchange = (e) => {\n            e.stopImmediatePropagation();\n        };\n        if (this.element.hasAttribute('autofocus')) {\n            this.focusIn();\n        }\n        if (!isNullOrUndefined(this.text)) {\n            this.inputElement.setAttribute('value', this.text);\n        }\n        if (this.element.hasAttribute('data-val')) {\n            this.element.setAttribute('data-val', 'false');\n        }\n        const floatLabelElement = this.inputWrapper.container.getElementsByClassName('e-float-text')[0];\n        if (!isNullOrUndefined(this.element.id) && this.element.id !== '' && !isNullOrUndefined(floatLabelElement)) {\n            floatLabelElement.id = 'label_' + this.element.id.replace(/ /g, '_');\n            attributes(this.inputElement, { 'aria-labelledby': floatLabelElement.id });\n        }\n        this.renderComplete();\n        this.listItemHeight = this.getListHeight();\n        this.getSkeletonCount();\n        if (this.enableVirtualization) {\n            this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);\n        }\n        this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;\n        this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;\n    }\n    getListHeight() {\n        let listParent = this.createElement('div', {\n            className: 'e-dropdownbase'\n        });\n        let item = this.createElement('li', {\n            className: 'e-list-item'\n        });\n        let listParentHeight = formatUnit(this.popupHeight);\n        listParent.style.height = (parseInt(listParentHeight, 10)).toString() + 'px';\n        listParent.appendChild(item);\n        document.body.appendChild(listParent);\n        this.virtualListHeight = listParent.getBoundingClientRect().height;\n        let listItemHeight = Math.ceil(item.getBoundingClientRect().height);\n        listParent.remove();\n        return listItemHeight;\n    }\n    setFooterTemplate(popupEle) {\n        let compiledString;\n        if (this.footer) {\n            if (this.isReact && typeof this.footerTemplate === 'function') {\n                this.clearTemplate(['footerTemplate']);\n            }\n            else {\n                this.footer.innerHTML = '';\n            }\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], dropDownListClasses.footer);\n        }\n        const footercheck = this.dropdownCompiler(this.footerTemplate);\n        if (typeof this.footerTemplate !== 'function' && footercheck) {\n            compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const footerCompTemp = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, null, this.footer);\n        if (footerCompTemp && footerCompTemp.length > 0) {\n            append(footerCompTemp, this.footer);\n        }\n        append([this.footer], popupEle);\n    }\n    setHeaderTemplate(popupEle) {\n        let compiledString;\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], dropDownListClasses.header);\n        }\n        const headercheck = this.dropdownCompiler(this.headerTemplate);\n        if (typeof this.headerTemplate !== 'function' && headercheck) {\n            compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const headerCompTemp = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, null, this.header);\n        if (headerCompTemp && headerCompTemp.length) {\n            append(headerCompTemp, this.header);\n        }\n        const contentEle = popupEle.querySelector('div.e-content');\n        popupEle.insertBefore(this.header, contentEle);\n    }\n    /**\n     * Sets the enabled state to DropDownBase.\n     *\n     * @returns {void}\n     */\n    setEnabled() {\n        this.element.setAttribute('aria-disabled', (this.enabled) ? 'false' : 'true');\n    }\n    setOldText(text) {\n        this.text = text;\n    }\n    setOldValue(value) {\n        this.value = value;\n    }\n    refreshPopup() {\n        if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) &&\n            ((this.allowFiltering && !(Browser.isDevice && this.isFilterLayout())) || this.getModuleName() === 'autocomplete')) {\n            removeClass([this.popupObj.element], 'e-popup-close');\n            this.popupObj.refreshPosition(this.inputWrapper.container);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkData(newProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering &&\n            !(this.isListSearched && (newProp.dataSource instanceof DataManager))) {\n            this.list = null;\n            this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };\n        }\n        this.isListSearched = false;\n        const isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && isNullOrUndefined(newProp.value);\n        const isChangeText = Object.keys(newProp).indexOf('text') !== -1 && isNullOrUndefined(newProp.text);\n        if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {\n            this.itemData = null;\n        }\n        if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {\n            this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };\n            this.actionData = this.actionCompleteData;\n        }\n        else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n            this.actionCompleteData = this.getModuleName() === 'combobox' ?\n                { ulElement: null, list: null, isUpdated: false } : this.actionCompleteData;\n            this.actionData = this.actionCompleteData;\n        }\n    }\n    updateDataSource(props) {\n        if (this.inputElement.value !== '' || (!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0)))) {\n            this.clearAll(null, props);\n        }\n        if ((this.fields.groupBy && props.fields) && !this.isGroupChecking && this.list) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n            EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n        }\n        if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0))) || !(props.dataSource === [])) {\n            this.typedString = '';\n            this.resetList(this.dataSource);\n        }\n        if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {\n            this.checkCustomValue();\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        const dataItem = this.getItemData();\n        this.setProperties({ 'text': dataItem.text, 'value': dataItem.value });\n    }\n    updateInputFields() {\n        if (this.getModuleName() === 'dropdownlist') {\n            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     *\n     * @private\n     * @param {DropDownListModel} newProp - Returns the dynamic property value of the component.\n     * @param {DropDownListModel} oldProp - Returns the previous previous value of the component.\n     * @returns {void}\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!isNullOrUndefined(newProp.dataSource) && !this.isTouched && (isNullOrUndefined(newProp.value) && isNullOrUndefined(newProp.index)) && !isNullOrUndefined(this.preselectedIndex)) {\n            newProp.index = this.preselectedIndex;\n        }\n        if (!isNullOrUndefined(newProp.value) || !isNullOrUndefined(newProp.index)) {\n            this.isTouched = true;\n        }\n        if (this.getModuleName() === 'dropdownlist') {\n            this.checkData(newProp);\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    this.getSkeletonCount();\n                    this.checkAndResetCache();\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'width':\n                    this.setEleWidth(newProp.width);\n                    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputElement);\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.filterInput) {\n                        Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                    }\n                    break;\n                case 'readonly':\n                    if (this.getModuleName() !== 'dropdownlist') {\n                        Input.setReadonly(newProp.readonly, this.inputElement);\n                    }\n                    this.setReadOnly();\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'text':\n                    if (newProp.text === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        const li = this.getElementByText(newProp.text);\n                        if (!this.checkValidLi(li)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.text, oldProp.text, 'text');\n                            }\n                            else if (newProp.text && this.dataSource instanceof DataManager) {\n                                const listLength = this.getItems().length;\n                                const checkField = isNullOrUndefined(this.fields.text) ? this.fields.value : this.fields.text;\n                                this.typedString = '';\n                                this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField, 'equal', newProp.text)))\n                                    .then((e) => {\n                                    if (e.result.length > 0) {\n                                        this.addItem(e.result, listLength);\n                                        this.updateValues();\n                                    }\n                                    else {\n                                        this.setOldText(oldProp.text);\n                                    }\n                                });\n                            }\n                            else if (this.getModuleName() === 'autocomplete') {\n                                this.setInputValue(newProp, oldProp);\n                            }\n                            else {\n                                this.setOldText(oldProp.text);\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'value':\n                    if (newProp.value === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    this.notify('beforeValueChange', { newProp: newProp }); // gird component value type change\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        const item = this.getElementByValue(newProp.value);\n                        if (!this.checkValidLi(item)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.value, oldProp.value, 'value');\n                            }\n                            else if (newProp.value && this.dataSource instanceof DataManager) {\n                                const listLength = this.getItems().length;\n                                const checkField = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n                                this.typedString = '';\n                                this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField, 'equal', newProp.value)))\n                                    .then((e) => {\n                                    if (e.result.length > 0) {\n                                        this.addItem(e.result, listLength);\n                                        this.updateValues();\n                                    }\n                                    else {\n                                        this.setOldValue(oldProp.value);\n                                    }\n                                });\n                            }\n                            else if (this.getModuleName() === 'autocomplete') {\n                                this.setInputValue(newProp, oldProp);\n                            }\n                            else {\n                                this.setOldValue(oldProp.value);\n                            }\n                        }\n                        this.updateInputFields();\n                        this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;\n                    }\n                    break;\n                case 'index':\n                    if (newProp.index === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender && this.liCollections) {\n                        const element = this.liCollections[newProp.index];\n                        if (!this.checkValidLi(element)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.index, oldProp.index, 'index');\n                            }\n                            else {\n                                this.index = oldProp.index;\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.popupObj) {\n                        this.setFooterTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'headerTemplate':\n                    if (this.popupObj) {\n                        this.setHeaderTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'valueTemplate':\n                    if (!isNullOrUndefined(this.itemData) && this.valueTemplate !== null) {\n                        this.setValueTemplate();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.actionCompleteData = {\n                            ulElement: this.ulElement,\n                            list: this.listData, isUpdated: true\n                        };\n                        this.actionData = this.actionCompleteData;\n                        this.updateSelectElementData(this.allowFiltering);\n                    }\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputWrapper);\n                    Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);\n                    if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0] && this.floatLabelType !== 'Never') {\n                        this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n                    }\n                    break;\n                case 'showClearButton':\n                    if (!this.inputWrapper.clearButton) {\n                        Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);\n                        this.bindClearEvent();\n                    }\n                    break;\n                default:\n                    {\n                        // eslint-disable-next-line max-len\n                        const ddlProps = this.getPropObject(prop, newProp, oldProp);\n                        super.onPropertyChanged(ddlProps.newProperty, ddlProps.oldProperty);\n                    }\n                    break;\n            }\n        }\n    }\n    checkValidLi(element) {\n        if (this.isValidLI(element)) {\n            this.setSelection(element, null);\n            return true;\n        }\n        return false;\n    }\n    setSelectionData(newProp, oldProp, prop) {\n        let li;\n        this.updateListValues = () => {\n            if (prop === 'text') {\n                li = this.getElementByText(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldText(oldProp);\n                }\n            }\n            else if (prop === 'value') {\n                li = this.getElementByValue(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldValue(oldProp);\n                }\n            }\n            else if (prop === 'index') {\n                li = this.liCollections[newProp];\n                if (!this.checkValidLi(li)) {\n                    this.index = oldProp;\n                }\n            }\n        };\n    }\n    setReadOnly() {\n        if (this.readonly) {\n            addClass([this.inputWrapper.container], ['e-readonly']);\n        }\n        else {\n            removeClass([this.inputWrapper.container], ['e-readonly']);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setInputValue(newProp, oldProp) {\n    }\n    setCssClass(newClass, oldClass) {\n        if (!isNullOrUndefined(oldClass)) {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(newClass)) {\n            newClass = (newClass.replace(/\\s+/g, ' ')).trim();\n        }\n        Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);\n        if (this.popupObj) {\n            Input.setCssClass(newClass, [this.popupObj.element], oldClass);\n        }\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'dropdownlist';\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Opens the popup that displays the list of items.\n     *\n     * @returns {void}\n     */\n    showPopup(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        if (!this.enabled) {\n            return;\n        }\n        if (this.isReact && this.getModuleName() === 'combobox' && this.itemTemplate && this.isCustomFilter && this.isAddNewItemTemplate) {\n            this.renderList();\n            this.isAddNewItemTemplate = false;\n        }\n        if (this.isFiltering() && this.dataSource instanceof DataManager && (this.actionData.list !== this.actionCompleteData.list) &&\n            this.actionData.list && this.actionData.ulElement) {\n            this.actionCompleteData = this.actionData;\n            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n        }\n        if (this.beforePopupOpen) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n            this.isActive = true;\n            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n        }\n        else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) ||\n            this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {\n            this.renderList(e);\n        }\n        if (this.enableVirtualization && this.listData && this.listData.length) {\n            if (!isNullOrUndefined(this.value) && (this.getModuleName() === 'dropdownlist' || this.getModuleName() === 'combobox')) {\n                this.removeHover();\n            }\n            if (!this.beforePopupOpen) {\n                this.notify(\"setCurrentViewDataAsync\", {\n                    module: \"VirtualScroll\",\n                });\n            }\n        }\n        this.invokeRenderPopup(e);\n        if (this.enableVirtualization && !this.allowFiltering && this.selectedValueInfo != null && this.selectedValueInfo.startIndex > 0 && this.value != null) {\n            this.notify(\"dataProcessAsync\", {\n                module: \"VirtualScroll\",\n                isOpen: true,\n            });\n        }\n    }\n    invokeRenderPopup(e) {\n        if (Browser.isDevice && this.isFilterLayout()) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n            };\n            history.pushState({}, '');\n        }\n        if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) ||\n            this.list.classList.contains(dropDownBaseClasses.noData))) {\n            this.renderPopup(e);\n        }\n    }\n    renderHightSearch() {\n        // update high light search\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Hides the popup if it is in an open state.\n     *\n     * @returns {void}\n     */\n    hidePopup(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {\n            if (!isNullOrUndefined(this.inputElement)) {\n                Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            this.isEscapeKey = false;\n            if (!isNullOrUndefined(this.index)) {\n                const element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);\n                this.selectedLI = this.liCollections[this.index] || element;\n                if (this.selectedLI) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                    if (this.valueTemplate && this.itemData !== null) {\n                        this.setValueTemplate();\n                    }\n                }\n            }\n            else {\n                this.resetSelection();\n            }\n        }\n        this.closePopup(0, e);\n        const dataItem = this.getItemData();\n        const isSelectVal = !isNullOrUndefined(this.selectedLI);\n        if (this.inputElement && this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom ||\n            isSelectVal && this.inputElement.value !== dataItem.text)) {\n            this.isSelectCustom = false;\n            this.clearAll(e);\n        }\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Sets the focus on the component for interaction.\n     *\n     * @returns {void}\n     */\n    focusIn(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.targetElement().classList.contains(dropDownListClasses.disable)) {\n            return;\n        }\n        let isFocused = false;\n        if (this.preventFocus && Browser.isDevice) {\n            this.inputWrapper.container.tabIndex = 1;\n            this.inputWrapper.container.focus();\n            this.preventFocus = false;\n            isFocused = true;\n        }\n        if (!isFocused) {\n            this.targetElement().focus();\n        }\n        addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n        this.onFocus(e);\n        if (this.floatLabelType === 'Auto') {\n            Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n        }\n    }\n    /**\n     * Moves the focus from the component if the component is already focused.\n     *\n     * @returns {void}\n     */\n    focusOut(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        if (!this.enabled) {\n            return;\n        }\n        if (!this.enableVirtualization && this.getModuleName() === 'combobox') {\n            this.isTyped = true;\n        }\n        this.hidePopup(e);\n        if (this.targetElement()) {\n            this.targetElement().blur();\n        }\n        removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n        if (this.floatLabelType === 'Auto' && this.inputElement.value === '') {\n            Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    destroy() {\n        this.isActive = false;\n        resetIncrementalSearchValues(this.element.id);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        this.hidePopup();\n        this.unWireEvent();\n        if (this.list) {\n            this.unWireListEvents();\n        }\n        if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {\n            return;\n        }\n        if (this.inputElement) {\n            const attrArray = ['readonly', 'aria-disabled', 'placeholder', 'aria-labelledby',\n                'aria-expanded', 'autocomplete', 'aria-readonly', 'autocapitalize',\n                'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.inputElement.removeAttribute(attrArray[i]);\n            }\n            this.inputElement.setAttribute('tabindex', this.tabIndex);\n            this.inputElement.classList.remove('e-input');\n            Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n        this.element.style.display = 'block';\n        if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {\n            detach(this.inputWrapper.container);\n        }\n        else {\n            this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);\n            detach(this.inputWrapper.container);\n        }\n        this.hiddenElement = null;\n        this.inputWrapper = null;\n        this.keyboardModule = null;\n        this.ulElement = null;\n        this.list = null;\n        this.popupObj = null;\n        this.popupContentElement = null;\n        this.rippleFun = null;\n        this.selectedLI = null;\n        this.liCollections = null;\n        this.item = null;\n        this.inputWrapper = null;\n        this.footer = null;\n        this.header = null;\n        this.previousSelectedLI = null;\n        this.valueTempElement = null;\n        this.actionData.ulElement = null;\n        if (this.inputElement && !isNullOrUndefined(this.inputElement.onchange)) {\n            this.inputElement.onchange = null;\n        }\n        if (this.isAngular) {\n            this.inputElement = null;\n        }\n        super.destroy();\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Gets all the list items bound on this component.\n     *\n     * @returns {Element[]}\n     */\n    getItems() {\n        if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n                this.initRemoteRender = true;\n            }\n            this.renderList();\n        }\n        return this.ulElement ? super.getItems() : [];\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     *\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns {Object}\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Allows you to clear the selected values from the component.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this.value = null;\n    }\n};\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('100%')\n], DropDownList.prototype, \"width\", void 0);\n__decorate([\n    Property(true)\n], DropDownList.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], DropDownList.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property('300px')\n], DropDownList.prototype, \"popupHeight\", void 0);\n__decorate([\n    Property('100%')\n], DropDownList.prototype, \"popupWidth\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"placeholder\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Property({})\n], DropDownList.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"query\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"valueTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"footerTemplate\", void 0);\n__decorate([\n    Property(false)\n], DropDownList.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property(false)\n], DropDownList.prototype, \"readonly\", void 0);\n__decorate([\n    Property(false)\n], DropDownList.prototype, \"enableVirtualization\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"text\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"value\", void 0);\n__decorate([\n    Property(null)\n], DropDownList.prototype, \"index\", void 0);\n__decorate([\n    Property('Never')\n], DropDownList.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Property(false)\n], DropDownList.prototype, \"showClearButton\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"filtering\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"beforeOpen\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"blur\", void 0);\n__decorate([\n    Event()\n], DropDownList.prototype, \"focus\", void 0);\nDropDownList = __decorate([\n    NotifyPropertyChanges\n], DropDownList);\nexport { DropDownList };\n","/**\n * export all modules from current location\n */\nexport * from './drop-down-list';\nexport * from '../common/virtual-scroll';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Input, TextBox } from '@syncfusion/ej2-inputs';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { NotifyPropertyChanges, Property, Event, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { Component, EventHandler, attributes, formatUnit, ChildProperty, remove, L10n, extend } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, detach, prepend, Complex, closest, setValue, getValue, compile, append } from '@syncfusion/ej2-base';\nimport { select, selectAll, isNullOrUndefined as isNOU, matches, Browser, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { TreeView } from '@syncfusion/ej2-navigations';\nconst RTL = 'e-rtl';\nconst DROPDOWNTREE = 'e-ddt';\nconst HIDDENELEMENT = 'e-ddt-hidden';\nconst DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';\nconst SHOW_CHIP = 'e-show-chip';\nconst SHOW_CLEAR = 'e-show-clear';\nconst SHOW_DD_ICON = 'e-show-dd-icon';\nconst CHIP_INPUT = 'e-chip-input';\nconst INPUTFOCUS = 'e-input-focus';\nconst INPUTGROUP = 'e-input-group';\nconst ICONANIMATION = 'e-icon-anim';\nconst CLOSEICON_CLASS = 'e-clear-icon e-icons';\nconst CHIP_WRAPPER = 'e-chips-wrapper';\nconst CHIP_COLLECTION = 'e-chips-collection';\nconst CHIP = 'e-chips';\nconst CHIP_CONTENT = 'e-chipcontent';\nconst CHIP_CLOSE = 'e-chips-close';\nconst HIDEICON = 'e-icon-hide';\nconst DDTHIDEICON = 'e-ddt-icon-hide';\nconst POPUP_CLASS = 'e-ddt e-popup';\nconst PARENTITEM = 'e-list-parent';\nconst CONTENT = 'e-popup-content';\nconst DROPDOWN = 'e-dropdown';\nconst DISABLED = 'e-disabled';\nconst ICONS = 'e-icons';\nconst CHECKALLPARENT = 'e-selectall-parent';\nconst CHECKALLHIDE = 'e-hide-selectall';\nconst BIGGER = 'e-bigger';\nconst SMALL = 'e-small';\nconst ALLTEXT = 'e-all-text';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECK = 'e-check';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst FILTERWRAP = 'e-filter-wrap';\nconst DDTICON = 'e-ddt-icon';\nconst FOOTER = 'e-ddt-footer';\nconst HEADER = 'e-ddt-header';\nconst NODATACONTAINER = 'e-ddt-nodata';\nconst NODATA = 'e-no-data';\nconst HEADERTEMPLATE = 'HeaderTemplate';\nconst FOOTERTEMPLATE = 'FooterTemplate';\nconst NORECORDSTEMPLATE = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';\nconst CUSTOMTEMPLATE = 'CustomTemplate';\nconst REMAIN_WRAPPER = 'e-remain';\nconst OVERFLOW_VIEW = 'e-overflow';\nconst SHOW_TEXT = 'e-show-text';\nconst TOTAL_COUNT_WRAPPER = 'e-total-count';\nconst REMAIN_COUNT = 'e-wrap-count';\nexport class Fields extends ChildProperty {\n}\n__decorate([\n    Property('child')\n], Fields.prototype, \"child\", void 0);\n__decorate([\n    Property([])\n], Fields.prototype, \"dataSource\", void 0);\n__decorate([\n    Property('expanded')\n], Fields.prototype, \"expanded\", void 0);\n__decorate([\n    Property('hasChildren')\n], Fields.prototype, \"hasChildren\", void 0);\n__decorate([\n    Property('htmlAttributes')\n], Fields.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property('iconCss')\n], Fields.prototype, \"iconCss\", void 0);\n__decorate([\n    Property('imageUrl')\n], Fields.prototype, \"imageUrl\", void 0);\n__decorate([\n    Property('parentValue')\n], Fields.prototype, \"parentValue\", void 0);\n__decorate([\n    Property(null)\n], Fields.prototype, \"query\", void 0);\n__decorate([\n    Property('selectable')\n], Fields.prototype, \"selectable\", void 0);\n__decorate([\n    Property('selected')\n], Fields.prototype, \"selected\", void 0);\n__decorate([\n    Property(null)\n], Fields.prototype, \"tableName\", void 0);\n__decorate([\n    Property('text')\n], Fields.prototype, \"text\", void 0);\n__decorate([\n    Property('tooltip')\n], Fields.prototype, \"tooltip\", void 0);\n__decorate([\n    Property('value')\n], Fields.prototype, \"value\", void 0);\nexport class TreeSettings extends ChildProperty {\n}\n__decorate([\n    Property(false)\n], TreeSettings.prototype, \"autoCheck\", void 0);\n__decorate([\n    Property('Auto')\n], TreeSettings.prototype, \"expandOn\", void 0);\n__decorate([\n    Property(false)\n], TreeSettings.prototype, \"loadOnDemand\", void 0);\n/**\n * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.\n * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,\n * UI customization, accessibility, and preselected values.\n * ```html\n *  <input type=\"text\" id=\"tree\"></input>\n * ```\n * ```typescript\n *  let ddtObj: DropDownTree = new DropDownTree();\n *  ddtObj.appendTo(\"#tree\");\n * ```\n */\nlet DropDownTree = class DropDownTree extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.filterTimer = null;\n        this.isFilteredData = false;\n        this.isFilterRestore = false;\n        // eslint-disable-next-line\n        this.selectedData = [];\n        this.filterDelayTime = 300;\n        this.isClicked = false;\n        // Specifies if the checkAll method has been called\n        this.isCheckAllCalled = false;\n        this.isFromFilterChange = false;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string}\n     * @hidden\n     */\n    getPersistData() {\n        const keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    getLocaleName() {\n        return 'drop-down-tree';\n    }\n    /**\n     * Initialize the event handler.\n     *\n     * @returns {void}\n     * @private\n     */\n    preRender() {\n        this.inputFocus = false;\n        this.isPopupOpen = false;\n        this.isFirstRender = true;\n        this.isInitialized = false;\n        this.currentText = null;\n        this.currentValue = null;\n        this.oldValue = null;\n        this.removeValue = false;\n        this.selectedText = [];\n        this.treeItems = [];\n        this.dataValue = null;\n        this.isNodeSelected = false;\n        this.isDynamicChange = false;\n        this.clearIconWidth = 0;\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE}`;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE}`;\n        this.customTemplateId = `${this.element.id}${CUSTOMTEMPLATE}`;\n        this.keyConfigs = {\n            escape: 'escape',\n            altUp: 'alt+uparrow',\n            altDown: 'alt+downarrow',\n            tab: 'tab',\n            shiftTab: 'shift+tab',\n            end: 'end',\n            enter: 'enter',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n            ctrlA: 'ctrl+A'\n        };\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        const isTree = select('#' + this.element.id + '_tree', document);\n        if (isTree) {\n            const popupDiv = select('#' + this.element.id + '_popup', document);\n            detach(popupDiv ? popupDiv : isTree.parentElement);\n        }\n        this.ensureAutoCheck();\n        if (this.element.tagName === 'INPUT') {\n            this.inputEle = this.element;\n            if (isNOU(this.inputEle.getAttribute('role'))) {\n                this.inputEle.setAttribute('role', 'textbox');\n            }\n            if (isNOU(this.inputEle.getAttribute('type'))) {\n                this.inputEle.setAttribute('type', 'text');\n            }\n        }\n        else {\n            this.inputEle = this.createElement('input', { attrs: { role: 'textbox', type: 'text' } });\n            this.element.parentElement.insertBefore(this.inputEle, this.element);\n        }\n        this.inputObj = Input.createInput({\n            element: this.inputEle,\n            floatLabelType: this.floatLabelType,\n            buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,\n            properties: {\n                readonly: true,\n                placeholder: this.placeholder,\n                enabled: this.enabled,\n                cssClass: this.cssClass,\n                enableRtl: this.enableRtl\n            }\n        }, this.createElement);\n        this.inputWrapper = this.inputObj.container;\n        if (!this.inputWrapper.classList.contains(INPUTGROUP)) {\n            this.inputWrapper.classList.add(INPUTGROUP);\n        }\n        if (this.showDropDownIcon) {\n            this.inputWrapper.classList.add(SHOW_DD_ICON);\n        }\n        if (this.element.tagName === this.getDirective()) {\n            this.element.appendChild(this.inputWrapper);\n        }\n        this.createHiddenElement();\n        this.createClearIcon();\n        this.inputWrapper.classList.add(DROPDOWNTREE);\n        this.setElementWidth(this.width);\n        this.updateDataAttribute();\n        this.setHTMLAttributes();\n        this.setAttributes();\n        this.popupDiv = this.createElement('div', { className: CONTENT });\n        this.popupDiv.classList.add(DROPDOWN);\n        this.tree = this.createElement('div', { id: this.element.id + '_tree' });\n        this.popupDiv.appendChild(this.tree);\n        document.body.appendChild(this.popupDiv);\n        this.wireTreeEvents();\n        addClass([this.popupDiv], DDTHIDEICON);\n        this.renderTree();\n        this.isRemoteData = this.fields.dataSource instanceof DataManager;\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter') {\n                this.createChip();\n            }\n            if (!this.wrapText && this.mode !== 'Custom') {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n                if (this.mode !== 'Box') {\n                    addClass([this.overFlowWrapper], SHOW_TEXT);\n                }\n            }\n        }\n        if (!this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n        }\n        this.wireEvents();\n        const firstUl = select('.' + PARENTITEM, this.treeObj.element);\n        if (firstUl && firstUl.getAttribute('aria-multiselectable')) {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n        this.oldValue = this.value;\n        this.isInitialized = true;\n        this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate\n            || this.noRecordsTemplate || this.customTemplate;\n        this.renderComplete();\n    }\n    ensureAutoCheck() {\n        if (this.allowFiltering && this.treeSettings.autoCheck) {\n            this.setProperties({ treeSettings: { autoCheck: false } }, true);\n        }\n    }\n    hideCheckAll(flag) {\n        const checkAllEle = !isNOU(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;\n        if (!isNOU(checkAllEle)) {\n            if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {\n                addClass([checkAllEle], CHECKALLHIDE);\n            }\n            else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {\n                removeClass([checkAllEle], CHECKALLHIDE);\n            }\n        }\n    }\n    renderFilter() {\n        this.filterContainer = this.createElement('div', {\n            id: this.element.id + '_filter_wrap',\n            className: FILTERWRAP\n        });\n        const filterInput = this.createElement('input', {\n            id: this.element.id + '_filter',\n            attrs: { autocomplete: 'off', 'aria-label': this.filterBarPlaceholder }\n        });\n        this.filterContainer.appendChild(filterInput);\n        prepend([this.filterContainer], this.popupEle);\n        this.filterObj = new TextBox({\n            value: '',\n            showClearButton: true,\n            placeholder: this.filterBarPlaceholder,\n            input: this.filterChangeHandler.bind(this)\n        });\n        this.filterObj.appendTo('#' + this.element.id + '_filter');\n    }\n    filterChangeHandler(args) {\n        if (!isNOU(args.value)) {\n            window.clearTimeout(this.filterTimer);\n            this.filterTimer = window.setTimeout(() => { this.filterHandler(args.value, args.event); }, this.filterDelayTime);\n        }\n    }\n    filterHandler(value, event) {\n        this.isFromFilterChange = true;\n        if (!this.isFilteredData) {\n            this.treeData = this.treeObj.getTreeData();\n        }\n        const filterFields = this.cloneFields(this.fields);\n        const args = {\n            cancel: false,\n            preventDefaultAction: false,\n            event: event,\n            text: value,\n            fields: filterFields\n        };\n        this.trigger('filtering', args, (args) => {\n            if (!args.cancel) {\n                let flag = false;\n                let fields;\n                this.isFilteredData = true;\n                if (value === '') {\n                    this.isFilteredData = false;\n                    this.isFilterRestore = true;\n                    fields = this.cloneFields(this.fields);\n                }\n                else if (args.preventDefaultAction) {\n                    fields = args.fields;\n                }\n                else {\n                    if (this.treeDataType === 1) {\n                        fields = this.selfReferencefilter(value, args.fields);\n                    }\n                    else {\n                        if (this.fields.dataSource instanceof DataManager) {\n                            flag = true;\n                        }\n                        else {\n                            fields = this.nestedFilter(value, args.fields);\n                        }\n                    }\n                }\n                this.hideCheckAll(this.isFilteredData);\n                if (flag) {\n                    return;\n                }\n                this.treeObj.fields = this.getTreeFields(fields);\n                this.treeObj.dataBind();\n                if (this.hasTemplate && this.portals) {\n                    this.portals = [].concat(this.treeObj.portals);\n                    if (this.isReact) {\n                        this.renderReactTemplates();\n                    }\n                }\n            }\n        });\n    }\n    nestedFilter(value, filteredFields) {\n        // eslint-disable-next-line\n        const matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            // eslint-disable-next-line\n            const filteredChild = this.nestedChildFilter(value, this.treeData[i]);\n            if (!isNOU(filteredChild)) {\n                matchedDataSource.push(filteredChild);\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    // eslint-disable-next-line\n    nestedChildFilter(value, node) {\n        // eslint-disable-next-line\n        const children = node[this.fields.child];\n        if (isNOU(children)) {\n            return (this.isMatchedNode(value, node)) ? node : null;\n        }\n        else {\n            // eslint-disable-next-line\n            const matchedChildren = [];\n            for (let i = 0; i < children.length; i++) {\n                // eslint-disable-next-line\n                const filteredChild = this.nestedChildFilter(value, children[i]);\n                if (!isNOU(filteredChild)) {\n                    matchedChildren.push(filteredChild);\n                }\n            }\n            let filteredItems = Object.assign({}, node);\n            if (matchedChildren.length !== 0) {\n                filteredItems[this.fields.child] = matchedChildren;\n                return filteredItems;\n            }\n            else {\n                filteredItems[this.fields.child] = null;\n                return (this.isMatchedNode(value, filteredItems)) ? filteredItems : null;\n            }\n        }\n    }\n    selfReferencefilter(value, filteredFields) {\n        // eslint-disable-next-line\n        const matchedData = [];\n        // eslint-disable-next-line\n        const matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            if (this.isMatchedNode(value, this.treeData[i])) {\n                matchedData.push(this.treeData[i]);\n            }\n        }\n        for (let i = 0; i < matchedData.length; i++) {\n            if (matchedDataSource.indexOf(matchedData[i]) === -1) {\n                matchedDataSource.push(matchedData[i]);\n                // eslint-disable-next-line\n                let parentId = matchedData[i][this.fields.parentValue];\n                while (!isNOU(parentId)) {\n                    // eslint-disable-next-line\n                    let parent = null;\n                    for (let j = 0; j < this.treeData.length; j++) {\n                        // eslint-disable-next-line\n                        const value = this.treeData[j][this.fields.value];\n                        if (!isNOU(value) && (value === parentId)) {\n                            parent = this.treeData[j];\n                            break;\n                        }\n                    }\n                    if (!isNOU(parent) && (matchedDataSource.indexOf(parent) === -1)) {\n                        matchedDataSource.push(parent);\n                        parentId = parent[this.fields.parentValue];\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    // eslint-disable-next-line\n    isMatchedNode(value, node) {\n        let checkValue = node[this.fields.text];\n        if (this.ignoreCase) {\n            checkValue = checkValue.toLowerCase();\n            value = value.toLowerCase();\n        }\n        if (this.ignoreAccent) {\n            checkValue = DataUtil.ignoreDiacritics(checkValue);\n            value = DataUtil.ignoreDiacritics(value);\n        }\n        if (this.filterType === 'StartsWith') {\n            return checkValue.slice(0, value.length) === value;\n        }\n        else if (this.filterType === 'EndsWith') {\n            return checkValue.slice(-value.length) === value;\n        }\n        else {\n            return checkValue.indexOf(value) !== -1;\n        }\n    }\n    /* To wire events for the dropdown tree */\n    wireEvents() {\n        EventHandler.add(this.inputWrapper, 'mouseup', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper, 'blur', this.focusOut, this);\n        EventHandler.add(this.inputWrapper, 'mousemove', this.mouseIn, this);\n        EventHandler.add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);\n        EventHandler.add(this.overAllClear, 'mousedown', this.clearAll, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        const formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        this.keyboardModule = new KeyboardEvents(this.inputWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n    }\n    wireTreeEvents() {\n        this.keyboardModule = new KeyboardEvents(this.tree, {\n            keyAction: this.treeAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n    }\n    wireCheckAllWrapperEvents() {\n        this.keyboardModule = new KeyboardEvents(this.checkAllParent, {\n            keyAction: this.checkAllAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n    }\n    /* To unwire events for the dropdown tree */\n    unWireEvents() {\n        EventHandler.remove(this.inputWrapper, 'mouseup', this.dropDownClick);\n        EventHandler.remove(this.inputWrapper, 'focus', this.focusIn);\n        EventHandler.remove(this.inputWrapper, 'blur', this.focusOut);\n        EventHandler.remove(this.inputWrapper, 'mousemove', this.mouseIn);\n        EventHandler.remove(this.inputWrapper, 'mouseout', this.onMouseLeave);\n        EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n        EventHandler.remove(window, 'resize', this.windowResize);\n        const formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n    }\n    /* Trigger when the dropdown is clicked */\n    dropDownClick(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n            return;\n        }\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        else {\n            this.focusIn(e);\n            this.renderPopup();\n        }\n        this.showOverAllClear();\n    }\n    mouseIn() {\n        if (this.enabled || !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    onMouseLeave() {\n        if (!this.inputFocus) {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n    }\n    getDirective() {\n        return 'EJS-DROPDOWNTREE';\n    }\n    focusOut(e) {\n        if (!this.enabled || this.readonly || !this.inputFocus) {\n            return;\n        }\n        if ((Browser.isIE || Browser.info.name === 'edge') && (e.target === this.inputWrapper)) {\n            return;\n        }\n        const target = e.relatedTarget;\n        if ((target !== this.inputEle) && (isNOU(target)) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {\n            this.onFocusOut(e);\n        }\n    }\n    onFocusOut(event) {\n        this.inputFocus = false;\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n        }\n        if (this.showClearButton) {\n            this.clearIconWidth = select('.e-clear-icon', this.inputWrapper).offsetWidth;\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        removeClass([this.inputWrapper], [INPUTFOCUS]);\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            const isValue = this.value ? (this.value.length ? true : false) : false;\n            if (this.mode !== 'Delimiter' && this.mode !== 'Custom') {\n                if (this.chipWrapper && (this.mode === 'Default')) {\n                    addClass([this.chipWrapper], HIDEICON);\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n            }\n            if (!this.wrapText && isValue) {\n                this.updateView();\n            }\n        }\n        if (this.changeOnBlur) {\n            this.triggerChangeEvent(event);\n        }\n        this.removeValue = false;\n        this.oldValue = this.value;\n        this.trigger('blur');\n    }\n    updateView() {\n        if ((!this.showCheckBox && !this.allowMultiSelection) || this.mode === 'Custom' || this.inputFocus) {\n            return;\n        }\n        if (this.mode !== 'Box') {\n            addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);\n        }\n        else {\n            addClass([this.inputWrapper], SHOW_CHIP);\n        }\n        if (this.value && this.value.length !== 0) {\n            if (this.inputWrapper.contains(this.chipWrapper)) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n            addClass([this.inputEle], CHIP_INPUT);\n            this.updateOverFlowView();\n            this.ensurePlaceHolder();\n        }\n    }\n    triggerChangeEvent(event) {\n        const isEqual = this.ddtCompareValues(this.oldValue, this.value);\n        if ((!isEqual || this.isChipDelete) && !this.removeValue) {\n            const eventArgs = {\n                e: event,\n                oldValue: this.oldValue,\n                value: this.value,\n                isInteracted: event ? true : false,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n            this.oldValue = this.value;\n        }\n    }\n    ddtCompareValues(oldValue, newValue) {\n        if (oldValue === null || newValue === null) {\n            const isValid = oldValue === null ? ((newValue === oldValue) ? true : false) :\n                (oldValue.length === 0 ? (newValue === oldValue) : false);\n            return isValid;\n        }\n        else if (oldValue.length !== newValue.length) {\n            return false;\n        }\n        for (let i = 0; i < oldValue.length; i++) {\n            if (oldValue[i] !== newValue[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    focusIn(e) {\n        if (!this.enabled || this.readonly || this.inputFocus) {\n            return;\n        }\n        this.showOverAllClear();\n        this.inputFocus = true;\n        addClass([this.inputWrapper], [INPUTFOCUS]);\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter' && this.inputFocus) {\n                if (this.chipWrapper && (this.value && this.value.length !== 0)) {\n                    removeClass([this.chipWrapper], HIDEICON);\n                    addClass([this.inputEle], CHIP_INPUT);\n                }\n                addClass([this.inputWrapper], SHOW_CHIP);\n                if (this.popupObj) {\n                    this.popupObj.refreshPosition();\n                }\n            }\n            if (!this.wrapText && this.mode !== 'Custom') {\n                if (this.inputWrapper.contains(this.overFlowWrapper)) {\n                    addClass([this.overFlowWrapper], HIDEICON);\n                }\n                if (this.mode === 'Delimiter') {\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n                else {\n                    addClass([this.inputWrapper], SHOW_CHIP);\n                }\n                removeClass([this.inputWrapper], SHOW_TEXT);\n                this.ensurePlaceHolder();\n            }\n        }\n        const args = { isInteracted: e ? true : false, event: e };\n        this.trigger('focus', args);\n    }\n    treeAction(e) {\n        const eventArgs = {\n            cancel: false,\n            event: e\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                        this.inputWrapper.focus();\n                        e.preventDefault();\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'tab':\n                    case 'shiftTab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        if (!this.showCheckBox) {\n                            this.isValueChange = true;\n                            this.keyEventArgs = e;\n                        }\n                        break;\n                    case 'space':\n                        this.isValueChange = true;\n                        this.keyEventArgs = e;\n                        break;\n                    case 'ctrlA':\n                        if (this.allowMultiSelection) {\n                            this.selectAll(true);\n                        }\n                        break;\n                    case 'moveRight':\n                    case 'moveLeft':\n                    case 'shiftDown':\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                    case 'shiftUp':\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                }\n            }\n            else {\n                e.stopImmediatePropagation();\n            }\n        });\n    }\n    keyActionHandler(e) {\n        const eventArgs = {\n            cancel: false,\n            event: e\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'shiftTab':\n                    case 'tab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        if (this.inputFocus) {\n                            this.onFocusOut();\n                        }\n                        break;\n                    case 'altDown':\n                        if (!this.isPopupOpen) {\n                            this.showPopup();\n                            e.preventDefault();\n                        }\n                        break;\n                    case 'moveDown':\n                        if (this.showSelectAll && this.showCheckBox) {\n                            this.checkAllParent.focus();\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    checkAllAction(e) {\n        const eventArgs = {\n            cancel: false,\n            event: e\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        this.clickHandler(e);\n                        break;\n                    case 'moveDown':\n                        let focusedElement = this.treeObj.element.querySelector('li');\n                        focusedElement.focus();\n                        addClass([focusedElement], ['e-node-focus']);\n                }\n            }\n        });\n    }\n    windowResize() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ width: this.setWidth() });\n            this.popupObj.refreshPosition();\n        }\n    }\n    resetValueHandler(e) {\n        const formElement = closest(this.inputWrapper, 'form');\n        if (formElement && e.target === formElement) {\n            this.isDynamicChange = true;\n            this.setProperties({ value: null }, true);\n            this.resetValue(true);\n            this.isDynamicChange = false;\n        }\n    }\n    getAriaAttributes() {\n        const disable = this.enabled ? 'false' : 'true';\n        return {\n            'aria-disabled': disable,\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false',\n            'aria-activedescendant': 'null',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    updateOverFlowView() {\n        this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n        removeClass([this.overFlowWrapper], HIDEICON);\n        if (this.value && this.value.length) {\n            let data = '';\n            let overAllContainer;\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            this.overFlowWrapper.innerHTML = '';\n            // eslint-disable-next-line\n            const l10nLocale = { overflowCountTemplate: '+${count} more..', totalCountTemplate: '${count} selected' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            const remainContent = this.l10n.getConstant('overflowCountTemplate');\n            const totalContent = this.l10n.getConstant('totalCountTemplate');\n            const remainElement = this.createElement('span', { className: REMAIN_WRAPPER });\n            this.overFlowWrapper.appendChild(remainElement);\n            remainElement.innerText = remainContent.replace('${count}', this.value.length.toString());\n            const remainSize = remainElement.offsetWidth;\n            remove(remainElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = select('.' + DDTICON, this.inputWrapper).offsetWidth;\n            }\n            if (!isNOU(this.value)) {\n                if (this.mode !== 'Box') {\n                    for (let index = 0; !isNOU(this.value[index]); index++) {\n                        data += (index === 0) ? '' : this.delimiterChar + ' ';\n                        temp = this.getOverflowVal(index);\n                        data += temp;\n                        temp = this.overFlowWrapper.innerHTML;\n                        if (this.enableHtmlSanitizer) {\n                            this.overFlowWrapper.innerText = SanitizeHtmlHelper.sanitize(data);\n                        }\n                        else {\n                            this.overFlowWrapper.innerHTML = data;\n                        }\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                index = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - index;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                const textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);\n                                textArr.pop();\n                                this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = index;\n                        }\n                        else if (index === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n                else {\n                    addClass([this.chipWrapper], HIDEICON);\n                    const ele = this.chipWrapper.cloneNode(true);\n                    const chips = selectAll('.' + CHIP, ele);\n                    for (let i = 0; i < chips.length; i++) {\n                        temp = this.overFlowWrapper.innerHTML;\n                        this.overFlowWrapper.appendChild(chips[i]);\n                        data = this.overFlowWrapper.innerHTML;\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                i = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - i;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = i;\n                        }\n                        else if (i === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n            }\n            if (remaining > 0) {\n                this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));\n            }\n            if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([remainElement], REMAIN_COUNT);\n            }\n        }\n        else {\n            this.overFlowWrapper.innerHTML = '';\n            addClass([this.overFlowWrapper], HIDEICON);\n        }\n        this.updateDelimMode();\n    }\n    updateRemainTemplate(remainElement, remaining, remainContent, totalContent) {\n        if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 &&\n            this.overFlowWrapper.firstChild.nodeValue === '') {\n            this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);\n        }\n        remainElement.innerHTML = '';\n        remainElement.innerText = (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) ?\n            remainContent.replace('${count}', remaining.toString()) : totalContent.replace('${count}', remaining.toString());\n        if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {\n            removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n        }\n        else {\n            addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n            removeClass([this.overFlowWrapper], REMAIN_COUNT);\n        }\n        return remainElement;\n    }\n    getOverflowVal(index) {\n        // eslint-disable-next-line\n        const selectedData = this.getSelectedData(this.value[index]);\n        return getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n    }\n    updateDelimMode() {\n        if (this.mode !== 'Box') {\n            if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([this.overFlowWrapper], REMAIN_COUNT);\n                addClass([this.overFlowWrapper], SHOW_TEXT);\n            }\n            else {\n                this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n                removeClass([this.overFlowWrapper], REMAIN_COUNT);\n            }\n        }\n        else if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {\n            this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n        }\n    }\n    createHiddenElement() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'class': HIDDENELEMENT, 'tabindex': '-1', 'multiple': '' }\n            });\n        }\n        else {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'tabindex': '-1', 'class': HIDDENELEMENT }\n            });\n        }\n        prepend([this.hiddenElement], this.inputWrapper);\n        this.validationAttribute();\n    }\n    createClearIcon() {\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS\n        });\n        addClass([this.overAllClear], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CLEAR);\n        if (this.showClearButton) {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    validationAttribute() {\n        const name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');\n        this.hiddenElement.setAttribute('name', name);\n        this.inputEle.removeAttribute('name');\n        const attributes = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = this.inputEle.getAttribute(attributes[i]);\n            if (attr) {\n                this.hiddenElement.setAttribute(attributes[i], attr);\n                this.inputEle.removeAttribute(attributes[i]);\n            }\n        }\n    }\n    createChip() {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.chipWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER\n            });\n            this.chipCollection = this.createElement('span', {\n                className: CHIP_COLLECTION\n            });\n            this.chipWrapper.appendChild(this.chipCollection);\n            this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);\n            addClass([this.inputWrapper], SHOW_CHIP);\n            const isValid = this.getValidMode();\n            if (isValid && this.value !== null && (this.value && this.value.length !== 0)) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else if (this.value === null || (this.value && this.value.length === 0) || this.checkWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    getValidMode() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return this.mode === 'Box' ? true : (this.mode === 'Default' && this.inputFocus) ? true : false;\n        }\n        else {\n            return false;\n        }\n    }\n    createSelectAllWrapper() {\n        this.checkAllParent = this.createElement('div', {\n            className: CHECKALLPARENT, attrs: { 'tabindex': '0' }\n        });\n        this.selectAllSpan = this.createElement('span', {\n            className: ALLTEXT\n        });\n        this.selectAllSpan.textContent = '';\n        const ele = closest(this.element, '.' + BIGGER);\n        const touchClass = isNOU(ele) ? '' : SMALL;\n        this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });\n        this.checkBoxElement.setAttribute('role', 'checkbox');\n        this.checkAllParent.appendChild(this.checkBoxElement);\n        this.checkAllParent.appendChild(this.selectAllSpan);\n        this.setLocale();\n        EventHandler.add(this.checkAllParent, 'mouseup', this.clickHandler, this);\n        this.wireCheckAllWrapperEvents();\n    }\n    clickHandler(e) {\n        let target;\n        if ((e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT))) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.target;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n        if (!isNOU(this.checkWrapper)) {\n            this.isClicked = true;\n            const checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n            this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);\n            this.isClicked = false;\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e) {\n        let ariaState;\n        const frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.add(CHECK);\n            ariaState = 'true';\n            if (!this.isReverseUpdate) {\n                this.isCheckAllCalled = true;\n                this.treeObj.checkAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(true);\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK))) {\n            frameSpan.classList.remove(CHECK);\n            ariaState = 'false';\n            if (!this.isReverseUpdate) {\n                this.treeObj.uncheckAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(false);\n        }\n        this.setMultiSelect();\n        this.ensurePlaceHolder();\n        ariaState = state === 'check' ? 'true' : 'false';\n        if (!isNOU(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n    }\n    setLocale(unSelect) {\n        if (!this.selectAllSpan) {\n            return;\n        }\n        if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {\n            const template = unSelect ? this.unSelectAllText : this.selectAllText;\n            this.selectAllSpan.textContent = '';\n            // eslint-disable-next-line\n            const compiledString = compile(template);\n            const templateName = unSelect ? 'unSelectAllText' : 'selectAllText';\n            for (const item of compiledString({}, this, templateName, null, !this.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;\n        }\n    }\n    setAttributes() {\n        this.inputEle.setAttribute('tabindex', '-1');\n        const id = this.element.getAttribute('id');\n        this.hiddenElement.id = id + '_hidden';\n        this.inputWrapper.setAttribute('tabindex', '0');\n        attributes(this.inputWrapper, this.getAriaAttributes());\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (const htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    this.inputWrapper.classList.add(this.htmlAttributes[`${htmlAttr}`]);\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[`${htmlAttr}`] === 'disabled') {\n                    this.setProperties({ enabled: false }, true);\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNOU(this.htmlAttributes[`${htmlAttr}`])) {\n                    this.setProperties({ readonly: true }, true);\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.setAttribute('style', this.htmlAttributes[`${htmlAttr}`]);\n                }\n                else {\n                    const defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder',\n                        'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    const validateAttr = ['name', 'required'];\n                    if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        if (htmlAttr === 'placeholder') {\n                            Input.setPlaceholder(this.htmlAttributes[`${htmlAttr}`], this.inputEle);\n                        }\n                        else {\n                            this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                    }\n                    else {\n                        this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                    }\n                }\n            }\n        }\n    }\n    updateDataAttribute() {\n        const value = this.htmlAttributes;\n        const invalidAttr = ['class', 'style', 'id', 'type'];\n        const attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    showOverAllClear() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.overAllClear) {\n            const isValue = this.value ? (this.value.length ? true : false) : false;\n            if (isValue && this.showClearButton) {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n            else {\n                addClass([this.overAllClear], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n    }\n    setTreeValue() {\n        if (this.value !== null && this.value.length !== 0) {\n            // eslint-disable-next-line\n            let data;\n            if (this.showCheckBox || this.allowMultiSelection) {\n                for (let i = 0; i < this.value.length; i++) {\n                    data = this.treeObj.getTreeData(this.value[i])[0];\n                    if (isNOU(data)) {\n                        this.value.splice(this.value.indexOf(this.value[i]), 1);\n                    }\n                }\n                if (this.value.length !== 0) {\n                    this.setValidValue();\n                }\n            }\n            else {\n                data = this.treeObj.getTreeData(this.value[0])[0];\n                if (!isNOU(data)) {\n                    this.setProperties({ text: data[this.fields.text] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ value: this.currentValue }, true);\n                }\n            }\n        }\n    }\n    setTreeText() {\n        if (this.value !== null && !this.isInitialized) {\n            return;\n        }\n        if (this.text !== null) {\n            // eslint-disable-next-line\n            let data;\n            const valArr = [];\n            if (this.showCheckBox || this.allowMultiSelection) {\n                const textArr = this.text.split(this.delimiterChar);\n                for (let i = 0; i < textArr.length; i++) {\n                    data = this.getItems(textArr[i]);\n                    if (!isNOU(data)) {\n                        valArr.push(data[this.fields.value].toString());\n                    }\n                }\n                if (valArr.length !== 0) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: valArr }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n            else {\n                data = this.getItems(this.text);\n                if (!isNOU(data)) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: [data[this.fields.value].toString()] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n        }\n    }\n    setSelectedValue() {\n        if (this.value != null) {\n            return;\n        }\n        if (!this.isInitialized) {\n            this.oldValue = this.value;\n            if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {\n                this.setProperties({ value: this.treeObj.selectedNodes }, true);\n                if (this.allowMultiSelection) {\n                    this.updateMode();\n                }\n            }\n            else if (this.showCheckBox && this.treeObj.checkedNodes) {\n                if (this.treeObj.checkedNodes.length > 0) {\n                    this.setProperties({ value: this.treeObj.checkedNodes }, true);\n                    setValue('selectedNodes', [], this.treeObj);\n                    this.treeObj.dataBind();\n                    this.updateMode();\n                }\n            }\n            this.updateSelectedValues();\n            this.currentText = this.text;\n            this.currentValue = this.value;\n        }\n    }\n    setValidValue() {\n        if (!this.showCheckBox && !this.allowMultiSelection) {\n            Input.setValue(this.text, this.inputEle, this.floatLabelType);\n            const id = this.value[0].toString();\n            if (this.treeObj.selectedNodes[0] !== id) {\n                setValue('selectedNodes', [id], this.treeObj);\n            }\n        }\n        else {\n            if (this.showCheckBox) {\n                let difference = this.value.filter((e) => {\n                    return this.treeObj.checkedNodes.indexOf(e) === -1;\n                });\n                if (difference.length > 0 || this.treeSettings.autoCheck) {\n                    this.treeObj.checkedNodes = this.value.slice();\n                    this.treeObj.dataBind();\n                    this.setMultiSelect();\n                }\n            }\n            else {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.selectedText = [];\n                this.updateSelectedValues();\n            }\n            this.treeObj.dataBind();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n        if (this.isInitialized) {\n            this.triggerChangeEvent();\n        }\n    }\n    // eslint-disable-next-line\n    getItems(givenText) {\n        // eslint-disable-next-line\n        let data;\n        if (this.treeDataType === 1) {\n            for (let i = 0; i < this.treeItems.length; i++) {\n                // eslint-disable-next-line\n                const text = getValue(this.fields.text, this.treeItems[i]);\n                if (!isNOU(this.treeItems[i]) && !isNOU(text) && text === givenText) {\n                    data = this.treeItems[i];\n                    break;\n                }\n            }\n        }\n        else {\n            data = this.getNestedItems(this.treeItems, this.fields, givenText);\n        }\n        return data;\n    }\n    // eslint-disable-next-line\n    getNestedItems(data, field, givenText) {\n        // eslint-disable-next-line\n        let newData;\n        for (let i = 0, objlen = data.length; i < objlen; i++) {\n            // eslint-disable-next-line\n            const dataId = getValue(this.fields.text, data[i]);\n            if (data[i] && dataId && dataId.toString() === givenText) {\n                return data[i];\n            }\n            else if (typeof field.child === 'string' && !isNOU(getValue(field.child, data[i]))) {\n                // eslint-disable-next-line\n                const childData = getValue(field.child, data[i]);\n                // eslint-disable-next-line\n                newData = this.getNestedItems(childData, this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', data[i]))) {\n                const child = 'child';\n                // eslint-disable-next-line\n                newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newData;\n    }\n    getChildType(mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    }\n    /* To render the treeview */\n    renderTree() {\n        this.treeObj = new TreeView({\n            fields: this.getTreeFields(this.fields),\n            enableRtl: this.enableRtl,\n            nodeSelected: this.onNodeSelected.bind(this),\n            nodeChecked: this.onNodeChecked.bind(this),\n            nodeChecking: this.beforeCheck.bind(this),\n            nodeExpanded: this.onNodeExpanded.bind(this),\n            actionFailure: this.onActionFailure.bind(this),\n            nodeClicked: this.onNodeClicked.bind(this),\n            dataBound: this.OnDataBound.bind(this),\n            allowMultiSelection: this.allowMultiSelection,\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            showCheckBox: this.showCheckBox,\n            autoCheck: this.treeSettings.autoCheck,\n            sortOrder: this.sortOrder,\n            expandOn: this.treeSettings.expandOn,\n            loadOnDemand: this.treeSettings.loadOnDemand,\n            nodeSelecting: this.onBeforeSelect.bind(this),\n            nodeTemplate: this.itemTemplate\n        });\n        this.treeObj.root = this.root ? this.root : this;\n        this.treeObj.appendTo('#' + this.tree.id);\n    }\n    /* To render the popup element */\n    renderPopup() {\n        if (this.isFilteredData) {\n            this.filterObj.value = '';\n            this.treeObj.fields = this.getTreeFields(this.fields);\n            this.isFilterRestore = true;\n            this.isFilteredData = false;\n            this.hideCheckAll(false);\n        }\n        let isCancelled = false;\n        const args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                addClass([this.inputWrapper], [ICONANIMATION]);\n                if (this.isFirstRender) {\n                    this.popupEle = this.createElement('div', {\n                        id: this.element.id + '_popup', className: POPUP_CLASS + ' ' + (this.cssClass != null ? this.cssClass : '')\n                    });\n                    document.body.appendChild(this.popupEle);\n                    this.createPopup(this.popupEle);\n                }\n                else {\n                    this.popupEle = this.popupObj.element;\n                }\n            }\n            else {\n                isCancelled = true;\n            }\n            if (this.isFirstRender && !isCancelled) {\n                prepend([this.popupDiv], this.popupEle);\n                removeClass([this.popupDiv], DDTHIDEICON);\n                if (this.allowFiltering) {\n                    this.renderFilter();\n                }\n                if (this.showCheckBox && this.showSelectAll && (!this.popupDiv.classList.contains(NODATA))) {\n                    this.createSelectAllWrapper();\n                    this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n                }\n                if (this.headerTemplate) {\n                    this.setHeaderTemplate();\n                }\n                if (this.footerTemplate) {\n                    this.setFooterTemplate();\n                }\n                this.isFirstRender = false;\n                /* eslint-disable */\n                if (this.hasTemplate && this.portals) {\n                    this.portals = this.portals.concat(this.treeObj.portals);\n                    /* eslint-enable */\n                    this.renderReactTemplates();\n                }\n            }\n            if (!isCancelled) {\n                attributes(this.inputWrapper, { 'aria-expanded': 'true' });\n                this.popupObj.show(null, (this.zIndex === 1000) ? this.inputEle : null);\n                removeClass([this.popupEle], DDTHIDEICON);\n                this.updatePopupHeight();\n                this.popupObj.refreshPosition();\n                if (!(this.showCheckBox && this.showSelectAll) && (!this.popupDiv.classList.contains(NODATA)\n                    && this.treeItems.length > 0)) {\n                    let focusedElement = this.treeObj.element.querySelector('li');\n                    focusedElement.focus();\n                    addClass([focusedElement], ['e-node-focus']);\n                }\n                if (this.checkSelectAll && this.checkBoxElement) {\n                    const wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n                    this.changeState(wrap, 'check');\n                    this.checkSelectAll = false;\n                }\n                if (this.allowFiltering) {\n                    removeClass([this.inputWrapper], [INPUTFOCUS]);\n                    this.filterObj.element.focus();\n                }\n                const eventArgs = { popup: this.popupObj };\n                this.trigger('open', eventArgs);\n            }\n        });\n    }\n    updatePopupHeight() {\n        if (this.isFirstRender) {\n            return;\n        }\n        let popupHeight = this.getHeight();\n        this.popupEle.style.maxHeight = popupHeight;\n        if (this.allowFiltering) {\n            const height = Math.round(this.filterContainer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.headerTemplate) {\n            const height = Math.round(this.header.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.showCheckBox && this.showSelectAll && (!this.popupDiv.classList.contains(NODATA))) {\n            const height = Math.round(this.checkAllParent.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.footerTemplate) {\n            const height = Math.round(this.footer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        let border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);\n        border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);\n        popupHeight = formatUnit(parseInt(popupHeight, 10) - border + 'px');\n        this.popupDiv.style.maxHeight = popupHeight;\n    }\n    createPopup(element) {\n        if (this.isFirstRender) {\n            this.popupObj = new Popup(element, {\n                width: this.setWidth(),\n                targetType: 'relative',\n                collision: { X: 'flip', Y: 'flip' },\n                relateTo: this.inputWrapper,\n                zIndex: this.zIndex,\n                enableRtl: this.enableRtl,\n                position: { X: 'left', Y: 'bottom' },\n                close: () => {\n                    this.isPopupOpen = false;\n                },\n                open: () => {\n                    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                    this.isPopupOpen = true;\n                },\n                targetExitViewport: () => {\n                    if (!Browser.isDevice) {\n                        this.hidePopup();\n                    }\n                }\n            });\n        }\n    }\n    /* To calculate the width when change via set model */\n    setElementWidth(inputWidth) {\n        const ddElement = this.inputWrapper;\n        if (!isNOU(inputWidth)) {\n            if (typeof inputWidth === 'number') {\n                ddElement.style.width = formatUnit(inputWidth);\n            }\n            else if (typeof inputWidth === 'string') {\n                ddElement.style.width = (inputWidth.match(/px|%|em/)) ? (inputWidth) :\n                    (formatUnit(inputWidth));\n            }\n        }\n    }\n    /* To calculate the width of the popup */\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + 'px';\n        }\n        else if (typeof this.popupWidth === 'string') {\n            width = (this.popupWidth.match(/px|em/)) ? (this.popupWidth) : width;\n        }\n        return width;\n    }\n    /* To calculate the height of the popup */\n    getHeight() {\n        let height = formatUnit(this.popupHeight);\n        if (height.indexOf('%') > -1) {\n            // Will set the height of the popup according to the view port height\n            height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + 'px';\n        }\n        else if (typeof this.popupHeight === 'string') {\n            height = (this.popupHeight.match(/px|em/)) ? (this.popupHeight) : height;\n        }\n        return height;\n    }\n    onDocumentClick(e) {\n        const target = e.target;\n        const isTree = closest(target, '.' + PARENTITEM);\n        const isFilter = closest(target, '.' + FILTERWRAP);\n        const isHeader = closest(target, '.' + HEADER);\n        const isFooter = closest(target, '.' + FOOTER);\n        const isScroller = target.classList.contains(DROPDOWN) ? true :\n            (matches(target, '.e-ddt .e-popup') || matches(target, '.e-ddt .e-treeview'));\n        if ((this.isPopupOpen && ((!isNOU(this.inputWrapper) && this.inputWrapper.contains(target)) || isTree || isScroller || isHeader || isFooter)) ||\n            ((this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) ||\n                (this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT)\n                    || target.classList.contains(CHECKBOXFRAME)))))) {\n            this.isDocumentClick = false;\n            e.preventDefault();\n        }\n        else if (!isNOU(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {\n            this.focusOut(e);\n        }\n    }\n    onActionFailure(e) {\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        addClass([this.popupDiv], NODATA);\n    }\n    OnDataBound(args) {\n        this.treeItems = args.data;\n        if (this.treeItems.length <= 0) {\n            this.l10nUpdate();\n            addClass([this.popupDiv], NODATA);\n            this.hideCheckAll(true);\n        }\n        else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {\n            removeClass([this.popupDiv], NODATA);\n            this.hideCheckAll(false);\n        }\n        this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);\n        if (this.isFirstRender && this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n            this.treeObj.element.focus();\n        }\n        const eventArgs = { data: args.data };\n        this.trigger('dataBound', eventArgs);\n        if (this.filterObj === null) {\n            this.isFilteredData = false;\n        }\n        if (this.isFilteredData) {\n            this.treeObj.expandAll();\n        }\n        if (this.isFilterRestore) {\n            this.restoreFilterSelection();\n            this.isFilterRestore = false;\n        }\n    }\n    restoreFilterSelection() {\n        if (this.showCheckBox) {\n            this.treeObj.checkedNodes = this.value ? this.value : [];\n        }\n        else {\n            this.treeObj.selectedNodes = this.value ? this.value : [];\n        }\n    }\n    /* To set cssclass for the dropdowntree */\n    setCssClass(newClass, oldClass) {\n        const elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];\n        if (!isNOU(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNOU(newClass) && newClass !== '') {\n            addClass(elements, newClass.split(' '));\n        }\n    }\n    setEnableRTL(state) {\n        if (state) {\n            this.inputWrapper.classList.add(RTL);\n        }\n        else {\n            this.inputWrapper.classList.remove(RTL);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n        if (this.treeObj) {\n            this.treeObj.enableRtl = state;\n            this.treeObj.dataBind();\n        }\n    }\n    /* To set enable property */\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputEle);\n        if (this.enabled) {\n            removeClass([this.inputWrapper], DISABLED);\n            this.inputEle.setAttribute('aria-disabled', 'false');\n            this.inputWrapper.setAttribute('aria-disabled', 'false');\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            addClass([this.inputWrapper], DISABLED);\n            if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {\n                removeClass([this.inputWrapper], [INPUTFOCUS]);\n            }\n            this.inputEle.setAttribute('aria-disabled', 'true');\n            this.inputWrapper.setAttribute('aria-disabled', 'true');\n        }\n    }\n    cloneFields(fields) {\n        const clonedField = {\n            dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n            child: this.cloneChildField(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes, query: fields.query,\n            selected: fields.selected, selectable: fields.selectable, tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return clonedField;\n    }\n    cloneChildField(fields) {\n        if (typeof fields === 'string') {\n            return fields;\n        }\n        else {\n            const clonedField = {\n                dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n                child: (fields.child ? this.cloneChildField(fields.child) : null), hasChildren: fields.hasChildren,\n                expanded: fields.expanded, iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes,\n                query: fields.query, selected: fields.selected, selectable: fields.selectable, tableName: fields.tableName, tooltip: fields.tooltip\n            };\n            return clonedField;\n        }\n    }\n    getTreeFields(fields) {\n        const treeFields = {\n            dataSource: fields.dataSource, id: fields.value, text: fields.text, parentID: fields.parentValue,\n            child: this.getTreeChildren(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, isChecked: fields.selected,\n            htmlAttributes: fields.htmlAttributes, query: fields.query, selectable: fields.selectable, selected: fields.selected,\n            tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return treeFields;\n    }\n    getTreeChildren(mapper) {\n        if (typeof mapper === 'string') {\n            return mapper;\n        }\n        else if (!isNOU(mapper)) {\n            mapper = this.getActualProperties(mapper);\n            const childFields = mapper;\n            if (mapper.value) {\n                childFields.id = mapper.value;\n            }\n            if (mapper.parentValue) {\n                childFields.parentID = mapper.parentValue;\n            }\n            if (mapper.child) {\n                childFields.child = this.getTreeChildren(mapper.child);\n            }\n            if (mapper.selected && this.showCheckBox) {\n                childFields.isChecked = mapper.selected;\n            }\n            return childFields;\n        }\n        return null;\n    }\n    // eslint-disable-next-line\n    getTreeDataType(ds, field) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (let i = 0; i < ds.length; i++) {\n                if ((typeof field.child === 'string') && isNOU(getValue(field.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        if (isNOU(this.fields.dataSource))\n            this.fields.dataSource = [];\n        for (let i = 0, len = this.fields.dataSource.length; i < len; i++) {\n            if ((typeof field.child === 'string') && !isNOU(getValue(field.child, this.fields.dataSource[i]))) {\n                return 2;\n            }\n            if (!isNOU(getValue(field.parentValue, this.fields.dataSource[i])) || !isNOU(getValue(field.hasChildren, this.fields.dataSource[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    }\n    /* Triggers when the tree fields is changed dynamically */\n    setFields() {\n        this.resetValue();\n        if (this.hasTemplate) {\n            this.updateTemplate();\n        }\n        this.treeObj.fields = this.getTreeFields(this.fields);\n        this.treeObj.dataBind();\n    }\n    getEventArgs(args) {\n        // eslint-disable-next-line\n        const checkData = args.data;\n        // eslint-disable-next-line\n        const selectData = args.nodeData;\n        let state;\n        if (this.showCheckBox) {\n            if (args.action === 'check') {\n                state = 'select';\n            }\n            else if (args.action === 'uncheck') {\n                state = 'un-select';\n            }\n        }\n        const eventArgs = {\n            action: this.showCheckBox ? state : args.action,\n            isInteracted: this.isClicked ? true : args.isInteracted,\n            item: args.node,\n            itemData: this.showCheckBox ? checkData[0] : selectData\n        };\n        return eventArgs;\n    }\n    onBeforeSelect(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n            if (this.value === null) {\n                this.setProperties({ value: [] }, true);\n            }\n        }\n    }\n    updateHiddenValue() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return;\n        }\n        if (this.value && this.value.length) {\n            this.hiddenElement.innerHTML = '<option selected value =\"' + this.value[0] + '\">' + this.text + '</option>';\n        }\n        else {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /* Triggers when the tree node is selected */\n    onNodeSelected(args) {\n        if (this.showCheckBox) {\n            return;\n        }\n        let selectedText;\n        if (args.isInteracted) {\n            const id = getValue('id', args.nodeData).toString();\n            if (!this.allowMultiSelection) {\n                this.hiddenElement.innerHTML = '';\n                this.setProperties({ value: [id] }, true);\n                if (this.itemTemplate) {\n                    selectedText = getValue('text', this.treeObj.getNode(id));\n                }\n                else {\n                    selectedText = getValue('text', args.nodeData).toString();\n                }\n                Input.setValue(selectedText, this.inputEle, this.floatLabelType);\n                this.setProperties({ text: selectedText }, true);\n                this.currentText = this.text;\n                this.currentValue = this.value;\n                attributes(this.inputWrapper, { 'aria-describedby': this.element.id });\n                attributes(this.inputWrapper, { 'aria-activedescendant': id.toString() });\n                this.updateHiddenValue();\n                this.showOverAllClear();\n                this.hidePopup();\n                this.isNodeSelected = true;\n            }\n            else if (this.allowMultiSelection) {\n                this.setMultiSelect();\n            }\n        }\n        const eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isValueChange && !this.changeOnBlur) {\n            this.triggerChangeEvent(this.keyEventArgs);\n            this.isValueChange = false;\n        }\n    }\n    onNodeClicked(args) {\n        if (!this.changeOnBlur && this.isNodeSelected) {\n            this.triggerChangeEvent(args.event);\n            this.isNodeSelected = false;\n        }\n        const target = args.event.target;\n        if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {\n            this.isClicked = true;\n            // eslint-disable-next-line\n            const getNodeDetails = this.treeObj.getNode(args.node);\n            if (getNodeDetails.isChecked === 'true') {\n                this.treeObj.uncheckAll([args.node]);\n            }\n            else {\n                this.treeObj.checkAll([args.node]);\n            }\n            this.isClicked = false;\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {\n            this.triggerChangeEvent(args.event);\n        }\n    }\n    onNodeChecked(args) {\n        const eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isFilteredData && args.action === 'uncheck') {\n            const id = getValue('id', args.data[0]).toString();\n            this.removeSelectedData(id, true);\n        }\n        if (!this.isChipDelete && args.isInteracted) {\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (this.showSelectAll && this.checkBoxElement) {\n            const nodes = this.treeObj.element.querySelectorAll('li');\n            const checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');\n            const wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n            if (wrap && args.action === 'uncheck' && (args.isInteracted || checkedNodes.length === 0 || (!isNOU(args.data[0]) && args.data[0].isChecked === 'false'))) {\n                this.isReverseUpdate = true;\n                this.changeState(wrap, 'uncheck');\n                this.isReverseUpdate = false;\n            }\n            else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length && (args.isInteracted || this.isCheckAllCalled || (!isNOU(args.data[0]) && args.data[0].isChecked === 'true'))) {\n                this.isReverseUpdate = true;\n                this.isCheckAllCalled = false;\n                this.changeState(wrap, 'check');\n                this.isReverseUpdate = false;\n            }\n        }\n    }\n    beforeCheck(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n        }\n    }\n    onNodeExpanded(args) {\n        if (this.hasTemplate && this.portals) {\n            this.portals = [].concat(this.treeObj.portals);\n            /* eslint-enable */\n            this.renderReactTemplates();\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (!this.inputWrapper.contains(this.overAllClear)) {\n                this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);\n            }\n            else {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n        else {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            const chipClose = selectAll('.' + CHIP_CLOSE, this.chipWrapper);\n            for (let i = 0; i < chipClose.length; i++) {\n                if (!state) {\n                    addClass([chipClose[i]], HIDEICON);\n                }\n                else {\n                    removeClass([chipClose[i]], HIDEICON);\n                }\n            }\n        }\n    }\n    updateDropDownIconState(state) {\n        const spinIcon = select('.' + DDTICON, this.inputWrapper);\n        if (state) {\n            if (!spinIcon) {\n                Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);\n            }\n            else {\n                removeClass([spinIcon], HIDEICON);\n            }\n            addClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n        else {\n            addClass([spinIcon], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n    }\n    updateMode() {\n        if (this.mode === 'Custom') {\n            return;\n        }\n        if (this.mode !== 'Delimiter') {\n            if (!this.inputWrapper.contains(this.chipWrapper)) {\n                this.createChip();\n            }\n            const isValid = this.getValidMode();\n            if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {\n                removeClass([this.chipWrapper], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CHIP);\n            }\n            else if (!isValid) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n            const isValue = this.value !== null ? (this.value.length !== 0 ? true : false) : false;\n            if (isValid && isValue) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else {\n                removeClass([this.inputEle], CHIP_INPUT);\n            }\n        }\n        else if (this.inputEle.classList.contains(CHIP_INPUT)) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n    }\n    ensurePlaceHolder() {\n        if (isNOU(this.value) || (this.value && this.value.length === 0)) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    ensureClearIconPosition(floatLabelType) {\n        if (floatLabelType !== 'Never') {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    setMultiSelectValue(newValues) {\n        if (!this.isFilteredData) {\n            this.setProperties({ value: this.isFromFilterChange && newValues && newValues.length == 0 ? this.value : newValues }, true);\n            this.isFromFilterChange = false;\n            if (newValues && newValues.length !== 0 && !this.showCheckBox) {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.treeObj.dataBind();\n            }\n        }\n        else {\n            const selectedValues = isNOU(this.value) ? [] : this.value;\n            for (let i = 0; i < newValues.length; i++) {\n                if (isNOU(this.value) || this.value.indexOf(newValues[i]) === -1) {\n                    selectedValues.push(newValues[i]);\n                }\n            }\n            this.setProperties({ value: selectedValues }, true);\n        }\n    }\n    setMultiSelect() {\n        if (this.showCheckBox && !this.isDynamicChange) {\n            this.setMultiSelectValue(this.treeObj.checkedNodes.slice());\n        }\n        else {\n            const ddtValue = this.allowMultiSelection ? (this.showCheckBox ? this.treeObj.checkedNodes\n                : this.treeObj.selectedNodes) : (this.value ? (this.showCheckBox ? this.value : [this.value[0]]) : null);\n            this.setMultiSelectValue(ddtValue);\n            if (this.showCheckBox && this.value !== null) {\n                this.treeObj.checkedNodes = this.value;\n                this.treeObj.dataBind();\n            }\n        }\n        this.selectedText = [];\n        const checkSelection = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            detach(this.chipWrapper);\n        }\n        const isValid = this.getValidMode();\n        if (isValid && this.value !== null) {\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                removeClass([this.chipWrapper], HIDEICON);\n            }\n        }\n        const isValue = this.value ? (this.value.length ? true : false) : false;\n        if (this.chipWrapper && (this.mode === 'Box' && !isValue)) {\n            addClass([this.chipWrapper], HIDEICON);\n            removeClass([this.inputEle], CHIP_INPUT);\n        }\n        this.updateSelectedValues();\n    }\n    // eslint-disable-next-line\n    getSelectedData(value) {\n        // eslint-disable-next-line\n        let data = null;\n        if (this.isFilteredData) {\n            for (let i = 0; i < this.selectedData.length; i++) {\n                if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                    data = this.selectedData[i];\n                    break;\n                }\n            }\n        }\n        if (isNOU(data)) {\n            if (this.treeSettings.loadOnDemand) {\n                data = this.getNodeData(value);\n            }\n            else {\n                data = this.treeObj.getNode(value);\n            }\n            if (!isNOU(data)) {\n                this.selectedData.push(data);\n            }\n        }\n        return data;\n    }\n    getNodeData(id) {\n        let childItems;\n        if (isNOU(id)) {\n            return childItems;\n        }\n        else if (this.treeDataType === 1) {\n            for (let i = 0, objlen = this.treeItems.length; i < objlen; i++) {\n                let dataId = getValue(this.fields.value, this.treeItems[i]);\n                if (!isNOU(this.treeItems[i]) && !isNOU(dataId) && dataId.toString() === id) {\n                    return this.treeItems[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeData(this.treeItems, this.fields, id);\n        }\n        return childItems;\n    }\n    getChildNodeData(obj, mapper, id) {\n        let newChildItems;\n        if (isNOU(obj)) {\n            return newChildItems;\n        }\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            let dataValue = getValue(mapper.value, obj[i]);\n            if (obj[i] && dataValue && dataValue.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                let childNodeData = getValue(mapper.child, obj[i]);\n                newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);\n                if (newChildItems !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                let child = 'child';\n                newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);\n                if (newChildItems !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newChildItems;\n    }\n    getChildMapperFields(mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    }\n    removeSelectedData(value, muteOnChange) {\n        const selectedValues = isNOU(this.value) ? [] : this.value.slice();\n        selectedValues.splice(selectedValues.indexOf(value), 1);\n        this.setProperties({ value: selectedValues }, muteOnChange);\n        for (let i = 0; i < this.selectedData.length; i++) {\n            if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                this.selectedData.splice(i, 1);\n                break;\n            }\n        }\n    }\n    updateSelectedValues() {\n        this.dataValue = '';\n        let temp;\n        let text;\n        let textValue = '';\n        // eslint-disable-next-line\n        let selectedData;\n        this.hiddenElement.innerHTML = '';\n        let hiddenInputValue = '';\n        if ((!this.isChipDelete || this.treeSettings.autoCheck) && (this.inputWrapper.contains(this.chipWrapper))) {\n            this.chipCollection.innerHTML = '';\n        }\n        if (!this.isFilteredData) {\n            this.selectedData = [];\n        }\n        if (!isNOU(this.value)) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                selectedData = this.getSelectedData(this.value[i]);\n                text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n                this.selectedText.push(text);\n                temp = this.selectedText[this.selectedText.length - 1];\n                if (this.selectedText.length > 1) {\n                    this.dataValue += (this.delimiterChar + ' ' + temp);\n                    textValue += (',' + temp);\n                }\n                else {\n                    this.dataValue += temp;\n                    textValue += temp;\n                }\n                if (this.mode !== 'Custom' && this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) &&\n                    (this.allowMultiSelection || this.showCheckBox)) {\n                    this.setChipValues(temp, this.value[i]);\n                }\n                hiddenInputValue += '<option selected value =\"' + this.value[i] + '\">' +\n                    this.selectedText[this.selectedText.length - 1] + '</option>';\n            }\n            if (this.selectedText.length >= 1) {\n                this.setProperties({ text: textValue }, true);\n            }\n            this.hiddenElement.innerHTML = hiddenInputValue;\n            if (this.mode === 'Custom' && (this.allowMultiSelection || this.showCheckBox)) {\n                this.setTagValues();\n            }\n        }\n        const isValid = this.getValidMode();\n        if (this.mode !== 'Custom' && this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n        Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);\n        if (textValue === '') {\n            this.setProperties({ text: null }, true);\n        }\n        else {\n            this.setProperties({ text: textValue }, true);\n        }\n        if (this.showClearButton && this.inputFocus) {\n            this.showOverAllClear();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {\n            this.popupObj.refreshPosition();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n    }\n    setChipValues(text, value) {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.createChip();\n        }\n        const chip = this.createElement('span', {\n            className: CHIP,\n            attrs: { 'data-value': value }\n        });\n        const chipContent = this.createElement('span', { className: CHIP_CONTENT });\n        const chipClose = this.createElement('span', { className: CHIP_CLOSE + ' ' + ICONS });\n        if (this.enableHtmlSanitizer) {\n            chipContent.innerText = SanitizeHtmlHelper.sanitize(text);\n        }\n        else {\n            chipContent.innerHTML = text;\n        }\n        chip.appendChild(chipContent);\n        this.chipCollection.appendChild(chip);\n        if (this.showClearButton) {\n            chip.appendChild(chipClose);\n            EventHandler.add(chipClose, 'mousedown', this.removeChip, this);\n        }\n    }\n    setTagValues() {\n        if (this.value === null || this.text == null) {\n            return;\n        }\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.createChip();\n        }\n        if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {\n            addClass([this.inputWrapper], SHOW_CHIP);\n        }\n        const chip = this.createElement('span', {\n            className: CHIP,\n        });\n        if (!this.inputEle.classList.contains(CHIP_INPUT)) {\n            addClass([this.inputEle], CHIP_INPUT);\n        }\n        if (this.chipWrapper.classList.contains(HIDEICON)) {\n            removeClass([this.chipWrapper], HIDEICON);\n        }\n        const chipContent = this.createElement('span', { className: CHIP_CONTENT });\n        const template = this.customTemplate;\n        const templateId = this.customTemplateId;\n        const templatestring = 'customTemplate';\n        const compiledString = this.templateComplier(template);\n        let tempArr = compiledString({ 'value': this.value, 'text': this.text }, this, templatestring, templateId, this.isStringTemplate, undefined, chipContent);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, chipContent);\n        }\n        chip.appendChild(chipContent);\n        this.chipCollection.appendChild(chip);\n    }\n    setSelectAllWrapper(state) {\n        if (this.isFirstRender) {\n            return;\n        }\n        if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {\n            this.createSelectAllWrapper();\n            this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n        }\n        else if (this.popupEle.contains(this.checkAllParent)) {\n            detach(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    setHeaderTemplate() {\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], HEADER);\n        }\n        // eslint-disable-next-line\n        const compiledString = this.templateComplier(this.headerTemplate);\n        let tempArr = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, undefined, this.header);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, this.header);\n        }\n        this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);\n    }\n    // eslint-disable-next-line\n    templateComplier(template) {\n        if (template) {\n            // eslint-disable-next-line\n            let e;\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return compile(template);\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        return compile(template);\n    }\n    setFooterTemplate() {\n        if (this.footer) {\n            this.footer.innerHTML = '';\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], FOOTER);\n        }\n        // eslint-disable-next-line\n        const compiledString = this.templateComplier(this.footerTemplate);\n        let tempArr = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, undefined, this.footer);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, this.footer);\n        }\n        append([this.footer], this.popupEle);\n    }\n    clearAll(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.resetValue();\n        this.showOverAllClear();\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            if (this.popupObj) {\n                this.popupObj.refreshPosition();\n            }\n            if (!this.wrapText) {\n                this.updateOverflowWrapper(true);\n            }\n        }\n        if (e) {\n            this.isClearButtonClick = true;\n        }\n        if (!this.changeOnBlur) {\n            this.triggerChangeEvent(e);\n        }\n    }\n    removeChip(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        const element = e.target.parentElement;\n        const value = element.getAttribute('data-value');\n        if (this.chipCollection) {\n            if (element) {\n                remove(element);\n            }\n        }\n        this.isChipDelete = true;\n        this.isClearButtonClick = true;\n        this.removeSelectedData(value, true);\n        this.selectedText = [];\n        if (this.allowMultiSelection) {\n            this.treeObj.selectedNodes = this.value.slice();\n            this.updateSelectedValues();\n        }\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll([value]);\n            this.clearCheckAll();\n            this.setMultiSelect();\n        }\n        this.triggerChangeEvent(e);\n        this.isChipDelete = false;\n        this.ensurePlaceHolder();\n    }\n    resetValue(isDynamicChange) {\n        if (this.value == [] && this.text == null) {\n            return;\n        }\n        Input.setValue(null, this.inputEle, this.floatLabelType);\n        if (!isDynamicChange) {\n            this.oldValue = this.value;\n            this.setProperties({ value: [] }, true);\n        }\n        this.dataValue = null;\n        this.setProperties({ text: null }, true);\n        this.selectedData = [];\n        setValue('selectedNodes', [], this.treeObj);\n        this.hiddenElement.innerHTML = '';\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll();\n            this.setMultiSelect();\n            this.clearCheckAll();\n        }\n        if (this.oldValue === null && !isDynamicChange) {\n            this.removeValue = true;\n        }\n        else if (isDynamicChange) {\n            this.triggerChangeEvent();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            this.chipCollection.innerHTML = '';\n            if (!this.wrapText) {\n                this.updateOverflowWrapper(true);\n            }\n            this.ensurePlaceHolder();\n        }\n    }\n    clearCheckAll() {\n        if (this.showSelectAll && this.value && this.value.length === 0) {\n            this.setLocale(false);\n        }\n    }\n    selectAllItems(state) {\n        if (this.showCheckBox) {\n            if (state) {\n                this.isCheckAllCalled = true;\n                this.treeObj.checkAll();\n            }\n            else {\n                this.treeObj.uncheckAll();\n            }\n            this.checkSelectAll = true;\n        }\n        else if (this.allowMultiSelection) {\n            if (!state) {\n                this.treeObj.selectedNodes = [];\n            }\n            else {\n                const li = selectAll('li', this.treeObj.element);\n                let id;\n                const arr = [];\n                for (let i = 0; i < li.length; i++) {\n                    id = li[i].getAttribute('data-uid').toString();\n                    arr.push(id);\n                }\n                this.treeObj.selectedNodes = arr;\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText) {\n            if (state) {\n                this.updateView();\n            }\n            else {\n                this.updateOverflowWrapper(true);\n            }\n        }\n    }\n    updateTreeSettings(prop) {\n        const value = Object.keys(prop.treeSettings)[0];\n        if (value === 'autoCheck') {\n            this.ensureAutoCheck();\n            this.treeObj.autoCheck = this.treeSettings.autoCheck;\n        }\n        else if (value === 'loadOnDemand') {\n            this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;\n        }\n        else if (value === 'expandOn') {\n            this.treeObj.expandOn = this.treeSettings.expandOn;\n            this.treeObj.dataBind();\n            return;\n        }\n        this.treeObj.dataBind();\n        this.setMultiSelect();\n        this.updateValue(this.value);\n    }\n    updateCheckBoxState(checkBox) {\n        if (this.hasTemplate) {\n            this.updateTemplate();\n        }\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.showCheckBox = checkBox;\n        this.treeObj.dataBind();\n        this.isDynamicChange = true;\n        this.setSelectAllWrapper(this.showSelectAll);\n        if (this.showSelectAll) {\n            this.setLocale();\n        }\n        if (this.showCheckBox) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n        this.isDynamicChange = false;\n    }\n    updateTemplate() {\n        if (this.popupObj) {\n            this.clearTemplate();\n            /* eslint-disable */\n            this.portals = [];\n            /* eslint-enable */\n            this.popupObj.destroy();\n            if (this.isPopupOpen) {\n                this.hidePopup();\n                this.isFirstRender = true;\n                this.renderPopup();\n            }\n            else {\n                this.isFirstRender = true;\n            }\n        }\n    }\n    l10nUpdate(actionFailure) {\n        if (this.noRecord) {\n            this.noRecord.innerHTML = '';\n        }\n        else {\n            this.noRecord = this.createElement('div');\n        }\n        if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {\n            const template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            const templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            const templatestring = actionFailure ? 'actionFailureTemplate' : 'noRecordsTemplate';\n            // eslint-disable-next-line\n            const compiledString = this.templateComplier(template);\n            let tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, undefined, this.noRecord);\n            if (tempArr) {\n                tempArr = Array.prototype.slice.call(tempArr);\n                append(tempArr, this.noRecord);\n            }\n        }\n        else {\n            // eslint-disable-next-line\n            const l10nLocale = { noRecordsTemplate: 'No Records Found', actionFailureTemplate: 'The Request Failed' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            this.noRecord.innerHTML = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n        }\n        addClass([this.noRecord], NODATACONTAINER);\n        prepend([this.noRecord], this.popupDiv);\n    }\n    updateRecordTemplate(action) {\n        if (this.treeItems && this.treeItems.length <= 0) {\n            this.l10nUpdate(action);\n            if (this.hasTemplate) {\n                this.updateTemplate();\n            }\n        }\n    }\n    updateOverflowWrapper(state) {\n        if (!state) {\n            if (!this.inputWrapper.contains(this.overFlowWrapper)) {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n            }\n        }\n        else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {\n            this.overFlowWrapper.innerHTML = '';\n        }\n    }\n    updateMultiSelection(state) {\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.allowMultiSelection = state;\n        this.treeObj.dataBind();\n        this.updateOption();\n        if (this.allowMultiSelection) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n    }\n    updateAllowFiltering(state) {\n        if (!this.isFirstRender) {\n            if (state) {\n                this.renderFilter();\n            }\n            else {\n                this.destroyFilter();\n            }\n        }\n        this.ensureAutoCheck();\n    }\n    updateFilterPlaceHolder() {\n        if (this.filterObj) {\n            this.filterObj.placeholder = this.filterBarPlaceholder;\n            this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);\n        }\n    }\n    updateValue(value) {\n        this.isDynamicChange = true;\n        if (isNOU(value) || value.length === 0) {\n            this.resetValue(true);\n        }\n        else {\n            this.setTreeValue();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n        this.isDynamicChange = false;\n    }\n    updateText(text) {\n        if (isNOU(text)) {\n            this.resetValue();\n        }\n        else {\n            this.setTreeText();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n    }\n    updateModelMode() {\n        const validMode = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (!validMode) {\n            return;\n        }\n        if (!this.wrapText) {\n            const overFlow = select('.' + OVERFLOW_VIEW, this.inputWrapper);\n            if (overFlow) {\n                overFlow.innerHTML = '';\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText && (this.value && this.value.length !== 0)) {\n            this.updateOverFlowView();\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.mode === 'Box') {\n                removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n            else {\n                addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n        }\n    }\n    updateOption() {\n        if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {\n            this.hiddenElement.setAttribute('multiple', '');\n        }\n        else if (this.hiddenElement.hasAttribute('multiple') && (!this.allowMultiSelection && !this.showCheckBox)) {\n            this.hiddenElement.removeAttribute('multiple');\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     *\n     * @param {DropDownTreeModel} newProp - specifies the newProp value.\n     * @param {DropDownTreeModel} oldProp - specifies the newProp value.\n     * @returns {void}\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputEle);\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL(this.enableRtl);\n                    break;\n                case 'fields':\n                    this.setFields();\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.inputEle);\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);\n                    this.ensureClearIconPosition(newProp.floatLabelType);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'allowFiltering':\n                    this.updateAllowFiltering(newProp.allowFiltering);\n                    break;\n                case 'filterBarPlaceholder':\n                    this.updateFilterPlaceHolder();\n                    break;\n                case 'value':\n                    this.oldValue = oldProp.value;\n                    this.updateValue(newProp.value);\n                    break;\n                case 'text':\n                    this.updateText(newProp.text);\n                    break;\n                case 'allowMultiSelection':\n                    this.updateMultiSelection(newProp.allowMultiSelection);\n                    break;\n                case 'mode':\n                    if (!this.showCheckBox && !this.allowMultiSelection) {\n                        return;\n                    }\n                    if (this.mode === 'Custom') {\n                        if (this.overFlowWrapper) {\n                            detach(this.overFlowWrapper);\n                        }\n                        if (this.chipWrapper) {\n                            detach(this.chipWrapper);\n                        }\n                        this.setTagValues();\n                    }\n                    else {\n                        if (oldProp.mode === 'Custom') {\n                            this.updateOverflowWrapper(this.wrapText);\n                        }\n                        this.updateModelMode();\n                    }\n                    break;\n                case 'delimiterChar':\n                    if (this.mode === 'Box') {\n                        return;\n                    }\n                    if (this.showCheckBox || this.allowMultiSelection) {\n                        this.setMultiSelect();\n                    }\n                    break;\n                case 'selectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale();\n                    }\n                    break;\n                case 'unSelectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale(false);\n                    }\n                    break;\n                case 'showSelectAll':\n                    if (this.showCheckBox) {\n                        this.setSelectAllWrapper(newProp.showSelectAll);\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'showCheckBox':\n                    this.updateCheckBoxState(newProp.showCheckBox);\n                    if (!this.wrapText) {\n                        this.updateOverflowWrapper(true);\n                    }\n                    this.updatePopupHeight();\n                    this.updateOption();\n                    break;\n                case 'treeSettings':\n                    this.updateTreeSettings(newProp);\n                    break;\n                case 'customTemplate':\n                    if (this.mode !== \"Custom\") {\n                        return;\n                    }\n                    this.chipCollection.innerHTML = \"\";\n                    this.setTagValues();\n                    break;\n                case 'sortOrder':\n                    if (this.hasTemplate) {\n                        this.updateTemplate();\n                    }\n                    this.treeObj.sortOrder = newProp.sortOrder;\n                    this.treeObj.dataBind();\n                    this.updateValue(this.value);\n                    break;\n                case 'showDropDownIcon':\n                    this.updateDropDownIconState(newProp.showDropDownIcon);\n                    break;\n                case 'popupWidth':\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'popupHeight':\n                    if (this.popupObj) {\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'zIndex':\n                    if (this.popupObj) {\n                        this.popupObj.zIndex = newProp.zIndex;\n                        this.popupObj.dataBind();\n                    }\n                    break;\n                case 'headerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'footerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'itemTemplate':\n                    this.updateTemplate();\n                    this.treeObj.nodeTemplate = newProp.itemTemplate;\n                    this.treeObj.dataBind();\n                    break;\n                case 'noRecordsTemplate':\n                    this.updateRecordTemplate();\n                    break;\n                case 'actionFailureTemplate':\n                    this.updateRecordTemplate(true);\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'wrapText':\n                    this.updateOverflowWrapper(this.wrapText);\n                    if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                        this.updateView();\n                    }\n                    else {\n                        addClass([this.overFlowWrapper], HIDEICON);\n                        if (this.chipWrapper && this.mode === 'Box') {\n                            removeClass([this.chipWrapper], HIDEICON);\n                        }\n                        else {\n                            removeClass([this.inputWrapper], SHOW_CHIP);\n                            removeClass([this.inputEle], CHIP_INPUT);\n                        }\n                        this.ensurePlaceHolder();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Allows you to clear the selected values from the Dropdown Tree component.\n     *\n     * @method clear\n     * @returns {void}\n     */\n    clear() {\n        this.clearAll();\n        if (this.inputFocus) {\n            this.onFocusOut();\n        }\n        else {\n            if (this.changeOnBlur) {\n                this.triggerChangeEvent();\n            }\n            this.removeValue = false;\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    destroy() {\n        this.clearTemplate();\n        this.unWireEvents();\n        this.setCssClass(null, this.cssClass);\n        this.setProperties({ text: null }, true);\n        this.treeObj.destroy();\n        this.destroyFilter();\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            detach(this.popupObj.element);\n        }\n        if (this.element.tagName !== this.getDirective()) {\n            this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);\n        }\n        Input.setValue(null, this.inputEle, this.floatLabelType);\n        detach(this.inputWrapper);\n        detach(this.popupDiv);\n        detach(this.hiddenElement);\n        this.element.classList.remove('e-input');\n        if (this.showCheckBox || this.allowMultiSelection) {\n            this.element.classList.remove(CHIP_INPUT);\n        }\n        this.inputObj = null;\n        while (this.hiddenElement.options.length > 0) {\n            this.hiddenElement.remove(0);\n        }\n        this.hiddenElement.innerHTML = '';\n        this.hiddenElement = null;\n        this.inputWrapper = null;\n        this.popupDiv = null;\n        this.tree = null;\n        this.popupObj = null;\n        this.treeObj = null;\n        this.overAllClear = null;\n        this.chipWrapper = null;\n        this.chipCollection = null;\n        this.checkAllParent = null;\n        this.selectAllSpan = null;\n        this.checkBoxElement = null;\n        this.checkWrapper = null;\n        this.popupEle = null;\n        this.header = null;\n        this.footer = null;\n        this.overFlowWrapper = null;\n        this.keyboardModule = null;\n        super.destroy();\n        this.setProperties({ value: [] }, true);\n    }\n    destroyFilter() {\n        if (this.filterObj) {\n            this.filterObj.destroy();\n            detach(this.filterObj.element);\n            detach(this.filterContainer);\n            this.filterObj = null;\n        }\n    }\n    /**\n     * Ensures visibility of the Dropdown Tree item by using item value or item element.\n     * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property\n     * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.\n     *\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n     * @returns {void}\n     */\n    ensureVisible(item) {\n        this.treeObj.ensureVisible(item);\n    }\n    /**\n     * To get the updated data source of the Dropdown Tree.\n     *\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element\n     * @returns {'{[key: string]: Object }[]'} - returns the updated data source of the Dropdown Tree.\n     */\n    // eslint-disable-next-line\n    getData(item) {\n        return this.treeObj.getTreeData(item);\n    }\n    /**\n     * Close the Dropdown tree pop-up.\n     *\n     * @returns {void}\n     */\n    hidePopup() {\n        const eventArgs = { popup: this.popupObj };\n        this.inputWrapper.classList.remove(ICONANIMATION);\n        if (this.popupEle) {\n            addClass([this.popupEle], DDTHIDEICON);\n        }\n        attributes(this.inputWrapper, { 'aria-expanded': 'false' });\n        if (this.popupObj && this.isPopupOpen) {\n            this.popupObj.hide();\n            if (this.inputFocus) {\n                this.inputWrapper.focus();\n                if (this.allowFiltering) {\n                    addClass([this.inputWrapper], [INPUTFOCUS]);\n                }\n            }\n            this.trigger('close', eventArgs);\n        }\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected or deselected.\n     *\n     * @param {boolean} state - Unselects/Selects entire Dropdown Tree items.\n     * @returns {void}\n     *\n     */\n    selectAll(state) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Opens the popup that displays the Dropdown Tree items.\n     *\n     * @returns {void}\n     */\n    showPopup() {\n        if (!this.enabled || this.readonly || this.isPopupOpen) {\n            return;\n        }\n        this.renderPopup();\n        this.focusIn();\n    }\n    /**\n     * Return the module name.\n     *\n     * @private\n     * @returns {string} - returns the module name.\n     */\n    getModuleName() {\n        return 'dropdowntree';\n    }\n};\n__decorate([\n    Property('The Request Failed')\n], DropDownTree.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"allowMultiSelection\", void 0);\n__decorate([\n    Property(true)\n], DropDownTree.prototype, \"changeOnBlur\", void 0);\n__decorate([\n    Property('')\n], DropDownTree.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(\"${value.length} item(s) selected\")\n], DropDownTree.prototype, \"customTemplate\", void 0);\n__decorate([\n    Property(',')\n], DropDownTree.prototype, \"delimiterChar\", void 0);\n__decorate([\n    Property(true)\n], DropDownTree.prototype, \"enabled\", void 0);\n__decorate([\n    Complex({}, Fields)\n], DropDownTree.prototype, \"fields\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Property('StartsWith')\n], DropDownTree.prototype, \"filterType\", void 0);\n__decorate([\n    Property('Never')\n], DropDownTree.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"footerTemplate\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Property(true)\n], DropDownTree.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property({})\n], DropDownTree.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property('Default')\n], DropDownTree.prototype, \"mode\", void 0);\n__decorate([\n    Property('No Records Found')\n], DropDownTree.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"placeholder\", void 0);\n__decorate([\n    Property('300px')\n], DropDownTree.prototype, \"popupHeight\", void 0);\n__decorate([\n    Property('100%')\n], DropDownTree.prototype, \"popupWidth\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"readonly\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"showSelectAll\", void 0);\n__decorate([\n    Property('Select All')\n], DropDownTree.prototype, \"selectAllText\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"showCheckBox\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Property(true)\n], DropDownTree.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(true)\n], DropDownTree.prototype, \"showDropDownIcon\", void 0);\n__decorate([\n    Property('None')\n], DropDownTree.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"text\", void 0);\n__decorate([\n    Complex({}, TreeSettings)\n], DropDownTree.prototype, \"treeSettings\", void 0);\n__decorate([\n    Property('Unselect All')\n], DropDownTree.prototype, \"unSelectAllText\", void 0);\n__decorate([\n    Property(null)\n], DropDownTree.prototype, \"value\", void 0);\n__decorate([\n    Property('100%')\n], DropDownTree.prototype, \"width\", void 0);\n__decorate([\n    Property(1000)\n], DropDownTree.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], DropDownTree.prototype, \"wrapText\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"actionFailure\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"beforeOpen\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"blur\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"dataBound\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"destroyed\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"filtering\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"focus\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"keyPress\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], DropDownTree.prototype, \"select\", void 0);\nDropDownTree = __decorate([\n    NotifyPropertyChanges\n], DropDownTree);\nexport { DropDownTree };\n","/**\n * export all modules from current location\n */\nexport * from './drop-down-tree';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>\nimport { EventHandler, Property, Event, addClass, Browser, removeClass, detach } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, NotifyPropertyChanges, getValue, setValue } from '@syncfusion/ej2-base';\nimport { DropDownList, dropDownListClasses } from '../drop-down-list/drop-down-list';\nimport { Search } from '../common/incremental-search';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nconst SPINNER_CLASS = 'e-atc-spinner-icon';\ndropDownListClasses.root = 'e-combobox';\nconst inputObject = {\n    container: null,\n    buttons: []\n};\n/**\n * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n *   let games:ComboBox = new ComboBox();\n *   games.appendTo(\"#list\");\n * ```\n */\nlet ComboBox = class ComboBox extends DropDownList {\n    /**\n     * *Constructor for creating the component\n     *\n     * @param {ComboBoxModel} options - Specifies the ComboBox model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     * @returns {void}\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'combo-box';\n    }\n    wireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);\n            EventHandler.add(this.inputWrapper.container, 'blur', this.onBlurHandler, this);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);\n        }\n        EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);\n        if (!this.readonly) {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n            EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n            EventHandler.add(window, 'resize', this.windowResize, this);\n        }\n        this.bindCommonEvent();\n    }\n    preventBlur(e) {\n        if ((!this.allowFiltering && document.activeElement !== this.inputElement &&\n            !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice)) {\n            e.preventDefault();\n        }\n    }\n    onBlurHandler(e) {\n        const inputValue = this.inputElement && this.inputElement.value === '' ?\n            null : this.inputElement && this.inputElement.value;\n        if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {\n            this.customValue(e);\n        }\n        super.onBlurHandler(e);\n    }\n    targetElement() {\n        return this.inputElement;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setOldText(text) {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.customValue();\n        this.removeSelection();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setOldValue(value) {\n        if (this.allowCustom) {\n            this.valueMuteChange(this.value);\n        }\n        else {\n            this.valueMuteChange(null);\n        }\n        this.removeSelection();\n        this.setHiddenValue();\n    }\n    valueMuteChange(value) {\n        const inputValue = isNullOrUndefined(value) ? null : value.toString();\n        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.setProperties({ value: value, text: value, index: null }, true);\n        this.activeIndex = this.index;\n        const fields = this.fields;\n        const dataItem = {};\n        dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();\n        dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();\n        this.itemData = dataItem;\n        this.item = null;\n        if (this.previousValue !== this.value) {\n            this.detachChangeEvent(null);\n        }\n    }\n    updateValues() {\n        if (!isNullOrUndefined(this.value)) {\n            const li = this.getElementByValue(this.value);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else if (this.allowCustom) {\n                this.valueMuteChange(this.value);\n            }\n            else {\n                this.valueMuteChange(null);\n            }\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            const li = this.getElementByText(this.text);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else {\n                Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.customValue();\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement && this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    getAriaAttributes() {\n        const ariaAttributes = {\n            'role': 'combobox',\n            'aria-autocomplete': 'both',\n            'aria-labelledby': this.hiddenElement.id,\n            'aria-expanded': 'false',\n            'aria-readonly': this.readonly.toString(),\n            'autocomplete': 'off',\n            'autocapitalize': 'off',\n            'spellcheck': 'false'\n        };\n        return ariaAttributes;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        if (this.isFiltering()) {\n            super.searchLists(e);\n            if (this.ulElement && this.filterInput.value.trim() === '') {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n        }\n        else {\n            if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n            this.incrementalSearch(e);\n        }\n    }\n    getNgDirective() {\n        return 'EJS-COMBOBOX';\n    }\n    setSearchBox() {\n        this.filterInput = this.inputElement;\n        let searchBoxContainer = (this.isFiltering() || (this.isReact && this.getModuleName() === 'combobox')) ? this.inputWrapper : inputObject;\n        return searchBoxContainer;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onActionComplete(ulElement, list, e, isUpdated) {\n        super.onActionComplete(ulElement, list, e);\n        if (this.isSelectCustom) {\n            this.removeSelection();\n        }\n        if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {\n            setTimeout(() => {\n                this.inlineSearch();\n            });\n        }\n    }\n    getFocusElement() {\n        const dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n        const selected = !isNullOrUndefined(this.list) ? this.list.querySelector('.' + dropDownListClasses.selected) : this.list;\n        const isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);\n        if (isSelected) {\n            return selected;\n        }\n        if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) &&\n            !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {\n            const inputValue = this.inputElement.value;\n            const dataSource = this.sortedData;\n            const type = this.typeOfData(dataSource).typeof;\n            const activeItem = Search(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type);\n            const activeElement = activeItem.item;\n            if (!isNullOrUndefined(activeElement)) {\n                const count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;\n                const height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n                if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {\n                    this.removeFocus();\n                    const fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;\n                    if (!this.enableVirtualization) {\n                        this.list.scrollTop = count * height + fixedHead;\n                    }\n                    addClass([activeElement], dropDownListClasses.focus);\n                }\n            }\n            else {\n                if (this.isSelectCustom && this.inputElement.value.trim() !== '') {\n                    this.removeFocus();\n                    if (!this.enableVirtualization) {\n                        this.list.scrollTop = 0;\n                    }\n                }\n            }\n            return activeElement;\n        }\n        else {\n            return null;\n        }\n    }\n    setValue(e) {\n        if (e && e.type === 'keydown' && e.action === 'enter') {\n            this.removeFillSelection();\n        }\n        if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {\n            this.preventAutoFill = false;\n            this.inlineSearch(e);\n            return false;\n        }\n        else {\n            return super.setValue(e);\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        const dataItem = this.getItemData();\n        if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {\n            this.setProperties({ 'value': dataItem.value }, !this.allowCustom);\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = (this.getModuleName() === 'autocomplete') ? (this.inputWrapper.buttons[0] ||\n                this.inputWrapper.clearButton ||\n                Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement)) :\n                (this.inputWrapper.buttons[0] || this.inputWrapper.clearButton);\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    setAutoFill(activeElement, isHover) {\n        if (!isHover) {\n            this.setHoverList(activeElement);\n        }\n        if (this.autofill && !this.preventAutoFill) {\n            const currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();\n            const currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n            if (this.getModuleName() === 'combobox') {\n                if (!this.isSelected && this.previousValue !== currentFillValue) {\n                    this.updateSelectedItem(activeElement, null);\n                    this.isSelected = true;\n                    this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                }\n                else {\n                    this.updateSelectedItem(activeElement, null, true);\n                }\n            }\n            if (!this.isAndroidAutoFill(currentValue)) {\n                this.setAutoFillSelection(currentValue, isHover);\n            }\n        }\n    }\n    isAndroidAutoFill(value) {\n        if (Browser.isAndroid) {\n            const currentPoints = this.getSelectionPoints();\n            const prevEnd = this.prevSelectPoints.end;\n            const curEnd = currentPoints.end;\n            const prevStart = this.prevSelectPoints.start;\n            const curStart = currentPoints.start;\n            if (prevEnd !== 0 && ((prevEnd === value.length && prevStart === value.length) ||\n                (prevStart > curStart && prevEnd > curEnd) || (prevEnd === curEnd && prevStart === curStart))) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n        }\n        if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {\n            this.searchLists(e);\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    inlineSearch(e) {\n        const isKeyNavigate = (e && (e.action === 'down' || e.action === 'up' ||\n            e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown'));\n        const activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();\n        if (!isNullOrUndefined(activeElement)) {\n            if (!isKeyNavigate) {\n                const value = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                this.activeIndex = this.getIndexByValue(value);\n                this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;\n            }\n            this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;\n            this.setAutoFill(activeElement, isKeyNavigate);\n        }\n        else if (this.inputElement.value === '') {\n            this.activeIndex = null;\n            if (!isNullOrUndefined(this.list)) {\n                if (!this.enableVirtualization) {\n                    this.list.scrollTop = 0;\n                }\n                const focusItem = this.list.querySelector('.' + dropDownListClasses.li);\n                this.setHoverList(focusItem);\n            }\n        }\n        else {\n            this.activeIndex = null;\n            this.removeSelection();\n            if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {\n                this.removeFocus();\n            }\n        }\n    }\n    incrementalSearch(e) {\n        this.showPopup(e);\n        if (!isNullOrUndefined(this.listData)) {\n            this.inlineSearch(e);\n            e.preventDefault();\n        }\n    }\n    setAutoFillSelection(currentValue, isKeyNavigate = false) {\n        const selection = this.getSelectionPoints();\n        const value = this.inputElement.value.substr(0, selection.start);\n        if (value && (value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase())) {\n            const inputValue = value + currentValue.substr(value.length, currentValue.length);\n            Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);\n        }\n        else if (isKeyNavigate) {\n            Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n        }\n    }\n    getValueByText(text) {\n        return super.getValueByText(text, true, this.ignoreAccent);\n    }\n    unWireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);\n            EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlurHandler);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);\n        }\n        if (this.inputElement) {\n            EventHandler.remove(this.inputElement, 'focus', this.targetFocus);\n            if (!this.readonly) {\n                EventHandler.remove(this.inputElement, 'input', this.onInput);\n                EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n                EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n                EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n                EventHandler.remove(window, 'resize', this.windowResize);\n            }\n        }\n        this.unBindCommonEvent();\n    }\n    setSelection(li, e) {\n        super.setSelection(li, e);\n        if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {\n            this.removeFocus();\n        }\n    }\n    selectCurrentItem(e) {\n        let li;\n        if (this.isPopupOpen) {\n            if (this.isSelected) {\n                li = this.list.querySelector('.' + dropDownListClasses.selected);\n            }\n            else {\n                li = this.list.querySelector('.' + dropDownListClasses.focus);\n            }\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n        }\n        if (e.action === 'enter' && this.inputElement.value.trim() === '') {\n            this.clearAll(e);\n        }\n        else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {\n            this.customValue(e);\n        }\n        this.hidePopup(e);\n    }\n    setHoverList(li) {\n        this.removeSelection();\n        if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {\n            this.removeFocus();\n            li.classList.add(dropDownListClasses.focus);\n        }\n    }\n    targetFocus(e) {\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = false;\n        }\n        this.onFocus(e);\n        Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n    }\n    dropDownClick(e) {\n        e.preventDefault();\n        if (Browser.isDevice && !this.isFiltering()) {\n            this.preventFocus = true;\n        }\n        super.dropDownClick(e);\n    }\n    customValue(e) {\n        const value = this.getValueByText(this.inputElement.value);\n        if (!this.allowCustom && this.inputElement.value !== '') {\n            const previousValue = this.previousValue;\n            const currentValue = this.value;\n            this.setProperties({ value: value });\n            if (isNullOrUndefined(this.value)) {\n                Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            if (this.autofill && previousValue === this.value && currentValue !== this.value) {\n                this.onChangeEvent(null);\n            }\n        }\n        else if (this.inputElement.value.trim() !== '') {\n            const previousValue = this.value;\n            if (isNullOrUndefined(value)) {\n                const value = this.inputElement.value === '' ? null : this.inputElement.value;\n                // eslint-disable-next-line max-len\n                const eventArgs = { text: value, item: {} };\n                if (!this.initial) {\n                    this.trigger('customValueSpecifier', eventArgs, (eventArgs) => {\n                        this.updateCustomValueCallback(value, eventArgs, previousValue, e);\n                    });\n                }\n                else {\n                    this.updateCustomValueCallback(value, eventArgs, previousValue);\n                }\n            }\n            else {\n                this.isSelectCustom = false;\n                this.setProperties({ value: value });\n                if (previousValue !== this.value) {\n                    this.onChangeEvent(e);\n                }\n            }\n        }\n        else if (this.allowCustom) {\n            this.isSelectCustom = true;\n        }\n    }\n    updateCustomValueCallback(value, eventArgs, previousValue, e) {\n        const fields = this.fields;\n        const item = eventArgs.item;\n        let dataItem = {};\n        if (item && getValue(fields.text, item) && getValue(fields.value, item)) {\n            dataItem = item;\n        }\n        else {\n            setValue(fields.text, value, dataItem);\n            setValue(fields.value, value, dataItem);\n        }\n        this.itemData = dataItem;\n        const changeData = {\n            text: getValue(fields.text, this.itemData),\n            value: getValue(fields.value, this.itemData),\n            index: null\n        };\n        this.setProperties(changeData, true);\n        this.setSelection(null, null);\n        this.isSelectCustom = true;\n        if (previousValue !== this.value) {\n            this.onChangeEvent(e);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     *\n     * @param {ComboBoxModel} newProp - Returns the dynamic property value of the component.\n     * @param {ComboBoxModel} oldProp - Returns the previous property value of the component.\n     * @private\n     * @returns {void}\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'combobox') {\n            this.checkData(newProp);\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.inputElement);\n                    if (this.readonly) {\n                        EventHandler.remove(this.inputElement, 'input', this.onInput);\n                        EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n                        EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n                    }\n                    else {\n                        EventHandler.add(this.inputElement, 'input', this.onInput, this);\n                        EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n                        EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n                    }\n                    this.setReadOnly();\n                    break;\n                case 'allowFiltering':\n                    this.setSearchBox();\n                    if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n                        super.renderList();\n                    }\n                    break;\n                case 'allowCustom':\n                    break;\n                default: {\n                    // eslint-disable-next-line max-len\n                    const comboProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(comboProps.newProperty, comboProps.oldProperty);\n                    if (this.isFiltering() && prop === 'dataSource' && isNullOrUndefined(this.list) && this.itemTemplate &&\n                        this.getModuleName() === 'combobox') {\n                        super.renderList();\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * To initialize the control rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        super.render();\n        this.setSearchBox();\n        if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n            super.renderList();\n        }\n        this.renderComplete();\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'combobox';\n    }\n    /**\n     * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     *\n     * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @returns {void}\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * To filter the data from given data source by using query\n     *\n     * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param {Query} query - Specify the query to filter the data.\n     * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        super.filter(dataSource, query, fields);\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Opens the popup that displays the list of items.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    showPopup(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        super.showPopup(e);\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Hides the popup if it is in open state.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    hidePopup(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        const inputValue = this.inputElement && this.inputElement.value === '' ? null\n            : this.inputElement && this.inputElement.value;\n        if (!isNullOrUndefined(this.listData)) {\n            const isEscape = this.isEscapeKey;\n            if (this.isEscapeKey) {\n                Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.isEscapeKey = false;\n            }\n            if (this.autofill) {\n                this.removeFillSelection();\n            }\n            const dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n            const selected = !isNullOrUndefined(this.list) ? this.list.querySelector('.' + dropDownListClasses.selected) : null;\n            if (this.inputElement && dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {\n                if (this.isSelected) {\n                    this.onChangeEvent(e);\n                    this.isSelectCustom = false;\n                }\n                super.hidePopup(e);\n                return;\n            }\n            if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {\n                const dataSource = this.sortedData;\n                const type = this.typeOfData(dataSource).typeof;\n                const searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true, dataSource, this.fields, type);\n                this.selectedLI = searchItem.item;\n                if (isNullOrUndefined(searchItem.index)) {\n                    searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true, dataSource, this.fields, type).index;\n                }\n                this.activeIndex = searchItem.index;\n                if (!isNullOrUndefined(this.selectedLI)) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                }\n                else if (isEscape) {\n                    this.isSelectCustom = true;\n                    this.removeSelection();\n                }\n            }\n            if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {\n                this.customValue(e);\n            }\n        }\n        if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {\n            this.customValue();\n        }\n        super.hidePopup(e);\n    }\n    /**\n     * Sets the focus to the component for interaction.\n     *\n     * @returns {void}\n     */\n    focusIn() {\n        if (!this.enabled) {\n            return;\n        }\n        if (Browser.isDevice && !this.isFiltering()) {\n            this.preventFocus = true;\n        }\n        super.focusIn();\n    }\n    /**\n     * Allows you to clear the selected values from the component.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    clear() {\n        this.value = null;\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Moves the focus from the component if the component is already focused.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    focusOut(e) {\n        /* eslint-enable valid-jsdoc, jsdoc/require-param */\n        super.focusOut(e);\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n    /**\n     * Gets all the list items bound on this component.\n     *\n     * @returns {Element[]}\n     * @deprecated\n     */\n    getItems() {\n        return super.getItems();\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     *\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns {Object}\n     * @deprecated\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n    renderHightSearch() {\n        // update high light search\n    }\n};\n__decorate([\n    Property(false)\n], ComboBox.prototype, \"autofill\", void 0);\n__decorate([\n    Property(true)\n], ComboBox.prototype, \"allowCustom\", void 0);\n__decorate([\n    Property({})\n], ComboBox.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(false)\n], ComboBox.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"query\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"index\", void 0);\n__decorate([\n    Property(true)\n], ComboBox.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(false)\n], ComboBox.prototype, \"enableRtl\", void 0);\n__decorate([\n    Event()\n], ComboBox.prototype, \"customValueSpecifier\", void 0);\n__decorate([\n    Event()\n], ComboBox.prototype, \"filtering\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"valueTemplate\", void 0);\n__decorate([\n    Property('Never')\n], ComboBox.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"footerTemplate\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"placeholder\", void 0);\n__decorate([\n    Property('100%')\n], ComboBox.prototype, \"width\", void 0);\n__decorate([\n    Property('300px')\n], ComboBox.prototype, \"popupHeight\", void 0);\n__decorate([\n    Property('100%')\n], ComboBox.prototype, \"popupWidth\", void 0);\n__decorate([\n    Property(false)\n], ComboBox.prototype, \"readonly\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"text\", void 0);\n__decorate([\n    Property(null)\n], ComboBox.prototype, \"value\", void 0);\nComboBox = __decorate([\n    NotifyPropertyChanges\n], ComboBox);\nexport { ComboBox };\n","/**\n * export all modules from current location\n */\nexport * from './combo-box';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../combo-box/combo-box-model.d.ts'/>\nimport { Property, EventHandler, isNullOrUndefined, detach } from '@syncfusion/ej2-base';\nimport { Event, Complex } from '@syncfusion/ej2-base';\nimport { removeClass, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { dropDownListClasses } from '../drop-down-list/drop-down-list';\nimport { ComboBox } from '../combo-box/combo-box';\nimport { highlightSearch, revertHighlightSearch } from '../common/highlight-search';\nimport { Search } from '../common/incremental-search';\nimport { FieldSettings } from '../drop-down-base/drop-down-base';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\ndropDownListClasses.root = 'e-autocomplete';\ndropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';\n/**\n * The AutoComplete component provides the matched suggestion list when type into the input,\n * from which the user can select one.\n * ```html\n * <input id=\"list\" type=\"text\"/>\n * ```\n * ```typescript\n *   let atcObj:AutoComplete = new AutoComplete();\n *   atcObj.appendTo(\"#list\");\n * ```\n */\nlet AutoComplete = class AutoComplete extends ComboBox {\n    /**\n     * * Constructor for creating the widget\n     *\n     * @param {AutoCompleteModel} options - Specifies the AutoComplete model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFiltered = false;\n        this.searchList = false;\n    }\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     * @returns {void}\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'auto-complete';\n    }\n    getNgDirective() {\n        return 'EJS-AUTOCOMPLETE';\n    }\n    getQuery(query) {\n        const filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        const filterType = (this.queryString === '' && !isNullOrUndefined(this.value)) ? 'equal' : this.filterType;\n        const queryString = (this.queryString === '' && !isNullOrUndefined(this.value)) ? this.value : this.queryString;\n        if (this.isFiltered) {\n            return filterQuery;\n        }\n        if (this.queryString !== null && this.queryString !== '') {\n            const dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                const mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : '';\n                filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        if (!isNullOrUndefined(this.suggestionCount) && !this.enableVirtualization) {\n            // Since defualt value of suggestioncount is 20, checked the condition\n            if (this.suggestionCount !== 20) {\n                for (let queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n                    if (filterQuery.queries[queryElements].fn === 'onTake') {\n                        filterQuery.queries.splice(queryElements, 1);\n                    }\n                }\n            }\n            filterQuery.take(this.suggestionCount);\n        }\n        if (this.enableVirtualization) {\n            var takeValue = this.getTakeValue();\n            filterQuery.skip(this.virtualItemStartIndex);\n            filterQuery.take(takeValue);\n            filterQuery.requiresCount();\n        }\n        return filterQuery;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.isDataFetched = this.isSelectCustom = false;\n        this.checkAndResetCache();\n        if (isNullOrUndefined(this.list)) {\n            super.renderList(e, true);\n        }\n        this.queryString = this.filterInput.value;\n        if (e.type !== 'mousedown' && (e.keyCode === 40 || e.keyCode === 38)) {\n            this.queryString = this.queryString === '' ? null : this.queryString;\n            this.beforePopupOpen = true;\n            this.resetList(this.dataSource, this.fields, null, e);\n            return;\n        }\n        this.isSelected = false;\n        this.activeIndex = null;\n        const eventArgs = {\n            preventDefaultAction: false,\n            text: this.filterInput.value,\n            updateData: (dataSource, query, fields) => {\n                if (eventArgs.cancel) {\n                    return;\n                }\n                this.isFiltered = true;\n                this.filterAction(dataSource, query, fields);\n            },\n            cancel: false\n        };\n        this.trigger('filtering', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel && !this.isFiltered && !eventArgs.preventDefaultAction) {\n                this.searchList = true;\n                this.filterAction(this.dataSource, null, this.fields, e);\n            }\n        });\n    }\n    /**\n     * To filter the data from given data source by using query\n     *\n     * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param {Query} query - Specify the query to filter the data.\n     * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.filterAction(dataSource, query, fields);\n    }\n    filterAction(dataSource, query, fields, e) {\n        this.beforePopupOpen = true;\n        let isNoDataElement = this.list.classList.contains('e-nodata');\n        if (this.queryString !== '' && (this.queryString.length >= this.minLength)) {\n            if (this.enableVirtualization && this.isFiltering() && this.isTyped) {\n                this.isPreventScrollAction = true;\n                this.list.scrollTop = 0;\n                this.previousStartIndex = 0;\n                this.virtualListInfo = null;\n            }\n            this.resetList(dataSource, fields, query, e);\n            if (this.enableVirtualization && isNoDataElement && !this.list.classList.contains('e-nodata')) {\n                if (!this.list.querySelector('.e-virtual-ddl-content')) {\n                    this.list.appendChild(this.createElement('div', {\n                        className: 'e-virtual-ddl-content',\n                        styles: this.getTransformValues()\n                    })).appendChild(this.list.querySelector('.e-list-parent'));\n                }\n                if (!this.list.querySelector('.e-virtual-ddl')) {\n                    var virualElement = this.createElement('div', {\n                        id: this.element.id + '_popup', className: 'e-virtual-ddl', styles: this.GetVirtualTrackHeight()\n                    });\n                    document.getElementsByClassName('e-popup')[0].querySelector('.e-dropdownbase').appendChild(virualElement);\n                }\n            }\n            if (this.enableVirtualization) {\n                this.getFilteringSkeletonCount();\n            }\n        }\n        else {\n            this.hidePopup(e);\n            this.beforePopupOpen = false;\n        }\n        this.renderReactTemplates();\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n            this.checkAndResetCache();\n        }\n        if (this.beforePopupOpen) {\n            this.hidePopup();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onActionComplete(ulElement, list, e, isUpdated) {\n        this.fixedHeaderElement = null;\n        super.onActionComplete(ulElement, list, e);\n        const item = this.list.querySelector('.' + dropDownListClasses.li);\n        if (!isNullOrUndefined(item)) {\n            removeClass([item], dropDownListClasses.focus);\n        }\n        this.postBackAction();\n    }\n    postBackAction() {\n        if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {\n            const items = [this.liCollections[0]];\n            const dataSource = this.listData;\n            const type = this.typeOfData(dataSource).typeof;\n            const searchItem = Search(this.inputElement.value, items, 'StartsWith', this.ignoreCase, dataSource, this.fields, type);\n            this.searchList = false;\n            if (!isNullOrUndefined(searchItem.item)) {\n                super.setAutoFill(this.liCollections[0], true);\n            }\n        }\n    }\n    setSelection(li, e) {\n        if (!this.isValidLI(li)) {\n            this.selectedLI = li;\n            return;\n        }\n        if (!isNullOrUndefined(e) && e.type === 'keydown' && e.action !== 'enter'\n            && e.action !== 'tab' && this.isValidLI(li)) {\n            const value = this.getFormattedValue(li.getAttribute('data-value'));\n            this.activeIndex = this.getIndexByValue(value);\n            this.setHoverList(li);\n            this.selectedLI = li;\n            this.setScrollPosition(e);\n            if (this.autofill && this.isPopupOpen) {\n                this.preventAutoFill = false;\n                const isKeyNavigate = (e && e.action === 'down' || e.action === 'up' ||\n                    e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown');\n                super.setAutoFill(li, isKeyNavigate);\n            }\n        }\n        else {\n            super.setSelection(li, e);\n        }\n    }\n    listOption(dataSource, fieldsSettings) {\n        const fields = super.listOption(dataSource, fieldsSettings);\n        if (isNullOrUndefined(fields.itemCreated)) {\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    if (this.element.tagName === this.getNgDirective() && this.itemTemplate) {\n                        setTimeout(() => {\n                            highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                        }, 0);\n                    }\n                    else {\n                        highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                    }\n                }\n            };\n        }\n        else {\n            const itemCreated = fields.itemCreated;\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                }\n                itemCreated.apply(this, [e]);\n            };\n        }\n        return fields;\n    }\n    isFiltering() {\n        return true;\n    }\n    renderPopup(e) {\n        if (!this.enableVirtualization) {\n            this.list.scrollTop = 0;\n        }\n        super.renderPopup(e);\n    }\n    isEditTextBox() {\n        return true && this.inputElement.value.trim() !== '';\n    }\n    isPopupButton() {\n        return this.showPopupButton;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSelectFocusItem(element) {\n        return false;\n    }\n    setInputValue(newProp, oldProp) {\n        let oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;\n        let value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;\n        if (value && this.typedString === '' && !this.allowCustom && !(this.dataSource instanceof DataManager)) {\n            let checkFields_1 = this.typeOfData(this.dataSource).typeof === 'string' ? '' : this.fields.value;\n            const listLength = this.getItems().length;\n            let query = new Query();\n            let _this = this;\n            new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields_1, 'equal', value)))\n                .then(function (e) {\n                if (e.result.length > 0) {\n                    _this.value = checkFields_1 !== '' ? e.result[0][_this.fields.value].toString() : e.result[0].toString();\n                    _this.addItem(e.result, listLength);\n                    _this.updateValues();\n                }\n                else {\n                    newProp && newProp.text ? _this.setOldText(oldValue) : newProp && newProp.value ? _this.setOldValue(oldValue) : _this.updateValues();\n                }\n            });\n        }\n        else if (newProp) {\n            newProp.text ? this.setOldText(oldValue) : this.setOldValue(oldValue);\n        }\n    }\n    /**\n     * Search the entered text and show it in the suggestion list if available.\n     *\n     * @returns {void}\n     * @deprecated\n     */\n    showPopup(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.beforePopupOpen) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        this.preventAutoFill = true;\n        if (isNullOrUndefined(this.list)) {\n            this.renderList(e);\n        }\n        else {\n            this.resetList(this.dataSource, this.fields, null, e);\n        }\n    }\n    /**\n     * Hides the popup if it is in open state.\n     *\n     * @returns {void}\n     */\n    hidePopup(e) {\n        super.hidePopup(e);\n        this.activeIndex = null;\n        this.virtualListInfo = this.viewPortInfo;\n        this.previousStartIndex = this.viewPortInfo.startIndex;\n        this.startIndex = this.viewPortInfo.startIndex;\n        this.previousEndIndex = this.viewPortInfo.endIndex;\n    }\n    /**\n     * Dynamically change the value of properties.\n     *\n     * @param {AutoCompleteModel} newProp - Returns the dynamic property value of the component.\n     * @param {AutoCompleteModel} oldProp - Returns the previous property value of the component.\n     * @private\n     * @returns {void}\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'showPopupButton':\n                    if (this.showPopupButton) {\n                        const button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);\n                        this.inputWrapper.buttons[0] = button;\n                        Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n                        if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0]) && this.floatLabelType !== 'Never') {\n                            this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n                        }\n                        if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {\n                            EventHandler.add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);\n                        }\n                    }\n                    else {\n                        detach(this.inputWrapper.buttons[0]);\n                        this.inputWrapper.buttons[0] = null;\n                    }\n                    break;\n                default: {\n                    // eslint-disable-next-line max-len\n                    const atcProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(atcProps.newProperty, atcProps.oldProperty);\n                    break;\n                }\n            }\n        }\n    }\n    renderHightSearch() {\n        if (this.highlight) {\n            for (let i = 0; i < this.liCollections.length; i++) {\n                const isHighlight = this.ulElement.querySelector('.e-active');\n                if (!isHighlight) {\n                    revertHighlightSearch(this.liCollections[i]);\n                    highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);\n                }\n            }\n        }\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'autocomplete';\n    }\n    /**\n     * To initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        super.render();\n    }\n};\n__decorate([\n    Complex({ value: null, iconCss: null, groupBy: null }, FieldSettings)\n], AutoComplete.prototype, \"fields\", void 0);\n__decorate([\n    Property(true)\n], AutoComplete.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(false)\n], AutoComplete.prototype, \"showPopupButton\", void 0);\n__decorate([\n    Property(false)\n], AutoComplete.prototype, \"highlight\", void 0);\n__decorate([\n    Property(20)\n], AutoComplete.prototype, \"suggestionCount\", void 0);\n__decorate([\n    Property({})\n], AutoComplete.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(null)\n], AutoComplete.prototype, \"query\", void 0);\n__decorate([\n    Property(1)\n], AutoComplete.prototype, \"minLength\", void 0);\n__decorate([\n    Property('Contains')\n], AutoComplete.prototype, \"filterType\", void 0);\n__decorate([\n    Event()\n], AutoComplete.prototype, \"filtering\", void 0);\n__decorate([\n    Property(null)\n], AutoComplete.prototype, \"index\", void 0);\n__decorate([\n    Property('Never')\n], AutoComplete.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Property(null)\n], AutoComplete.prototype, \"valueTemplate\", void 0);\n__decorate([\n    Property(null)\n], AutoComplete.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Property(false)\n], AutoComplete.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property(null)\n], AutoComplete.prototype, \"text\", void 0);\nAutoComplete = __decorate([\n    NotifyPropertyChanges\n], AutoComplete);\nexport { AutoComplete };\n","/**\n * export all modules from current location\n */\nexport * from './auto-complete';\n","/**\n * FloatLable Moduel\n * Specifies whether to display the floating label above the input element.\n */\nimport { removeClass, addClass, detach } from '@syncfusion/ej2-base';\nimport { attributes, isNullOrUndefined, createElement, getUniqueID } from '@syncfusion/ej2-base';\nconst FLOATLINE = 'e-float-line';\nconst FLOATTEXT = 'e-float-text';\nconst LABELTOP = 'e-label-top';\nconst LABELBOTTOM = 'e-label-bottom';\n/* eslint-disable valid-jsdoc */\n/**\n * Function to create Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLElement} searchWrapper - Search wrapper of multiselect.\n * @param {HTMLElement} element - The given html element.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\nexport function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {\n    const floatLinelement = createElement('span', { className: FLOATLINE });\n    const floatLabelElement = createElement('label', { className: FLOATTEXT });\n    const id = element.getAttribute('id') ? element.getAttribute('id') : getUniqueID('ej2_multiselect');\n    element.id = id;\n    if (!isNullOrUndefined(element.id) && element.id !== '') {\n        floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');\n        attributes(inputElement, { 'aria-labelledby': floatLabelElement.id });\n    }\n    if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== '') {\n        floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);\n        inputElement.removeAttribute('placeholder');\n    }\n    floatLabelElement.innerText = encodePlaceholder(placeholder);\n    searchWrapper.appendChild(floatLinelement);\n    searchWrapper.appendChild(floatLabelElement);\n    overAllWrapper.classList.add('e-float-input');\n    updateFloatLabelState(value, floatLabelElement);\n    if (floatLabelType === 'Always') {\n        if (floatLabelElement.classList.contains(LABELBOTTOM)) {\n            removeClass([floatLabelElement], LABELBOTTOM);\n        }\n        addClass([floatLabelElement], LABELTOP);\n    }\n}\n/**\n * Function to update status of the Float Label element.\n *\n * @param {string[] | number[] | boolean[]} value - Value of the MultiSelect.\n * @param {HTMLElement} label - Float label element.\n */\nexport function updateFloatLabelState(value, label) {\n    if (value && value.length > 0) {\n        addClass([label], LABELTOP);\n        removeClass([label], LABELBOTTOM);\n    }\n    else {\n        removeClass([label], LABELTOP);\n        addClass([label], LABELBOTTOM);\n    }\n}\n/**\n * Function to remove Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n * @param {HTMLElement} searchWrapper - Search wrapper of multiselect.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\nexport function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {\n    const placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);\n    const floatLine = componentWrapper.querySelector('.' + FLOATLINE);\n    let placeholderText;\n    if (!isNullOrUndefined(placeholderElement)) {\n        placeholderText = placeholderElement.innerText;\n        detach(searchWrapper.querySelector('.' + FLOATTEXT));\n        setPlaceHolder(value, inputElement, placeholderText);\n        if (!isNullOrUndefined(floatLine)) {\n            detach(searchWrapper.querySelector('.' + FLOATLINE));\n        }\n    }\n    else {\n        placeholderText = (placeholder !== null) ? placeholder : '';\n        setPlaceHolder(value, inputElement, placeholderText);\n    }\n    overAllWrapper.classList.remove('e-float-input');\n}\n/**\n * Function to set the placeholder to the element.\n *\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\nexport function setPlaceHolder(value, inputElement, placeholder) {\n    if (value && value.length) {\n        inputElement.placeholder = '';\n    }\n    else {\n        inputElement.placeholder = placeholder;\n    }\n}\n/**\n * Function for focusing the Float Element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n */\nexport function floatLabelFocus(overAllWrapper, componentWrapper) {\n    overAllWrapper.classList.add('e-input-focus');\n    const label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (!isNullOrUndefined(label)) {\n        addClass([label], LABELTOP);\n        if (label.classList.contains(LABELBOTTOM)) {\n            removeClass([label], LABELBOTTOM);\n        }\n    }\n}\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Function to focus the Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\nexport function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    overAllWrapper.classList.remove('e-input-focus');\n    const label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (value && value.length <= 0 && floatLabelType === 'Auto' && !isNullOrUndefined(label)) {\n        if (label.classList.contains(LABELTOP)) {\n            removeClass([label], LABELTOP);\n        }\n        addClass([label], LABELBOTTOM);\n    }\n}\nexport function encodePlaceholder(placeholder) {\n    let result = '';\n    if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n        const spanElement = document.createElement('span');\n        spanElement.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n        const hiddenInput = (spanElement.children[0]);\n        result = hiddenInput.placeholder;\n    }\n    return result;\n}\n/* eslint-enable valid-jsdoc */\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nimport { FieldSettings } from '../drop-down-base/drop-down-base';\nimport { Popup, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { attributes, setValue, getValue } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, extend } from '@syncfusion/ej2-base';\nimport { EventHandler, Property, Event, compile, L10n } from '@syncfusion/ej2-base';\nimport { Animation, Browser, prepend, Complex } from '@syncfusion/ej2-base';\nimport { Search } from '../common/incremental-search';\nimport { append, addClass, removeClass, closest, detach, remove, select, selectAll } from '@syncfusion/ej2-base';\nimport { getUniqueID, formatUnit, isNullOrUndefined, isUndefined } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Predicate, JsonAdaptor } from '@syncfusion/ej2-data';\nimport { createFloatLabel, removeFloating, floatLabelFocus, floatLabelBlur, encodePlaceholder } from './float-label';\nconst FOCUS = 'e-input-focus';\nconst DISABLED = 'e-disabled';\nconst OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';\nconst ELEMENT_WRAPPER = 'e-multi-select-wrapper';\nconst ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';\nconst HIDE_LIST = 'e-hide-listitem';\nconst DELIMITER_VIEW = 'e-delim-view';\nconst CHIP_WRAPPER = 'e-chips-collection';\nconst CHIP = 'e-chips';\nconst CHIP_CONTENT = 'e-chipcontent';\nconst CHIP_CLOSE = 'e-chips-close';\nconst CHIP_SELECTED = 'e-chip-selected';\nconst SEARCHBOX_WRAPPER = 'e-searcher';\nconst DELIMITER_VIEW_WRAPPER = 'e-delimiter';\nconst ZERO_SIZE = 'e-zero-size';\nconst REMAIN_WRAPPER = 'e-remain';\nconst CLOSEICON_CLASS = 'e-chips-close e-close-hooker';\nconst DELIMITER_WRAPPER = 'e-delim-values';\nconst POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';\nconst INPUT_ELEMENT = 'e-dropdownbase';\nconst RTL_CLASS = 'e-rtl';\nconst CLOSE_ICON_HIDE = 'e-close-icon-hide';\nconst MOBILE_CHIP = 'e-mob-chip';\nconst FOOTER = 'e-ddl-footer';\nconst HEADER = 'e-ddl-header';\nconst DISABLE_ICON = 'e-ddl-disable-icon';\nconst SPINNER_CLASS = 'e-ms-spinner-icon';\nconst HIDDEN_ELEMENT = 'e-multi-hidden';\nconst destroy = 'destroy';\nconst dropdownIcon = 'e-input-group-icon e-ddl-icon';\nconst iconAnimation = 'e-icon-anim';\nconst TOTAL_COUNT_WRAPPER = 'e-delim-total';\nconst BOX_ELEMENT = 'e-multiselect-box';\nconst FILTERPARENT = 'e-filter-parent';\nconst CUSTOM_WIDTH = 'e-search-custom-width';\nconst FILTERINPUT = 'e-input-filter';\n/**\n * The Multiselect allows the user to pick a more than one value from list of predefined values.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var multiselectObj = new Multiselect();\n *   multiselectObj.appendTo(\"#list\");\n * </script>\n * ```\n */\nlet MultiSelect = class MultiSelect extends DropDownBase {\n    /**\n     * Constructor for creating the DropDownList widget.\n     *\n     * @param {MultiSelectModel} option - Specifies the MultiSelect model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(option, element) {\n        super(option, element);\n        this.clearIconWidth = 0;\n        this.previousFilterText = '';\n        this.isValidKey = false;\n        this.selectAllEventData = [];\n        this.selectAllEventEle = [];\n        this.resetMainList = null;\n        this.resetFilteredData = false;\n        this.scrollFocusStatus = false;\n        this.keyDownStatus = false;\n    }\n    enableRTL(state) {\n        if (state) {\n            this.overAllWrapper.classList.add(RTL_CLASS);\n        }\n        else {\n            this.overAllWrapper.classList.remove(RTL_CLASS);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n    }\n    requiredModules() {\n        const modules = [];\n        if (this.mode === 'CheckBox') {\n            this.isGroupChecking = this.enableGroupCheckBox;\n            if (this.enableGroupCheckBox) {\n                const prevOnChange = this.isProtectedOnChange;\n                this.isProtectedOnChange = true;\n                this.enableSelectionOrder = false;\n                this.isProtectedOnChange = prevOnChange;\n            }\n            this.allowCustomValue = false;\n            this.hideSelectedItem = false;\n            this.closePopupOnSelect = false;\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    updateHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (const htmlAttr of Object.keys(this.htmlAttributes)) {\n                switch (htmlAttr) {\n                    case 'class': {\n                        const updatedClassValue = (this.htmlAttributes[`${htmlAttr}`].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValue !== '') {\n                            addClass([this.overAllWrapper], updatedClassValue.split(' '));\n                            addClass([this.popupWrapper], updatedClassValue.split(' '));\n                        }\n                        break;\n                    }\n                    case 'disabled':\n                        this.enable(false);\n                        break;\n                    case 'placeholder':\n                        if (!this.placeholder) {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                            this.setProperties({ placeholder: this.inputElement.placeholder }, true);\n                            this.refreshPlaceHolder();\n                        }\n                        break;\n                    default: {\n                        const defaultAttr = ['id'];\n                        const validateAttr = ['name', 'required', 'aria-required', 'form'];\n                        const containerAttr = ['title', 'role', 'style', 'class'];\n                        if (defaultAttr.indexOf(htmlAttr) > -1) {\n                            this.element.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                        else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                        else if (containerAttr.indexOf(htmlAttr) > -1) {\n                            this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                        else if (htmlAttr !== 'size' && !isNullOrUndefined(this.inputElement)) {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[`${htmlAttr}`]);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    updateReadonly(state) {\n        if (!isNullOrUndefined(this.inputElement)) {\n            if (state || this.mode === 'CheckBox') {\n                this.inputElement.setAttribute('readonly', 'true');\n            }\n            else {\n                this.inputElement.removeAttribute('readonly');\n            }\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (this.overAllClear.parentNode) {\n                this.overAllClear.style.display = '';\n            }\n            else {\n                this.componentWrapper.appendChild(this.overAllClear);\n            }\n            this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n    }\n    updateCssClass() {\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            let updatedCssClassValues = this.cssClass;\n            updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n            if (updatedCssClassValues !== '') {\n                addClass([this.overAllWrapper], updatedCssClassValues.split(' '));\n                addClass([this.popupWrapper], updatedCssClassValues.split(' '));\n            }\n        }\n    }\n    updateOldPropCssClass(oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n            if (oldClass !== '') {\n                removeClass([this.overAllWrapper], oldClass.split(' '));\n                removeClass([this.popupWrapper], oldClass.split(' '));\n            }\n        }\n    }\n    onPopupShown(e) {\n        if (Browser.isDevice && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n                proxy.inputElement.focus();\n            };\n            history.pushState({}, '');\n        }\n        const animModel = { name: 'FadeIn', duration: 100 };\n        const eventArgs = { popup: this.popupObj, event: e, cancel: false, animation: animModel };\n        this.trigger('open', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.focusAtFirstListItem();\n                if (this.popupObj) {\n                    document.body.appendChild(this.popupObj.element);\n                }\n                if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                    this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n                }\n                if (this.mode === 'CheckBox' || this.showDropDownIcon) {\n                    addClass([this.overAllWrapper], [iconAnimation]);\n                }\n                this.refreshPopup();\n                this.renderReactTemplates();\n                if (this.popupObj) {\n                    this.popupObj.show(eventArgs.animation, (this.zIndex === 1000) ? this.element : null);\n                }\n                attributes(this.inputElement, { 'aria-expanded': 'true', 'aria-owns': this.inputElement.id + '_options' });\n                this.updateAriaActiveDescendant();\n                if (this.isFirstClick) {\n                    this.loadTemplate();\n                }\n                if (this.mode === 'CheckBox' && this.showSelectAll) {\n                    EventHandler.add(this.popupObj.element, 'click', this.clickHandler, this);\n                }\n            }\n        });\n    }\n    updateListItems(listItems, mainListItems) {\n        for (let i = 0; i < listItems.length; i++) {\n            this.findGroupStart(listItems[i]);\n            this.findGroupStart(mainListItems[i]);\n        }\n        this.deselectHeader();\n    }\n    loadTemplate() {\n        this.refreshListItems(null);\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n        this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n    }\n    setScrollPosition() {\n        if (((!this.hideSelectedItem && this.mode !== 'CheckBox') || (this.mode === 'CheckBox' && !this.enableSelectionOrder)) &&\n            (!isNullOrUndefined(this.value) && (this.value.length > 0))) {\n            const valueEle = this.findListElement((this.hideSelectedItem ? this.ulElement : this.list), 'li', 'data-value', this.value[this.value.length - 1]);\n            if (!isNullOrUndefined(valueEle)) {\n                this.scrollBottom(valueEle);\n            }\n        }\n    }\n    focusAtFirstListItem() {\n        if (this.ulElement && this.ulElement.querySelector('li.'\n            + dropDownBaseClasses.li)) {\n            let element;\n            if (this.mode === 'CheckBox') {\n                this.removeFocus();\n                return;\n            }\n            else {\n                element = this.ulElement.querySelector('li.'\n                    + dropDownBaseClasses.li + ':not(.'\n                    + HIDE_LIST + ')');\n            }\n            if (element !== null) {\n                this.removeFocus();\n                this.addListFocus(element);\n            }\n        }\n    }\n    focusAtLastListItem(data) {\n        let activeElement;\n        if (data) {\n            activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);\n        }\n        else {\n            if (this.value && this.value.length) {\n                Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);\n            }\n            else {\n                activeElement = null;\n            }\n        }\n        if (activeElement && activeElement.item !== null) {\n            this.addListFocus(activeElement.item);\n            this.scrollBottom(activeElement.item, activeElement.index);\n        }\n    }\n    getAriaAttributes() {\n        const ariaAttributes = {\n            'aria-disabled': 'false',\n            'role': 'combobox',\n            'aria-expanded': 'false'\n        };\n        return ariaAttributes;\n    }\n    updateListARIA() {\n        if (!isNullOrUndefined(this.ulElement)) {\n            attributes(this.ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n        }\n        const disableStatus = !isNullOrUndefined(this.inputElement) && (this.inputElement.disabled) ? true : false;\n        if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {\n            attributes(this.inputElement, this.getAriaAttributes());\n        }\n        if (disableStatus) {\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n        }\n        this.ensureAriaDisabled((disableStatus) ? 'true' : 'false');\n    }\n    ensureAriaDisabled(status) {\n        if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {\n            const attr = this.htmlAttributes;\n            extend(attr, { 'aria-disabled': status }, attr);\n            this.setProperties({ htmlAttributes: attr }, true);\n        }\n    }\n    removelastSelection(e) {\n        const elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);\n        const value = elements[elements.length - 1].getAttribute('data-value');\n        if (!isNullOrUndefined(this.value)) {\n            this.tempValues = this.value.slice();\n        }\n        let customValue = this.getFormattedValue(value);\n        if (this.allowCustomValue && (value !== 'false' && customValue === false || (!isNullOrUndefined(customValue) &&\n            customValue.toString() === 'NaN'))) {\n            customValue = value;\n        }\n        this.removeValue(customValue, e);\n        this.removeChipSelection();\n        this.updateDelimeter(this.delimiterChar, e);\n        this.makeTextBoxEmpty();\n        if (this.mainList && this.listData) {\n            this.refreshSelection();\n        }\n        this.checkPlaceholderSize();\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        this.renderPopup();\n        this.onPopupShown();\n    }\n    targetElement() {\n        this.targetInputElement = this.inputElement;\n        if (this.mode === 'CheckBox' && this.allowFiltering) {\n            this.notify('targetElement', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        return this.targetInputElement.value;\n    }\n    getForQuery(valuecheck) {\n        let predicate;\n        const field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n        for (let i = 0; i < valuecheck.length; i++) {\n            if (i === 0) {\n                predicate = new Predicate(field, 'equal', valuecheck[i]);\n            }\n            else {\n                predicate = predicate.or(field, 'equal', valuecheck[i]);\n            }\n        }\n        if (this.dataSource instanceof DataManager && this.dataSource.adaptor instanceof JsonAdaptor) {\n            return new Query().where(predicate);\n        }\n        else {\n            return this.getQuery(this.query).clone().where(predicate);\n        }\n    }\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onActionComplete(ulElement, list, e, isUpdated) {\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        super.onActionComplete(ulElement, list, e);\n        this.updateSelectElementData(this.allowFiltering);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const proxy = this;\n        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n            for (let i = 0; i < this.value.length; i++) {\n                const checkEle = this.findListElement(((this.allowFiltering && !isNullOrUndefined(this.mainList)) ? this.mainList : ulElement), 'li', 'data-value', proxy.value[i]);\n                if (!checkEle && !(this.dataSource instanceof DataManager)) {\n                    this.value.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        let valuecheck = [];\n        if (!isNullOrUndefined(this.value)) {\n            valuecheck = this.presentItemValue(this.ulElement);\n        }\n        if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value)\n            && this.listData != null) {\n            this.addNonPresentItems(valuecheck, this.ulElement, this.listData);\n        }\n        else {\n            this.updateActionList(ulElement, list, e);\n        }\n        if (this.dataSource instanceof DataManager && this.mode === 'CheckBox' && this.allowFiltering) {\n            this.removeFocus();\n        }\n    }\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    updateActionList(ulElement, list, e, isUpdated) {\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        if (!this.mainList && !this.mainData) {\n            this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n            this.mainData = list;\n            this.mainListCollection = this.liCollections;\n        }\n        else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {\n            this.mainData = list;\n        }\n        if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering &&\n            this.inputElement.value && this.inputElement.value !== '') {\n            this.checkForCustomValue(this.tempQuery, this.fields);\n            return;\n        }\n        if (this.value && this.value.length && ((this.mode !== 'CheckBox' && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== '') ||\n            this.mode === 'CheckBox' || ((this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering &&\n            this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === ''))) {\n            this.refreshSelection();\n        }\n        this.updateListARIA();\n        this.unwireListEvents();\n        this.wireListEvents();\n        if (!isNullOrUndefined(this.setInitialValue)) {\n            this.setInitialValue();\n        }\n        if (!isNullOrUndefined(this.selectAllAction)) {\n            this.selectAllAction();\n        }\n        if (this.setDynValue) {\n            if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.initialTextUpdate();\n            }\n            this.initialValueUpdate();\n            this.initialUpdate();\n            this.refreshPlaceHolder();\n            if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                this.updateValueState(null, this.value, null);\n            }\n        }\n        this.renderPopup();\n        if (this.beforePopupOpen) {\n            this.beforePopupOpen = false;\n            this.onPopupShown(e);\n        }\n    }\n    refreshSelection() {\n        let value;\n        let element;\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (!isNullOrUndefined(this.value)) {\n            for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                value = this.value[index];\n                element = this.findListElement(this.list, 'li', 'data-value', value);\n                if (element) {\n                    addClass([element], className);\n                    if (this.hideSelectedItem && element.previousSibling\n                        && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)\n                        && (!element.nextElementSibling ||\n                            element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                        addClass([element.previousElementSibling], className);\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n                        this.hideGroupItem(value);\n                    }\n                    if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {\n                        removeClass([element], dropDownBaseClasses.focus);\n                        const listEle = element.parentElement.querySelectorAll('.' +\n                            dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n                        if (listEle.length > 0) {\n                            addClass([listEle[0]], dropDownBaseClasses.focus);\n                            this.updateAriaActiveDescendant();\n                        }\n                        else {\n                            //EJ2-57588 - for this task, we prevent the ul element cloning ( this.ulElement = this.ulElement.cloneNode ? <HTMLElement>this.ulElement.cloneNode(true) : this.ulElement;)\n                            if (!(this.list && this.list.querySelectorAll('.' + dropDownBaseClasses.li).length > 0)) {\n                                this.l10nUpdate();\n                                addClass([this.list], dropDownBaseClasses.noData);\n                            }\n                        }\n                    }\n                    element.setAttribute('aria-selected', 'true');\n                    if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n                        const ariaValue = element.getElementsByClassName('e-check').length;\n                        if (ariaValue === 0) {\n                            const args = {\n                                module: 'CheckBoxSelection',\n                                enable: this.mode === 'CheckBox',\n                                li: element,\n                                e: null\n                            };\n                            this.notify('updatelist', args);\n                        }\n                    }\n                }\n            }\n        }\n        this.checkSelectAll();\n        this.checkMaxSelection();\n    }\n    hideGroupItem(value) {\n        let element;\n        let element1;\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);\n        let i = 0;\n        let j = 0;\n        let temp = true;\n        let temp1 = true;\n        do {\n            if (element && element.previousElementSibling\n                && (!element.previousElementSibling.classList.contains(HIDE_LIST) &&\n                    element.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp = false;\n            }\n            if (!temp || !element || (element.previousElementSibling\n                && element.previousElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                i = 10;\n            }\n            else {\n                element = element.previousElementSibling;\n            }\n            if (element1 && element1.nextElementSibling\n                && (!element1.nextElementSibling.classList.contains(HIDE_LIST) &&\n                    element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp1 = false;\n            }\n            if (!temp1 || !element1 || (element1.nextElementSibling\n                && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                j = 10;\n            }\n            else {\n                element1 = element1.nextElementSibling;\n            }\n        } while (i < 10 || j < 10);\n        if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            addClass([element.previousElementSibling], className);\n        }\n        else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            removeClass([element.previousElementSibling], className);\n        }\n    }\n    getValidLi() {\n        let liElement = this.ulElement.querySelector('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n        return (!isNullOrUndefined(liElement) ? liElement : this.liCollections[0]);\n    }\n    checkSelectAll() {\n        const groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;\n        const listItem = this.list.querySelectorAll('li.e-list-item');\n        const searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;\n        let searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;\n        if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            searchActiveCount = searchActiveCount - groupItemLength;\n        }\n        if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength)\n            && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'check' });\n        }\n        else if ((searchCount !== searchActiveCount) && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n        }\n        if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {\n            for (let i = 0; i < listItem.length; i++) {\n                this.findGroupStart(listItem[i]);\n            }\n            this.deselectHeader();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    openClick(e) {\n        if (!this.openOnClick && this.mode !== 'CheckBox') {\n            if (this.targetElement() !== '') {\n                this.showPopup();\n            }\n            else {\n                this.hidePopup(e);\n            }\n        }\n        else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {\n            this.showPopup();\n        }\n    }\n    keyUp(e) {\n        if (this.mode === 'CheckBox' && !this.openOnClick) {\n            const char = String.fromCharCode(e.keyCode);\n            const isWordCharacter = char.match(/\\w/);\n            if (!isNullOrUndefined(isWordCharacter)) {\n                this.isValidKey = true;\n            }\n        }\n        this.isValidKey = (this.isPopupOpen() && e.keyCode === 8) || this.isValidKey;\n        this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            this.expandTextbox();\n            this.showOverAllClear();\n            switch (e.keyCode) {\n                default:\n                    // For filtering works in mobile firefox\n                    this.search(e);\n            }\n        }\n    }\n    /**\n     * To filter the multiselect data from given data source by using query\n     *\n     * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param {Query} query - Specify the query to filter the data.\n     * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.remoteFilterAction = true;\n        this.dataUpdater(dataSource, query, fields);\n    }\n    getQuery(query) {\n        const filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.isFiltered) {\n            return filterQuery;\n        }\n        if (this.filterAction) {\n            if (this.targetElement() !== null) {\n                const dataType = this.typeOfData(this.dataSource).typeof;\n                if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                    filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n                else {\n                    const fields = this.fields;\n                    filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n            }\n            return filterQuery;\n        }\n        else {\n            return query ? query : this.query ? this.query : new Query();\n        }\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        if (this.targetElement().trim() === '') {\n            const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (this.backCommand) {\n                this.remoteCustomValue = false;\n                if (this.allowCustomValue && list.querySelectorAll('li').length == 0 && this.mainData.length > 0) {\n                    this.mainData = [];\n                }\n                this.onActionComplete(list, this.mainData);\n                if (this.value && this.value.length) {\n                    this.refreshSelection();\n                }\n                if (this.keyCode !== 8) {\n                    this.focusAtFirstListItem();\n                }\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n            if (this.allowCustomValue) {\n                if (!(dataSource instanceof DataManager)) {\n                    this.checkForCustomValue(query, fields);\n                }\n                else {\n                    this.remoteCustomValue = true;\n                    this.tempQuery = query;\n                }\n            }\n        }\n        this.refreshPopup();\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n    }\n    checkForCustomValue(query, fields) {\n        const dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);\n        if (this.allowCustomValue && dataChecks) {\n            const value = this.inputElement.value;\n            const field = fields ? fields : this.fields;\n            const customData = (!isNullOrUndefined(this.mainData) && this.mainData.length > 0) ?\n                this.mainData[0] : this.mainData;\n            if (typeof (customData) !== 'string' && typeof (customData) !== 'number' && typeof (customData) !== 'boolean') {\n                const dataItem = {};\n                setValue(field.text, value, dataItem);\n                if (typeof getValue((this.fields.value ? this.fields.value : 'value'), customData)\n                    === 'number') {\n                    setValue(field.value, Math.random(), dataItem);\n                }\n                else {\n                    setValue(field.value, value, dataItem);\n                }\n                const tempData = JSON.parse(JSON.stringify(this.listData));\n                tempData.splice(0, 0, dataItem);\n                this.resetList(tempData, field, query);\n            }\n            else {\n                const tempData = JSON.parse(JSON.stringify(this.listData));\n                tempData.splice(0, 0, this.inputElement.value);\n                tempData[0] = (typeof customData === 'number' && !isNaN(parseFloat(tempData[0]))) ?\n                    parseFloat(tempData[0]) : tempData[0];\n                tempData[0] = (typeof customData === 'boolean') ?\n                    (tempData[0] === 'true' ? true : (tempData[0] === 'false' ? false : tempData[0])) : tempData[0];\n                this.resetList(tempData, field);\n            }\n        }\n        if (this.value && this.value.length) {\n            this.refreshSelection();\n        }\n    }\n    getNgDirective() {\n        return 'EJS-MULTISELECT';\n    }\n    wrapperClick(e) {\n        this.setDynValue = false;\n        if (!this.enabled) {\n            return;\n        }\n        if (e.target === this.overAllClear) {\n            e.preventDefault();\n            return;\n        }\n        if (!this.inputFocus) {\n            this.inputElement.focus();\n        }\n        if (!this.readonly) {\n            if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE) !== -1) {\n                if (this.isPopupOpen()) {\n                    this.refreshPopup();\n                }\n                return;\n            }\n            if (!this.isPopupOpen() &&\n                (this.openOnClick || (this.showDropDownIcon && e.target && e.target.className === dropdownIcon))) {\n                this.showPopup(e);\n            }\n            else {\n                this.hidePopup(e);\n                if (this.mode === 'CheckBox') {\n                    this.showOverAllClear();\n                    this.inputFocus = true;\n                    if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                        this.overAllWrapper.classList.add(FOCUS);\n                    }\n                }\n            }\n        }\n        if (!(this.targetElement() && this.targetElement() !== '')) {\n            e.preventDefault();\n        }\n    }\n    enable(state) {\n        if (state) {\n            this.overAllWrapper.classList.remove(DISABLED);\n            this.inputElement.removeAttribute('disabled');\n            attributes(this.inputElement, { 'aria-disabled': 'false' });\n            this.ensureAriaDisabled('false');\n        }\n        else {\n            this.overAllWrapper.classList.add(DISABLED);\n            this.inputElement.setAttribute('disabled', 'true');\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n            this.ensureAriaDisabled('true');\n        }\n        if (this.enabled !== state) {\n            this.enabled = state;\n        }\n        this.hidePopup();\n    }\n    onBlurHandler(eve, isDocClickFromCheck) {\n        let target;\n        if (!isNullOrUndefined(eve)) {\n            target = eve.relatedTarget;\n        }\n        if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n            else if ((this.floatLabelType === 'Auto' &&\n                ((this.overAllWrapper.classList.contains('e-outline')) || (this.overAllWrapper.classList.contains('e-filled'))))) {\n                addClass([this.overAllWrapper], 'e-valid-input');\n            }\n            return;\n        }\n        if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline')) && this.mode === 'CheckBox' &&\n            ((isNullOrUndefined(this.value)) || this.value.length === 0)) {\n            removeClass([this.overAllWrapper], 'e-valid-input');\n        }\n        if (this.mode === 'CheckBox' && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {\n            this.inputFocus = false;\n            this.overAllWrapper.classList.remove(FOCUS);\n            return;\n        }\n        if (this.scrollFocusStatus) {\n            if (!isNullOrUndefined(eve)) {\n                eve.preventDefault();\n            }\n            this.inputElement.focus();\n            this.scrollFocusStatus = false;\n            return;\n        }\n        this.inputFocus = false;\n        this.overAllWrapper.classList.remove(FOCUS);\n        if (this.addTagOnBlur) {\n            const dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);\n            const listLiElement = this.findListElement(this.list, 'li', 'data-value', dataChecks);\n            const className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n            const allowChipAddition = (listLiElement && !listLiElement.classList.contains(className)) ? true : false;\n            if (allowChipAddition) {\n                this.updateListSelection(listLiElement, eve);\n                if (this.mode === 'Delimiter') {\n                    this.updateDelimeter(this.delimiterChar);\n                }\n            }\n        }\n        this.updateDataList();\n        if (this.resetMainList) {\n            this.mainList = this.resetMainList;\n            this.resetMainList = null;\n        }\n        this.refreshListItems(null);\n        if (this.mode !== 'Box' && this.mode !== 'CheckBox') {\n            this.updateDelimView();\n        }\n        if (this.changeOnBlur) {\n            this.updateValueState(eve, this.value, this.tempValues);\n            this.dispatchEvent(this.hiddenElement, 'change');\n        }\n        this.overAllClear.style.display = 'none';\n        if (this.isPopupOpen()) {\n            this.hidePopup(eve);\n        }\n        this.makeTextBoxEmpty();\n        this.trigger('blur');\n        this.focused = true;\n        if (Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.removeChipFocus();\n        }\n        this.removeChipSelection();\n        this.refreshInputHight();\n        floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);\n        this.refreshPlaceHolder();\n        if ((this.allowFiltering || (this.enableSelectionOrder === true && this.mode === 'CheckBox'))\n            && !isNullOrUndefined(this.mainList)) {\n            this.ulElement = this.mainList;\n        }\n        this.checkPlaceholderSize();\n        Input.createSpanElement(this.overAllWrapper, this.createElement);\n        this.calculateWidth();\n        if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n            this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n        }\n    }\n    calculateWidth() {\n        let elementWidth;\n        if (this.overAllWrapper) {\n            if (!this.showDropDownIcon || this.overAllWrapper.querySelector('.' + 'e-label-top')) {\n                elementWidth = this.overAllWrapper.clientWidth - 2 * (parseInt(getComputedStyle(this.inputElement).paddingRight));\n            }\n            else {\n                var downIconWidth = this.dropIcon.offsetWidth +\n                    parseInt(getComputedStyle(this.dropIcon).marginRight);\n                elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * (parseInt(getComputedStyle(this.inputElement).paddingRight)));\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());\n            }\n        }\n    }\n    checkPlaceholderSize() {\n        if (this.showDropDownIcon) {\n            const downIconWidth = this.dropIcon.offsetWidth +\n                parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            this.setPlaceholderSize(downIconWidth);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);\n            }\n        }\n    }\n    setPlaceholderSize(downIconWidth) {\n        if (isNullOrUndefined(this.value) || this.value.length === 0) {\n            if (this.dropIcon.offsetWidth !== 0) {\n                this.searchWrapper.style.width = ('calc(100% - ' + (downIconWidth + 10)) + 'px';\n            }\n            else {\n                addClass([this.searchWrapper], CUSTOM_WIDTH);\n            }\n        }\n        else if (!isNullOrUndefined(this.value)) {\n            this.searchWrapper.removeAttribute('style');\n            removeClass([this.searchWrapper], CUSTOM_WIDTH);\n        }\n    }\n    refreshInputHight() {\n        if (!isNullOrUndefined(this.searchWrapper)) {\n            if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === '')) {\n                this.searchWrapper.classList.remove(ZERO_SIZE);\n            }\n            else {\n                this.searchWrapper.classList.add(ZERO_SIZE);\n            }\n        }\n    }\n    validateValues(newValue, oldValue) {\n        return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());\n    }\n    updateValueState(event, newVal, oldVal) {\n        const newValue = newVal ? newVal : [];\n        const oldValue = oldVal ? oldVal : [];\n        if (this.initStatus && this.validateValues(newValue, oldValue)) {\n            const eventArgs = {\n                e: event,\n                oldValue: oldVal,\n                value: newVal,\n                isInteracted: event ? true : false,\n                element: this.element,\n                event: event\n            };\n            if (this.isAngular && this.preventChange) {\n                this.preventChange = false;\n            }\n            else {\n                this.trigger('change', eventArgs);\n            }\n            this.updateTempValue();\n            if (!this.changeOnBlur) {\n                this.dispatchEvent(this.hiddenElement, 'change');\n            }\n        }\n    }\n    updateTempValue() {\n        if (!this.value) {\n            this.tempValues = this.value;\n        }\n        else {\n            this.tempValues = this.value.slice();\n        }\n    }\n    updateAriaActiveDescendant() {\n        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n            attributes(this.inputElement, { 'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id });\n        }\n    }\n    getPagingCount() {\n        const height = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        return Math.round(this.list.offsetHeight / parseInt(height, 10));\n    }\n    pageUpSelection(steps) {\n        const collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        const previousItem = steps >= 0 ? collection[steps + 1] : collection[0];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    pageDownSelection(steps) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const list = this.getItems();\n        const collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        const previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    getItems() {\n        if (!this.list) {\n            super.render();\n        }\n        return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ?\n            this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')') : [];\n    }\n    focusInHandler(e) {\n        if (this.enabled) {\n            this.showOverAllClear();\n            this.inputFocus = true;\n            if (this.value && this.value.length) {\n                if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                    this.chipCollectionWrapper.style.display = '';\n                }\n                else {\n                    this.showDelimWrapper();\n                }\n                if (this.mode !== 'CheckBox') {\n                    this.viewWrapper.style.display = 'none';\n                }\n            }\n            if (this.mode !== 'CheckBox') {\n                this.searchWrapper.classList.remove(ZERO_SIZE);\n            }\n            this.checkPlaceholderSize();\n            if (this.focused) {\n                const args = { isInteracted: e ? true : false, event: e };\n                this.trigger('focus', args);\n                this.focused = false;\n            }\n            if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                this.overAllWrapper.classList.add(FOCUS);\n            }\n            floatLabelFocus(this.overAllWrapper, this.componentWrapper);\n            if (this.isPopupOpen()) {\n                this.refreshPopup();\n            }\n            setTimeout(() => {\n                this.calculateWidth();\n            }, 150);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showDelimWrapper() {\n        if (this.mode === 'CheckBox') {\n            this.viewWrapper.style.display = '';\n        }\n        else {\n            this.delimiterWrapper.style.display = '';\n        }\n        this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);\n    }\n    hideDelimWrapper() {\n        this.delimiterWrapper.style.display = 'none';\n        this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);\n    }\n    expandTextbox() {\n        let size = 5;\n        if (this.placeholder) {\n            size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;\n        }\n        if (this.inputElement.value.length > size) {\n            this.inputElement.size = this.inputElement.value.length;\n        }\n        else {\n            this.inputElement.size = size;\n        }\n    }\n    isPopupOpen() {\n        return ((this.popupWrapper !== null) && (this.popupWrapper.parentElement !== null));\n    }\n    refreshPopup() {\n        if (this.popupObj && this.mobFilter) {\n            this.popupObj.setProperties({ width: this.calcPopupWidth() });\n            this.popupObj.refreshPosition(this.overAllWrapper);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkTextLength() {\n        return this.targetElement().length < 1;\n    }\n    popupKeyActions(e) {\n        switch (e.keyCode) {\n            case 38:\n                this.hidePopup(e);\n                if (this.mode === 'CheckBox') {\n                    this.inputElement.focus();\n                }\n                e.preventDefault();\n                break;\n            case 40:\n                if (!this.isPopupOpen()) {\n                    this.showPopup(e);\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateAriaAttribute() {\n        const focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (!isNullOrUndefined(focusedItem)) {\n            this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);\n            if (this.allowFiltering) {\n                var filterInput = this.popupWrapper.querySelector('.' + FILTERINPUT);\n                filterInput && filterInput.setAttribute('aria-activedescendant', focusedItem.id);\n            }\n            else if (this.mode == \"CheckBox\") {\n                this.overAllWrapper.setAttribute('aria-activedescendant', focusedItem.id);\n            }\n        }\n    }\n    homeNavigation(isHome) {\n        this.removeFocus();\n        const scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (scrollEle.length > 0) {\n            const element = scrollEle[(isHome) ? 0 : (scrollEle.length - 1)];\n            element.classList.add(dropDownBaseClasses.focus);\n            this.scrollBottom(element);\n            this.updateAriaActiveDescendant();\n        }\n    }\n    onKeyDown(e) {\n        if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {\n            return;\n        }\n        this.keyCode = e.keyCode;\n        this.keyDownStatus = true;\n        if (e.keyCode > 111 && e.keyCode < 124) {\n            return;\n        }\n        if (e.altKey) {\n            this.popupKeyActions(e);\n            return;\n        }\n        else if (this.isPopupOpen()) {\n            const focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n            let activeIndex;\n            switch (e.keyCode) {\n                case 36:\n                case 35:\n                    this.homeNavigation((e.keyCode === 36) ? true : false);\n                    break;\n                case 33:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageUpSelection(activeIndex - this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 34:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageDownSelection(activeIndex + this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 38:\n                    this.arrowUp(e);\n                    break;\n                case 40:\n                    this.arrowDown(e);\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.hidePopup(e);\n                    if (this.mode === 'CheckBox') {\n                        this.inputElement.focus();\n                    }\n                    return;\n                case 13:\n                    e.preventDefault();\n                    if (this.mode !== 'CheckBox') {\n                        this.selectByKey(e);\n                    }\n                    this.checkPlaceholderSize();\n                    return;\n                case 32:\n                    this.spaceKeySelection(e);\n                    return;\n                case 9:\n                    e.preventDefault();\n                    this.hidePopup(e);\n                    this.inputElement.focus();\n                    this.overAllWrapper.classList.add(FOCUS);\n            }\n        }\n        else {\n            switch (e.keyCode) {\n                case 13:\n                case 9:\n                case 16:\n                case 17:\n                case 20:\n                    return;\n                case 40:\n                    if (this.openOnClick) {\n                        this.showPopup();\n                    }\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.escapeAction();\n                    return;\n            }\n        }\n        if (this.checkTextLength()) {\n            this.keyNavigation(e);\n        }\n        if (this.mode === 'CheckBox' && this.enableSelectionOrder) {\n            if (this.allowFiltering) {\n                this.previousFilterText = this.targetElement();\n            }\n            this.checkBackCommand(e);\n        }\n        this.expandTextbox();\n        if (!(this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.refreshPopup();\n        }\n    }\n    arrowDown(e) {\n        e.preventDefault();\n        this.moveByList(1);\n        this.keyAction = true;\n        if (document.activeElement.classList.contains(FILTERINPUT)\n            || (this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list)) {\n            EventHandler.add(this.list, 'keydown', this.onKeyDown, this);\n        }\n        this.updateAriaAttribute();\n    }\n    arrowUp(e) {\n        e.preventDefault();\n        this.keyAction = true;\n        let list = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            list = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        }\n        const focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        this.focusFirstListItem = !isNullOrUndefined(this.liCollections[0]) ? this.liCollections[0].classList.contains('e-item-focus') : false;\n        const index = Array.prototype.slice.call(list).indexOf(focuseElem);\n        if (index <= 0 && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            this.keyAction = false;\n            this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus' });\n        }\n        this.moveByList(-1);\n        this.updateAriaAttribute();\n    }\n    spaceKeySelection(e) {\n        if (this.mode === 'CheckBox') {\n            const li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n            const selectAllParent = document.getElementsByClassName('e-selectall-parent')[0];\n            if (!isNullOrUndefined(li) || (selectAllParent && selectAllParent.classList.contains('e-item-focus'))) {\n                e.preventDefault();\n                this.keyAction = true;\n            }\n            this.selectByKey(e);\n            if (this.keyAction) {\n                const li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n                if (!isNullOrUndefined(li) && selectAllParent && selectAllParent.classList.contains('e-item-focus')) {\n                    li.classList.remove('e-item-focus');\n                }\n            }\n        }\n        this.checkPlaceholderSize();\n    }\n    checkBackCommand(e) {\n        if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === '') {\n            this.backCommand = false;\n        }\n        else {\n            this.backCommand = true;\n        }\n    }\n    keyNavigation(e) {\n        if ((this.mode !== 'Delimiter' && this.mode !== 'CheckBox') && this.value && this.value.length) {\n            switch (e.keyCode) {\n                case 37: //left arrow\n                    e.preventDefault();\n                    this.moveBy(-1, e);\n                    break;\n                case 39: //right arrow\n                    e.preventDefault();\n                    this.moveBy(1, e);\n                    break;\n                case 8:\n                    this.removelastSelection(e);\n                    break;\n                case 46: //del\n                    this.removeSelectedChip(e);\n                    break;\n            }\n        }\n        else if (e.keyCode === 8 && this.mode === 'Delimiter') {\n            if (this.value && this.value.length) {\n                e.preventDefault();\n                const temp = this.value[this.value.length - 1];\n                this.removeValue(temp, e);\n                this.updateDelimeter(this.delimiterChar, e);\n                this.focusAtLastListItem(temp);\n            }\n        }\n    }\n    selectByKey(e) {\n        this.removeChipSelection();\n        this.selectListByKey(e);\n        if (this.hideSelectedItem) {\n            this.focusAtFirstListItem();\n        }\n    }\n    escapeAction() {\n        const temp = this.tempValues ? this.tempValues.slice() : [];\n        if (this.value && this.validateValues(this.value, temp)) {\n            if (this.mode !== 'CheckBox') {\n                this.value = temp;\n                this.initialValueUpdate();\n            }\n            if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else {\n                this.showDelimWrapper();\n            }\n            this.refreshPlaceHolder();\n            if (this.value.length) {\n                this.showOverAllClear();\n            }\n            else {\n                this.hideOverAllClear();\n            }\n        }\n        this.makeTextBoxEmpty();\n    }\n    scrollBottom(selectedLI, activeIndex) {\n        const currentOffset = this.list.offsetHeight;\n        const nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n        const nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n        let boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n            boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextBottom > currentOffset) {\n            this.list.scrollTop = nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = nextOffset;\n        }\n    }\n    scrollTop(selectedLI, activeIndex) {\n        let nextOffset = selectedLI.offsetTop - this.list.scrollTop;\n        nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n            nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n        const boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextOffset < 0) {\n            this.list.scrollTop = this.list.scrollTop + nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n                this.fixedHeaderElement.offsetHeight : 0);\n        }\n    }\n    selectListByKey(e) {\n        const li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        let target;\n        if (li !== null) {\n            e.preventDefault();\n            if (li.classList.contains('e-active')) {\n                limit = limit - 1;\n            }\n            if (this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                this.updateListSelection(li, e);\n                this.addListFocus(li);\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    this.updateDelimeter(this.delimiterChar, e);\n                    this.refreshInputHight();\n                    this.checkPlaceholderSize();\n                    if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                        target = li.firstElementChild.lastElementChild;\n                        this.findGroupStart(target);\n                        this.deselectHeader();\n                    }\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.makeTextBoxEmpty();\n                if (this.mode !== 'CheckBox') {\n                    this.refreshListItems(li.textContent);\n                }\n                if (!this.changeOnBlur) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n                this.refreshPopup();\n            }\n            else {\n                if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                    target = li.firstElementChild.lastElementChild;\n                    if (target.classList.contains('e-check')) {\n                        this.selectAllItem(false, e, li);\n                    }\n                    else {\n                        this.selectAllItem(true, e, li);\n                    }\n                }\n            }\n            this.refreshSelection();\n            if (this.closePopupOnSelect) {\n                this.hidePopup(e);\n            }\n        }\n        const selectAllParent = document.getElementsByClassName('e-selectall-parent')[0];\n        if (selectAllParent && selectAllParent.classList.contains('e-item-focus')) {\n            const selectAllCheckBox = selectAllParent.childNodes[0];\n            if (!selectAllCheckBox.classList.contains('e-check')) {\n                selectAllCheckBox.classList.add('e-check');\n                const args = {\n                    module: 'CheckBoxSelection',\n                    enable: this.mode === 'CheckBox',\n                    value: 'check',\n                    name: 'checkSelectAll'\n                };\n                this.notify('checkSelectAll', args);\n                this.selectAllItem(true, e, li);\n            }\n            else {\n                selectAllCheckBox.classList.remove('e-check');\n                const args = {\n                    module: 'CheckBoxSelection',\n                    enable: this.mode === 'CheckBox',\n                    value: 'check',\n                    name: 'checkSelectAll'\n                };\n                this.notify('checkSelectAll', args);\n                this.selectAllItem(false, e, li);\n            }\n        }\n        this.refreshPlaceHolder();\n    }\n    refreshListItems(data) {\n        if ((this.allowFiltering || (this.mode === 'CheckBox' && this.enableSelectionOrder === true)\n            || this.allowCustomValue) && this.mainList && this.listData) {\n            const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n            this.focusAtLastListItem(data);\n            if (this.value && this.value.length) {\n                this.refreshSelection();\n            }\n        }\n        else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {\n            this.refreshSelection();\n        }\n    }\n    removeSelectedChip(e) {\n        const selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        let temp;\n        if (selectedElem !== null) {\n            if (!isNullOrUndefined(this.value)) {\n                this.tempValues = this.value.slice();\n            }\n            temp = selectedElem.nextElementSibling;\n            if (temp !== null) {\n                this.removeChipSelection();\n                this.addChipSelection(temp, e);\n            }\n            this.removeValue(selectedElem.getAttribute('data-value'), e);\n            this.makeTextBoxEmpty();\n        }\n        if (this.closePopupOnSelect) {\n            this.hidePopup(e);\n        }\n        this.checkPlaceholderSize();\n    }\n    moveByTop(state) {\n        const elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        let index;\n        if (elements.length > 1) {\n            this.removeFocus();\n            index = state ? 0 : (elements.length - 1);\n            this.addListFocus(elements[index]);\n            this.scrollBottom(elements[index], index);\n        }\n        this.updateAriaAttribute();\n    }\n    clickHandler(e) {\n        const targetElement = e.target;\n        const filterInputClassName = targetElement.className;\n        const selectAllParent = document.getElementsByClassName('e-selectall-parent')[0];\n        if ((filterInputClassName === 'e-input-filter e-input' || filterInputClassName === 'e-input-group e-control-wrapper e-input-focus') && selectAllParent.classList.contains('e-item-focus')) {\n            selectAllParent.classList.remove('e-item-focus');\n        }\n    }\n    moveByList(position) {\n        if (this.list) {\n            let elements = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                elements = this.list.querySelectorAll('li.'\n                    + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                    + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            }\n            const selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n            let temp = -1;\n            const selectAllParent = document.getElementsByClassName('e-selectall-parent')[0];\n            if (this.mode === 'CheckBox' && this.showSelectAll && position == 1 && !isNullOrUndefined(selectAllParent) && !selectAllParent.classList.contains('e-item-focus') && this.list.getElementsByClassName('e-item-focus').length == 0 && this.liCollections.length > 1) {\n                if (!this.focusFirstListItem && selectAllParent.classList.contains('e-item-focus')) {\n                    selectAllParent.classList.remove('e-item-focus');\n                }\n                else if (!selectAllParent.classList.contains('e-item-focus')) {\n                    selectAllParent.classList.add('e-item-focus');\n                }\n            }\n            else if (elements.length) {\n                if (this.mode === 'CheckBox' && this.showSelectAll && !isNullOrUndefined(selectAllParent && position == -1)) {\n                    if (!this.focusFirstListItem && selectAllParent.classList.contains('e-item-focus')) {\n                        selectAllParent.classList.remove('e-item-focus');\n                    }\n                    else if (this.focusFirstListItem && !selectAllParent.classList.contains('e-item-focus')) {\n                        selectAllParent.classList.add('e-item-focus');\n                    }\n                }\n                for (let index = 0; index < elements.length; index++) {\n                    if (elements[index] === selectedElem) {\n                        temp = index;\n                        break;\n                    }\n                }\n                if (position > 0) {\n                    if (temp < (elements.length - 1)) {\n                        this.removeFocus();\n                        this.addListFocus(elements[++temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollBottom(elements[temp], temp);\n                    }\n                }\n                else {\n                    if (temp > 0) {\n                        this.removeFocus();\n                        this.addListFocus(elements[--temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollTop(elements[temp], temp);\n                    }\n                }\n            }\n        }\n    }\n    updateCheck(element) {\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox &&\n            !isNullOrUndefined(this.fields.groupBy)) {\n            const checkElement = element.firstElementChild.lastElementChild;\n            if (checkElement.classList.contains('e-check')) {\n                element.classList.add('e-active');\n            }\n            else {\n                element.classList.remove('e-active');\n            }\n        }\n    }\n    moveBy(position, e) {\n        let temp;\n        const elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);\n        const selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        if (selectedElem === null) {\n            if (position < 0) {\n                this.addChipSelection(elements[elements.length - 1], e);\n            }\n        }\n        else {\n            if (position < 0) {\n                temp = selectedElem.previousElementSibling;\n                if (temp !== null) {\n                    this.removeChipSelection();\n                    this.addChipSelection(temp, e);\n                }\n            }\n            else {\n                temp = selectedElem.nextElementSibling;\n                this.removeChipSelection();\n                if (temp !== null) {\n                    this.addChipSelection(temp, e);\n                }\n            }\n        }\n    }\n    chipClick(e) {\n        if (this.enabled) {\n            const elem = closest(e.target, '.' + CHIP);\n            this.removeChipSelection();\n            this.addChipSelection(elem, e);\n        }\n    }\n    removeChipSelection() {\n        if (this.chipCollectionWrapper) {\n            this.removeChipFocus();\n        }\n    }\n    addChipSelection(element, e) {\n        addClass([element], CHIP_SELECTED);\n        this.trigger('chipSelection', e);\n    }\n    onChipRemove(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        if (this.enabled && !this.readonly) {\n            const element = e.target.parentElement;\n            const customVal = element.getAttribute('data-value');\n            let value = this.getFormattedValue(customVal);\n            if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n                (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n                value = customVal;\n            }\n            if (this.isPopupOpen() && this.mode !== 'CheckBox') {\n                this.hidePopup(e);\n            }\n            if (!this.inputFocus) {\n                this.inputElement.focus();\n            }\n            this.removeValue(value, e);\n            if (isNullOrUndefined(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {\n                const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n                this.onActionComplete(list, this.mainData);\n            }\n            this.updateDelimeter(this.delimiterChar, e);\n            if (this.placeholder && this.floatLabelType === 'Never') {\n                this.makeTextBoxEmpty();\n                this.checkPlaceholderSize();\n            }\n            else {\n                this.inputElement.value = '';\n            }\n            e.preventDefault();\n        }\n    }\n    makeTextBoxEmpty() {\n        this.inputElement.value = '';\n        this.refreshPlaceHolder();\n    }\n    refreshPlaceHolder() {\n        if (this.placeholder && this.floatLabelType === 'Never') {\n            if ((this.value && this.value.length) || (!isNullOrUndefined(this.text) && this.text !== '')) {\n                this.inputElement.placeholder = '';\n            }\n            else {\n                this.inputElement.placeholder = encodePlaceholder(this.placeholder);\n            }\n        }\n        else {\n            this.setFloatLabelType();\n        }\n        this.expandTextbox();\n    }\n    removeAllItems(value, eve, isClearAll, element, mainElement) {\n        let index = this.value.indexOf(value);\n        const removeVal = this.value.slice(0);\n        removeVal.splice(index, 1);\n        this.setProperties({ value: [].concat([], removeVal) }, true);\n        element.setAttribute('aria-selected', 'false');\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        removeClass([element], className);\n        this.notify('activeList', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox', li: element,\n            e: this, index: index\n        });\n        this.invokeCheckboxSelection(element, eve, isClearAll);\n        this.updateMainList(true, value, mainElement);\n        this.updateChipStatus();\n    }\n    invokeCheckboxSelection(element, eve, isClearAll) {\n        this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: eve });\n        this.updateAriaActiveDescendant();\n        if ((this.value && this.value.length !== this.mainData.length)\n            && (this.mode === 'CheckBox' && this.showSelectAll && !(this.isSelectAll || isClearAll))) {\n            this.notify('checkSelectAll', {\n                module: 'CheckBoxSelection',\n                enable: this.mode === 'CheckBox',\n                value: 'uncheck'\n            });\n        }\n    }\n    removeValue(value, eve, length, isClearAll) {\n        let index = this.value.indexOf(this.getFormattedValue(value));\n        if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {\n            index = this.value.indexOf(value.toString());\n        }\n        const targetEle = eve && eve.target;\n        isClearAll = (isClearAll || targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (index !== -1) {\n            const element = this.findListElement(this.list, 'li', 'data-value', value);\n            const val = this.getDataByValue(value);\n            const eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('removing', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    this.removeIndex++;\n                }\n                else {\n                    const removeVal = this.value.slice(0);\n                    removeVal.splice(index, 1);\n                    this.setProperties({ value: [].concat([], removeVal) }, true);\n                    if (element !== null) {\n                        const hideElement = this.findListElement(this.mainList, 'li', 'data-value', value);\n                        element.setAttribute('aria-selected', 'false');\n                        removeClass([element], className);\n                        if (hideElement) {\n                            hideElement.setAttribute('aria-selected', 'false');\n                            removeClass([element, hideElement], className);\n                        }\n                        this.notify('activeList', {\n                            module: 'CheckBoxSelection',\n                            enable: this.mode === 'CheckBox', li: element,\n                            e: this, index: index\n                        });\n                        this.invokeCheckboxSelection(element, eve, isClearAll);\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy && element) {\n                        this.hideGroupItem(value);\n                    }\n                    if (this.hideSelectedItem && this.fixedHeaderElement && this.fields.groupBy && this.mode !== 'CheckBox' &&\n                        this.isPopupOpen()) {\n                        super.scrollStop();\n                    }\n                    this.updateMainList(true, value);\n                    this.removeChip(value);\n                    this.updateChipStatus();\n                    const limit = this.value && this.value.length ? this.value.length : 0;\n                    if (limit < this.maximumSelectionLength) {\n                        const collection = this.list.querySelectorAll('li.'\n                            + dropDownBaseClasses.li + ':not(.e-active)');\n                        removeClass(collection, 'e-disable');\n                    }\n                    this.trigger('removed', eventArgs);\n                    const targetEle = eve && eve.currentTarget;\n                    const isSelectAll = (targetEle && targetEle.classList.contains('e-selectall-parent')) ? true : null;\n                    if (!this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll)) {\n                        this.updateValueState(eve, this.value, this.tempValues);\n                    }\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        if (!this.changeOnBlur) {\n                            this.updateValueState(eve, this.value, this.tempValues);\n                        }\n                        const args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: false\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                        this.selectAllEventEle = [];\n                    }\n                    if (isClearAll && (length === 1 || length === null)) {\n                        this.clearAllCallback(eve, isClearAll);\n                    }\n                }\n            });\n        }\n    }\n    updateMainList(state, value, mainElement) {\n        if (this.allowFiltering || this.mode === 'CheckBox') {\n            const element2 = mainElement ? mainElement :\n                this.findListElement(this.mainList, 'li', 'data-value', value);\n            if (element2) {\n                if (state) {\n                    element2.setAttribute('aria-selected', 'false');\n                    removeClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        removeClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n                else {\n                    element2.setAttribute('aria-selected', 'true');\n                    addClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        addClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n            }\n        }\n    }\n    removeChip(value) {\n        if (this.chipCollectionWrapper) {\n            const element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);\n            if (element) {\n                remove(element);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.overAllWrapper.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.overAllWrapper.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    updateChipStatus() {\n        if (this.value && this.value.length) {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                (this.chipCollectionWrapper.style.display = '');\n            }\n            if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n            this.showOverAllClear();\n        }\n        else {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                this.chipCollectionWrapper.style.display = 'none';\n            }\n            if (!isNullOrUndefined(this.delimiterWrapper)) {\n                (this.delimiterWrapper.style.display = 'none');\n            }\n            this.hideOverAllClear();\n        }\n    }\n    addValue(value, text, eve) {\n        if (!this.value) {\n            this.value = [];\n        }\n        if (this.value.indexOf(value) < 0) {\n            this.setProperties({ value: [].concat([], this.value, [value]) }, true);\n        }\n        const element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.removeFocus();\n        if (element) {\n            this.addListFocus(element);\n            this.addListSelection(element);\n        }\n        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.addChip(text, value, eve);\n        }\n        if (this.hideSelectedItem && this.fields.groupBy) {\n            this.hideGroupItem(value);\n        }\n        this.updateChipStatus();\n        this.checkMaxSelection();\n    }\n    checkMaxSelection() {\n        const limit = this.value && this.value.length ? this.value.length : 0;\n        if (limit === this.maximumSelectionLength) {\n            const collection = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ':not(.e-active)');\n            addClass(collection, 'e-disable');\n        }\n    }\n    dispatchSelect(value, eve, element, isNotTrigger, length) {\n        const list = this.listData;\n        if (this.initStatus && !isNotTrigger) {\n            const val = this.getDataByValue(value);\n            const eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        const args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: true\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                    }\n                    if (this.allowCustomValue && this.isServerRendered && this.listData !== list) {\n                        this.listData = list;\n                    }\n                    this.updateListSelectEventCallback(value, element, eve);\n                    if (this.hideSelectedItem && this.fixedHeaderElement && this.fields.groupBy && this.mode !== 'CheckBox') {\n                        super.scrollStop();\n                    }\n                }\n            });\n        }\n    }\n    addChip(text, value, e) {\n        if (this.chipCollectionWrapper) {\n            this.getChip(text, value, e);\n        }\n    }\n    removeChipFocus() {\n        const elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP + '.' + CHIP_SELECTED);\n        removeClass(elements, CHIP_SELECTED);\n        if (Browser.isDevice) {\n            const closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE.split(' ')[0]);\n            for (let index = 0; index < closeElements.length; index++) {\n                closeElements[index].style.display = 'none';\n            }\n        }\n    }\n    onMobileChipInteraction(e) {\n        const chipElem = closest(e.target, '.' + CHIP);\n        const chipClose = chipElem.querySelector('span.' + CHIP_CLOSE.split(' ')[0]);\n        if (this.enabled && !this.readonly) {\n            if (!chipElem.classList.contains(CHIP_SELECTED)) {\n                this.removeChipFocus();\n                chipClose.style.display = '';\n                chipElem.classList.add(CHIP_SELECTED);\n            }\n            this.refreshPopup();\n            e.preventDefault();\n        }\n    }\n    multiCompiler(multiselectTemplate) {\n        let checkTemplate = false;\n        if (typeof multiselectTemplate !== 'function' && multiselectTemplate) {\n            try {\n                checkTemplate = (selectAll(multiselectTemplate, document).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    encodeHtmlEntities(input) {\n        return input.replace(/[\\u00A0-\\u9999<>&]/g, function (match) {\n            return `&#${match.charCodeAt(0)};`;\n        });\n    }\n    getChip(data, value, e) {\n        let itemData = { text: value, value: value };\n        const chip = this.createElement('span', {\n            className: CHIP,\n            attrs: { 'data-value': value, 'title': data }\n        });\n        let compiledString;\n        const chipContent = this.createElement('span', { className: CHIP_CONTENT });\n        const chipClose = this.createElement('span', { className: CHIP_CLOSE });\n        if (this.mainData) {\n            itemData = this.getDataByValue(value);\n        }\n        if (this.valueTemplate && !isNullOrUndefined(itemData)) {\n            const valuecheck = this.multiCompiler(this.valueTemplate);\n            if (typeof this.valueTemplate !== 'function' && valuecheck) {\n                compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(this.valueTemplate);\n            }\n            // eslint-disable-next-line\n            let valueCompTemp = compiledString(itemData, this, 'valueTemplate', this.valueTemplateId, this.isStringTemplate, null, chipContent);\n            if (valueCompTemp && valueCompTemp.length > 0) {\n                append(valueCompTemp, chipContent);\n            }\n            this.renderReactTemplates();\n        }\n        else if (this.enableHtmlSanitizer) {\n            chipContent.innerText = data;\n        }\n        else {\n            chipContent.innerHTML = this.encodeHtmlEntities(data);\n        }\n        chip.appendChild(chipContent);\n        const eventArgs = {\n            isInteracted: e ? true : false,\n            itemData: itemData,\n            e: e,\n            setClass: (classes) => {\n                addClass([chip], classes);\n            },\n            cancel: false\n        };\n        this.isPreventChange = this.isAngular && this.preventChange;\n        this.trigger('tagging', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                if (Browser.isDevice) {\n                    chip.classList.add(MOBILE_CHIP);\n                    append([chipClose], chip);\n                    chipClose.style.display = 'none';\n                    EventHandler.add(chip, 'click', this.onMobileChipInteraction, this);\n                }\n                else {\n                    EventHandler.add(chip, 'mousedown', this.chipClick, this);\n                    if (this.showClearButton) {\n                        chip.appendChild(chipClose);\n                    }\n                }\n                EventHandler.add(chipClose, 'mousedown', this.onChipRemove, this);\n                this.chipCollectionWrapper.appendChild(chip);\n                if (!this.changeOnBlur && e) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n            }\n        });\n    }\n    calcPopupWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            const inputWidth = (this.componentWrapper.offsetWidth) * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        return width;\n    }\n    mouseIn() {\n        if (this.enabled && !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    mouseOut() {\n        if (!this.inputFocus) {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    listOption(dataSource, fields) {\n        const iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        const fieldProperty = isNullOrUndefined(fields.properties) ? fields :\n            fields.properties;\n        this.listCurrentOptions = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldProperty, showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);\n        if (this.mode === 'CheckBox') {\n            this.notify('listoption', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', dataSource, fieldProperty });\n        }\n        return this.listCurrentOptions;\n    }\n    renderPopup() {\n        if (!this.list) {\n            super.render();\n        }\n        if (!this.popupObj) {\n            if (!isNullOrUndefined(this.popupWrapper)) {\n                document.body.appendChild(this.popupWrapper);\n                const checkboxFilter = this.popupWrapper.querySelector('.' + FILTERPARENT);\n                if (this.mode === 'CheckBox' && !this.allowFiltering && checkboxFilter && this.filterParent) {\n                    checkboxFilter.remove();\n                    this.filterParent = null;\n                }\n                let overAllHeight = parseInt(this.popupHeight, 10);\n                this.popupWrapper.style.visibility = 'hidden';\n                if (this.headerTemplate) {\n                    this.setHeaderTemplate();\n                    overAllHeight -= this.header.offsetHeight;\n                }\n                append([this.list], this.popupWrapper);\n                if (this.footerTemplate) {\n                    this.setFooterTemplate();\n                    overAllHeight -= this.footer.offsetHeight;\n                }\n                if (this.mode === 'CheckBox' && this.showSelectAll) {\n                    this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    overAllHeight -= this.selectAllHeight;\n                }\n                else if (this.mode === 'CheckBox' && !this.showSelectAll && (!this.headerTemplate && !this.footerTemplate)) {\n                    this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    overAllHeight = parseInt(this.popupHeight, 10);\n                }\n                else if (this.mode === 'CheckBox' && !this.showSelectAll) {\n                    this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    overAllHeight = parseInt(this.popupHeight, 10);\n                    if (this.headerTemplate && this.header) {\n                        overAllHeight -= this.header.offsetHeight;\n                    }\n                    if (this.footerTemplate && this.footer) {\n                        overAllHeight -= this.footer.offsetHeight;\n                    }\n                }\n                if (this.mode === 'CheckBox') {\n                    const args = {\n                        module: 'CheckBoxSelection',\n                        enable: this.mode === 'CheckBox',\n                        popupElement: this.popupWrapper\n                    };\n                    if (this.allowFiltering) {\n                        this.notify('searchBox', args);\n                        overAllHeight -= this.searchBoxHeight;\n                    }\n                    addClass([this.popupWrapper], 'e-checkbox');\n                }\n                if (this.popupHeight !== 'auto') {\n                    this.list.style.maxHeight = formatUnit(overAllHeight);\n                    this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n                }\n                else {\n                    this.list.style.maxHeight = formatUnit(this.popupHeight);\n                }\n                this.popupObj = new Popup(this.popupWrapper, {\n                    width: this.calcPopupWidth(), targetType: 'relative',\n                    position: this.enableRtl ? { X: 'right', Y: 'bottom' } : { X: 'left', Y: 'bottom' },\n                    relateTo: this.overAllWrapper,\n                    collision: this.enableRtl ? { X: 'fit', Y: 'flip' } : { X: 'flip', Y: 'flip' }, offsetY: 1,\n                    enableRtl: this.enableRtl, zIndex: this.zIndex,\n                    close: () => {\n                        if (this.popupObj.element.parentElement) {\n                            this.popupObj.unwireScrollEvents();\n                            // For restrict the page scrolling in safari browser\n                            const checkboxFilterInput = this.popupWrapper.querySelector('.' + FILTERINPUT);\n                            if (this.mode === 'CheckBox' && checkboxFilterInput && document.activeElement === checkboxFilterInput) {\n                                checkboxFilterInput.blur();\n                            }\n                            detach(this.popupObj.element);\n                        }\n                    },\n                    open: () => {\n                        this.popupObj.resolveCollision();\n                        if (!this.isFirstClick) {\n                            const ulElement = this.list.querySelector('ul');\n                            if (ulElement) {\n                                if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                                    this.targetElement().trim() !== '')) {\n                                    this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                                }\n                            }\n                            this.isFirstClick = true;\n                        }\n                        this.popupObj.wireScrollEvents();\n                        if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                            this.targetElement().trim() !== '')) {\n                            this.loadTemplate();\n                        }\n                        this.setScrollPosition();\n                        if (this.allowFiltering) {\n                            this.notify('inputFocus', {\n                                module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus'\n                            });\n                        }\n                    }, targetExitViewport: () => {\n                        if (!Browser.isDevice) {\n                            this.hidePopup();\n                        }\n                    }\n                });\n                if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                    this.notify('deviceSearchBox', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                }\n                this.popupObj.close();\n                this.popupWrapper.style.visibility = '';\n            }\n        }\n    }\n    setHeaderTemplate() {\n        let compiledString;\n        if (this.header) {\n            this.header.remove();\n        }\n        this.header = this.createElement('div');\n        addClass([this.header], HEADER);\n        const headercheck = this.multiCompiler(this.headerTemplate);\n        if (typeof this.headerTemplate !== 'function' && headercheck) {\n            compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        // eslint-disable-next-line\n        let elements = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, null, this.header);\n        if (elements && elements.length > 0) {\n            append(elements, this.header);\n        }\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            prepend([this.header], this.popupWrapper);\n        }\n        else {\n            append([this.header], this.popupWrapper);\n        }\n        EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);\n    }\n    setFooterTemplate() {\n        let compiledString;\n        if (this.footer) {\n            this.footer.remove();\n        }\n        this.footer = this.createElement('div');\n        addClass([this.footer], FOOTER);\n        const footercheck = this.multiCompiler(this.footerTemplate);\n        if (typeof this.footerTemplate !== 'function' && footercheck) {\n            compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        // eslint-disable-next-line\n        let elements = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, null, this.footer);\n        if (elements && elements.length > 0) {\n            append(elements, this.footer);\n        }\n        append([this.footer], this.popupWrapper);\n        EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);\n    }\n    clearAll(e) {\n        if (this.enabled && !this.readonly) {\n            let temp;\n            if (this.value && this.value.length > 0) {\n                const liElement = this.list && this.list.querySelectorAll('li.e-list-item');\n                if (liElement && liElement.length > 0) {\n                    this.selectAllItems(false, e);\n                }\n                else {\n                    this.removeIndex = 0;\n                    for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {\n                        this.removeValue(temp, e, null, true);\n                    }\n                }\n                this.selectedElementID = null;\n                this.inputElement.removeAttribute('aria-activedescendant');\n            }\n            else {\n                this.clearAllCallback(e);\n            }\n        }\n    }\n    clearAllCallback(e, isClearAll) {\n        const tempValues = this.value ? this.value.slice() : [];\n        if (this.mainList && this.listData && ((this.allowFiltering && this.mode !== 'CheckBox') || this.allowCustomValue)) {\n            const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n        }\n        this.focusAtFirstListItem();\n        this.updateDelimeter(this.delimiterChar, e);\n        if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {\n            this.updateDelimView();\n        }\n        if (this.inputElement.value !== '') {\n            this.makeTextBoxEmpty();\n            this.search(null);\n        }\n        this.checkPlaceholderSize();\n        if (this.isPopupOpen()) {\n            this.refreshPopup();\n        }\n        if (!this.inputFocus) {\n            if (this.changeOnBlur) {\n                this.updateValueState(e, this.value, tempValues);\n            }\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n        }\n        if (this.mode === 'CheckBox') {\n            this.refreshPlaceHolder();\n            this.refreshInputHight();\n            if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.updateValueState(e, this.value, this.tempValues);\n            }\n        }\n        if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n        }\n        e.preventDefault();\n    }\n    windowResize() {\n        this.refreshPopup();\n        if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {\n            this.updateDelimView();\n        }\n    }\n    resetValueHandler(e) {\n        const formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            const textVal = (this.element.tagName === this.getNgDirective()) ?\n                null : this.element.getAttribute('data-initial-value');\n            this.text = textVal;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);\n        EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);\n        EventHandler.add(this.inputElement, 'keyup', this.keyUp, this);\n        if (this.mode !== 'CheckBox') {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n        }\n        EventHandler.add(this.inputElement, 'blur', this.onBlurHandler, this);\n        EventHandler.add(this.componentWrapper, 'mouseover', this.mouseIn, this);\n        const formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);\n        EventHandler.add(this.overAllClear, 'mouseup', this.clearAll, this);\n        EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n    }\n    onInput(e) {\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        // For Filtering works in mobile firefox\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.search(e);\n        }\n    }\n    pasteHandler(event) {\n        setTimeout(() => {\n            this.expandTextbox();\n            this.search(event);\n        });\n    }\n    search(e) {\n        this.resetFilteredData = true;\n        if (!isNullOrUndefined(e)) {\n            this.keyCode = e.keyCode;\n        }\n        if (!this.isPopupOpen() && this.openOnClick) {\n            this.showPopup(e);\n        }\n        this.openClick(e);\n        if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && (e.keyCode !== 8)) {\n            this.focusAtFirstListItem();\n        }\n        else {\n            const text = this.targetElement();\n            if (this.allowFiltering) {\n                const eventArgs = {\n                    preventDefaultAction: false,\n                    text: this.targetElement(),\n                    updateData: (dataSource, query, fields) => {\n                        if (eventArgs.cancel) {\n                            return;\n                        }\n                        this.isFiltered = true;\n                        this.remoteFilterAction = true;\n                        this.dataUpdater(dataSource, query, fields);\n                    },\n                    event: e,\n                    cancel: false\n                };\n                this.trigger('filtering', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        if (!this.isFiltered && !eventArgs.preventDefaultAction) {\n                            this.filterAction = true;\n                            this.dataUpdater(this.dataSource, null, this.fields);\n                        }\n                    }\n                });\n            }\n            else if (this.allowCustomValue) {\n                let query = new Query();\n                query = (text !== '') ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;\n                this.dataUpdater(this.mainData, query, this.fields);\n            }\n            else {\n                const liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');\n                const activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);\n                if (activeElement && activeElement.item !== null) {\n                    this.addListFocus(activeElement.item);\n                    this.list.scrollTop =\n                        activeElement.item.offsetHeight * activeElement.index;\n                }\n                else if (this.targetElement() !== '') {\n                    this.removeFocus();\n                }\n                else {\n                    this.focusAtFirstListItem();\n                }\n            }\n        }\n    }\n    preRender() {\n        if (this.allowFiltering === null) {\n            this.allowFiltering = (this.mode === 'CheckBox') ? true : false;\n        }\n        this.initializeData();\n        this.updateDataAttribute(this.htmlAttributes);\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'multi-select';\n    }\n    initializeData() {\n        this.mainListCollection = [];\n        this.beforePopupOpen = false;\n        this.filterAction = false;\n        this.remoteFilterAction = false;\n        this.isFirstClick = false;\n        this.mobFilter = true;\n        this.isFiltered = false;\n        this.focused = true;\n        this.initial = true;\n        this.backCommand = true;\n    }\n    updateData(delimiterChar, e) {\n        let data = '';\n        const delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';\n        const text = [];\n        let temp;\n        const tempData = this.listData;\n        this.listData = this.mainData;\n        if (!isNullOrUndefined(this.hiddenElement)) {\n            this.hiddenElement.innerHTML = '';\n        }\n        if (!isNullOrUndefined(this.value)) {\n            let valueLength = this.value.length;\n            let hiddenElementContent = '';\n            for (let index = 0; index < valueLength; index++) {\n                const valueItem = this.value[index];\n                const listValue = this.findListElement((!isNullOrUndefined(this.mainList) ? this.mainList : this.ulElement), 'li', 'data-value', valueItem);\n                if (isNullOrUndefined(listValue) && !this.allowCustomValue) {\n                    this.value.splice(index, 1);\n                    index -= 1;\n                    valueLength -= 1;\n                }\n                else {\n                    if (this.listData) {\n                        temp = this.getTextByValue(valueItem);\n                    }\n                    else {\n                        temp = valueItem;\n                    }\n                    data += temp + delimiterChar + ' ';\n                    text.push(temp);\n                }\n                hiddenElementContent += `<option selected value=\"${valueItem}\">${index}</option>`;\n            }\n            if (!isNullOrUndefined(this.hiddenElement)) {\n                this.hiddenElement.innerHTML = hiddenElementContent;\n            }\n        }\n        this.setProperties({ text: text.toString() }, true);\n        if (delim) {\n            this.updateWrapperText(this.delimiterWrapper, data);\n            this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n            this.inputElement.setAttribute('aria-labelledby', this.delimiterWrapper.id);\n        }\n        const targetEle = e && e.target;\n        const isClearAll = (targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        if (!this.changeOnBlur && ((e && !isClearAll)) || this.isSelectAll) {\n            this.isSelectAll = false;\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        this.listData = tempData;\n        this.addValidInputClass();\n    }\n    initialTextUpdate() {\n        if (!isNullOrUndefined(this.text)) {\n            const textArr = this.text.split(this.delimiterChar);\n            const textVal = [];\n            for (let index = 0; textArr.length > index; index++) {\n                const val = this.getValueByText(textArr[index]);\n                if (!isNullOrUndefined(val)) {\n                    textVal.push(val);\n                }\n                else if (this.allowCustomValue) {\n                    textVal.push(textArr[index]);\n                }\n            }\n            if (textVal && textVal.length) {\n                this.setProperties({ value: textVal }, true);\n            }\n        }\n        else {\n            this.setProperties({ value: null }, true);\n        }\n    }\n    renderList(isEmptyData) {\n        if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate\n            || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {\n            isEmptyData = true;\n        }\n        super.render(null, isEmptyData);\n        this.unwireListEvents();\n        this.wireListEvents();\n    }\n    initialValueUpdate() {\n        if (this.list) {\n            let text;\n            let element;\n            let value;\n            if (this.chipCollectionWrapper) {\n                this.chipCollectionWrapper.innerHTML = '';\n            }\n            this.removeListSelection();\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    value = this.value[index];\n                    element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n                    text = this.getTextByValue(value);\n                    if ((element && (element.getAttribute('aria-selected') !== 'true')) ||\n                        (element && (element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem) &&\n                            (this.mode === 'Box' || this.mode === 'Default'))) {\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                    else if (value && this.allowCustomValue) {\n                        const indexItem = this.listData.length;\n                        const newValue = {};\n                        setValue(this.fields.text, value, newValue);\n                        setValue(this.fields.value, value, newValue);\n                        const noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);\n                        this.addItem(newValue, indexItem);\n                        element = element ? element : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n                        if (this.popupWrapper.contains(noDataEle)) {\n                            this.list.setAttribute('style', noDataEle.getAttribute('style'));\n                            this.popupWrapper.replaceChild(this.list, noDataEle);\n                            this.wireListEvents();\n                        }\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                }\n            }\n            if (this.mode === 'CheckBox') {\n                this.updateDelimView();\n                if (this.changeOnBlur) {\n                    this.updateValueState(null, this.value, this.tempValues);\n                }\n                this.updateDelimeter(this.delimiterChar);\n                this.refreshInputHight();\n            }\n            else {\n                this.updateDelimeter(this.delimiterChar);\n            }\n            if (this.mode === 'CheckBox' && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {\n                this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n            }\n            if (this.mode === 'Box' || (this.mode === 'Default' && this.inputFocus)) {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateActionCompleteData(li, item) {\n        if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {\n            this.mainList = this.ulElement;\n            if (this.hideSelectedItem) {\n                addClass([li], HIDE_LIST);\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateAddItemList(list, itemCount) {\n        if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {\n            this.list = list;\n            this.mainList = this.ulElement = list.querySelector('ul');\n            remove(this.popupWrapper.querySelector('.e-content'));\n            this.popupObj = null;\n            this.renderPopup();\n        }\n        else if (this.allowCustomValue) {\n            this.list = list;\n            this.mainList = this.ulElement = list.querySelector('ul');\n        }\n    }\n    updateDataList() {\n        if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {\n            let isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;\n            let isReactTemplateUpdate = ((this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0) && (this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount));\n            let isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || (this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0));\n            if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {\n                //EJ2-57748 - for this task, we prevent the ul element cloning ( this.mainList = this.ulElement.cloneNode ? <HTMLElement>this.ulElement.cloneNode(true) : this.ulElement;)\n                this.mainList = this.ulElement;\n            }\n        }\n    }\n    isValidLI(li) {\n        return (li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) &&\n            li.classList.contains(dropDownBaseClasses.li));\n    }\n    updateListSelection(li, e, length) {\n        const customVal = li.getAttribute('data-value');\n        let value = this.getFormattedValue(customVal);\n        if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n            (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n            value = customVal;\n        }\n        this.removeHover();\n        if (!this.value || this.value.indexOf(value) === -1) {\n            this.dispatchSelect(value, e, li, (li.getAttribute('aria-selected') === 'true'), length);\n        }\n        else {\n            this.removeValue(value, e, length);\n        }\n    }\n    updateListSelectEventCallback(value, li, e) {\n        const text = this.getTextByValue(value);\n        if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {\n            const temp = li.cloneNode(true);\n            const fieldValue = this.fields.value ? this.fields.value : 'value';\n            if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === 'number') {\n                value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;\n            }\n            const data = this.getDataByValue(value);\n            const eventArgs = {\n                newData: data,\n                cancel: false\n            };\n            this.trigger('customValueSelection', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    append([temp], this.mainList);\n                    this.mainData.push(data);\n                    this.remoteCustomValue = false;\n                    this.addValue(value, text, e);\n                }\n            });\n        }\n        else {\n            this.remoteCustomValue = false;\n            this.addValue(value, text, e);\n        }\n    }\n    removeListSelection() {\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        const selectedItems = this.list.querySelectorAll('.' + className);\n        let temp = selectedItems.length;\n        if (selectedItems && selectedItems.length) {\n            removeClass(selectedItems, className);\n            while (temp > 0) {\n                selectedItems[temp - 1].setAttribute('aria-selected', 'false');\n                temp--;\n            }\n        }\n        if (!isNullOrUndefined(this.mainList)) {\n            const selectItems = this.mainList.querySelectorAll('.' + className);\n            let temp1 = selectItems.length;\n            if (selectItems && selectItems.length) {\n                removeClass(selectItems, className);\n                while (temp1 > 0) {\n                    selectItems[temp1 - 1].setAttribute('aria-selected', 'false');\n                    if (this.mode === 'CheckBox') {\n                        if (selectedItems && (selectedItems.length > (temp1 - 1))) {\n                            removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                        }\n                        removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                    }\n                    temp1--;\n                }\n            }\n        }\n    }\n    removeHover() {\n        const hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n        if (hoveredItem && hoveredItem.length) {\n            removeClass(hoveredItem, dropDownBaseClasses.hover);\n        }\n    }\n    removeFocus() {\n        if (this.list && this.mainList) {\n            const hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);\n            const mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.focus);\n                removeClass(mainlist, dropDownBaseClasses.focus);\n            }\n        }\n    }\n    addListHover(li) {\n        if (this.enabled && this.isValidLI(li)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n        else {\n            if ((li !== null && li.classList.contains('e-list-group-item')) && this.enableGroupCheckBox && this.mode === 'CheckBox'\n                && !isNullOrUndefined(this.fields.groupBy)) {\n                this.removeHover();\n                addClass([li], dropDownBaseClasses.hover);\n            }\n        }\n    }\n    addListFocus(element) {\n        if (this.enabled && this.isValidLI(element)) {\n            this.removeFocus();\n            addClass([element], dropDownBaseClasses.focus);\n            this.updateAriaActiveDescendant();\n        }\n        else {\n            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n                addClass([element], dropDownBaseClasses.focus);\n                this.updateAriaActiveDescendant();\n            }\n        }\n    }\n    addListSelection(element, mainElement) {\n        const className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {\n            addClass([element], className);\n            this.updateMainList(false, element.getAttribute('data-value'), mainElement);\n            element.setAttribute('aria-selected', 'true');\n            if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n                const ariaCheck = element.getElementsByClassName('e-check').length;\n                if (ariaCheck === 0) {\n                    this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n                }\n            }\n            this.notify('activeList', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n            if (this.chipCollectionWrapper) {\n                this.removeChipSelection();\n            }\n            this.selectedElementID = element.id;\n        }\n    }\n    updateDelimeter(delimChar, e) {\n        this.updateData(delimChar, e);\n    }\n    onMouseClick(e) {\n        this.keyCode = null;\n        this.scrollFocusStatus = false;\n        let target = e.target;\n        const li = closest(target, '.' + dropDownBaseClasses.li);\n        const headerLi = closest(target, '.' + dropDownBaseClasses.group);\n        if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {\n            target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild\n                : e.target;\n            if (target.classList.contains('e-check')) {\n                this.selectAllItem(false, e);\n                target.classList.remove('e-check');\n                target.classList.remove('e-stop');\n                closest(target, '.' + 'e-list-group-item').classList.remove('e-active');\n                target.setAttribute('aria-selected', 'false');\n            }\n            else {\n                this.selectAllItem(true, e);\n                target.classList.remove('e-stop');\n                target.classList.add('e-check');\n                closest(target, '.' + 'e-list-group-item').classList.add('e-active');\n                target.setAttribute('aria-selected', 'true');\n            }\n            this.refreshSelection();\n            this.checkSelectAll();\n        }\n        else {\n            if (this.isValidLI(li)) {\n                let limit = this.value && this.value.length ? this.value.length : 0;\n                if (li.classList.contains('e-active')) {\n                    limit = limit - 1;\n                }\n                if (limit < this.maximumSelectionLength) {\n                    this.updateListSelection(li, e);\n                    this.checkPlaceholderSize();\n                    this.addListFocus(li);\n                    if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {\n                        if (this.mode !== 'CheckBox') {\n                            this.focusAtLastListItem(li.getAttribute('data-value'));\n                            this.refreshSelection();\n                        }\n                    }\n                    else {\n                        this.makeTextBoxEmpty();\n                    }\n                }\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    if (this.value && this.value.length > 50) {\n                        setTimeout(() => {\n                            this.updateDelimeter(this.delimiterChar, e);\n                        }, 0);\n                    }\n                    else {\n                        this.updateDelimeter(this.delimiterChar, e);\n                    }\n                    this.refreshInputHight();\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.checkSelectAll();\n                this.refreshPopup();\n                if (this.hideSelectedItem) {\n                    this.focusAtFirstListItem();\n                }\n                if (this.closePopupOnSelect) {\n                    this.hidePopup(e);\n                }\n                else {\n                    e.preventDefault();\n                }\n                this.makeTextBoxEmpty();\n                this.findGroupStart(target);\n                if (this.mode !== 'CheckBox') {\n                    this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);\n                }\n            }\n            else {\n                e.preventDefault();\n            }\n            this.refreshPlaceHolder();\n            this.deselectHeader();\n        }\n    }\n    findGroupStart(target) {\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            const count = 0;\n            const liChecked = 0;\n            const liUnchecked = 0;\n            let groupValues;\n            if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {\n                while (!target.getElementsByClassName('e-frame').length) {\n                    target = target.parentElement;\n                }\n            }\n            if (target.classList.contains('e-frame')) {\n                target = target.parentElement.parentElement;\n            }\n            groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);\n            groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);\n            while (!target.classList.contains('e-list-group-item')) {\n                if (target.classList.contains('e-list-icon')) {\n                    target = target.parentElement;\n                }\n                target = target.previousElementSibling;\n                if (target == null) {\n                    break;\n                }\n            }\n            this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);\n        }\n    }\n    findGroupAttrtibutes(listElement, checked, unChecked, count, position) {\n        while (!listElement.classList.contains('e-list-group-item')) {\n            if (listElement.classList.contains('e-list-icon')) {\n                listElement = listElement.parentElement;\n            }\n            if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') &&\n                listElement.classList.contains('e-list-item')) {\n                checked++;\n            }\n            else if (listElement.classList.contains('e-list-item')) {\n                unChecked++;\n            }\n            count++;\n            listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;\n            if (listElement == null) {\n                break;\n            }\n        }\n        return [checked, unChecked, count];\n    }\n    updateCheckBox(groupHeader, checked, unChecked, count) {\n        if (groupHeader === null) {\n            return;\n        }\n        const checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];\n        if (count === checked) {\n            checkBoxElement.classList.remove('e-stop');\n            checkBoxElement.classList.add('e-check');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'true');\n        }\n        else if (count === unChecked) {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.remove('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n        else if (this.maximumSelectionLength === checked - 1) {\n            checkBoxElement.classList.remove('e-stop');\n            groupHeader.setAttribute('aria-selected', 'true');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            checkBoxElement.classList.add('e-check');\n        }\n        else {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.add('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n    }\n    deselectHeader() {\n        const limit = this.value && this.value.length ? this.value.length : 0;\n        const collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');\n        if (limit < this.maximumSelectionLength) {\n            removeClass(collection, 'e-disable');\n        }\n        if (limit === this.maximumSelectionLength) {\n            addClass(collection, 'e-disable');\n        }\n    }\n    onMouseOver(e) {\n        let currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        if (currentLi === null && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)\n            && this.enableGroupCheckBox) {\n            currentLi = closest(e.target, '.' + dropDownBaseClasses.group);\n        }\n        this.addListHover(currentLi);\n    }\n    onMouseLeave() {\n        this.removeHover();\n    }\n    onListMouseDown(e) {\n        e.preventDefault();\n        this.scrollFocusStatus = true;\n    }\n    onDocumentClick(e) {\n        if (this.mode !== 'CheckBox') {\n            const target = e.target;\n            if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id=\"' + this.popupObj.element.id + '\"]')) &&\n                !this.overAllWrapper.contains(e.target)) {\n                this.scrollFocusStatus = false;\n            }\n            else {\n                this.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.inputElement);\n            }\n        }\n    }\n    wireListEvents() {\n        if (!isNullOrUndefined(this.list)) {\n            EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n            EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);\n            EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);\n            EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n            EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n        }\n    }\n    unwireListEvents() {\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        if (this.list) {\n            EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);\n            EventHandler.remove(this.list, 'mouseup', this.onMouseClick);\n            EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n            EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n        }\n    }\n    hideOverAllClear() {\n        if (!this.value || !this.value.length || this.inputElement.value === '') {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    showOverAllClear() {\n        if (((this.value && this.value.length) || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {\n            this.overAllClear.style.display = '';\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     *\n     * @returns {void}\n     */\n    focusIn() {\n        if (document.activeElement !== this.inputElement && this.enabled) {\n            this.inputElement.focus();\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     *\n     * @returns {void}\n     */\n    focusOut() {\n        if (document.activeElement === this.inputElement && this.enabled) {\n            this.inputElement.blur();\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     *\n     * @returns {void}\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            let filterClear = this.filterParent && this.filterParent.querySelector('.e-clear-icon.e-icons');\n            if (this.overAllClear.style.display !== 'none' || filterClear) {\n                this.spinnerElement = filterClear ? filterClear : this.overAllClear;\n            }\n            else {\n                this.spinnerElement = this.createElement('span', { className: CLOSEICON_CLASS + ' ' + SPINNER_CLASS });\n                this.componentWrapper.appendChild(this.spinnerElement);\n            }\n            createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? '16px' : '14px' }, this.createElement);\n            addClass([this.spinnerElement], DISABLE_ICON);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     *\n     * @returns {void}\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], DISABLE_ICON);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    updateWrapperText(wrapperType, wrapperData) {\n        if (this.valueTemplate || !this.enableHtmlSanitizer) {\n            wrapperType.innerHTML = this.encodeHtmlEntities(wrapperData);\n        }\n        else {\n            wrapperType.innerText = wrapperData;\n        }\n    }\n    updateDelimView() {\n        if (this.delimiterWrapper) {\n            this.hideDelimWrapper();\n        }\n        if (this.chipCollectionWrapper) {\n            this.chipCollectionWrapper.style.display = 'none';\n        }\n        if (!isNullOrUndefined(this.viewWrapper)) {\n            this.viewWrapper.style.display = '';\n            this.viewWrapper.style.width = '';\n            this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n        }\n        if (this.value && this.value.length) {\n            let data = '';\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            let overAllContainer;\n            this.updateWrapperText(this.viewWrapper, data);\n            const l10nLocale = {\n                noRecordsTemplate: 'No records found',\n                actionFailureTemplate: 'Request failed',\n                overflowCountTemplate: '+${count} more..',\n                totalCountTemplate: '${count} selected'\n            };\n            let l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            if (l10n.getConstant('actionFailureTemplate') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.locale);\n            }\n            if (l10n.getConstant('noRecordsTemplate') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.locale);\n            }\n            const remainContent = l10n.getConstant('overflowCountTemplate');\n            const totalContent = l10n.getConstant('totalCountTemplate');\n            const raminElement = this.createElement('span', {\n                className: REMAIN_WRAPPER\n            });\n            let remainCompildTemp = remainContent.replace('${count}', this.value.length.toString());\n            raminElement.innerText = remainCompildTemp;\n            this.viewWrapper.appendChild(raminElement);\n            this.renderReactTemplates();\n            const remainSize = raminElement.offsetWidth;\n            remove(raminElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            }\n            this.checkClearIconWidth();\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    data += (index === 0) ? '' : this.delimiterChar + ' ';\n                    temp = this.getOverflowVal(index);\n                    data += temp;\n                    temp = this.viewWrapper.innerHTML;\n                    this.updateWrapperText(this.viewWrapper, data);\n                    wrapperleng = this.viewWrapper.offsetWidth +\n                        parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n                    overAllContainer = this.componentWrapper.offsetWidth -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n                    if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                        if (tempData !== undefined && tempData !== '') {\n                            temp = tempData;\n                            index = tempIndex + 1;\n                        }\n                        this.updateWrapperText(this.viewWrapper, temp);\n                        remaining = this.value.length - index;\n                        wrapperleng = this.viewWrapper.offsetWidth +\n                            parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n                        while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) > overAllContainer) && wrapperleng !== 0\n                            && this.viewWrapper.innerHTML !== '') {\n                            const textArr = [];\n                            this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);\n                            remaining = this.value.length;\n                            wrapperleng = this.viewWrapper.offsetWidth +\n                                parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n                        }\n                        break;\n                    }\n                    else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                        tempData = data;\n                        tempIndex = index;\n                    }\n                    else if (index === 0) {\n                        tempData = '';\n                        tempIndex = -1;\n                    }\n                }\n            }\n            if (remaining > 0) {\n                const totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;\n                this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));\n                this.updateRemainWidth(this.viewWrapper, totalWidth);\n                this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);\n            }\n        }\n        else {\n            if (!isNullOrUndefined(this.viewWrapper)) {\n                this.viewWrapper.innerHTML = '';\n                this.viewWrapper.style.display = 'none';\n            }\n        }\n    }\n    checkClearIconWidth() {\n        if (this.showClearButton) {\n            this.clearIconWidth = this.overAllClear.offsetWidth;\n        }\n    }\n    updateRemainWidth(viewWrapper, totalWidth) {\n        if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER) && totalWidth < (viewWrapper.offsetWidth +\n            parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)\n            + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10))) {\n            viewWrapper.style.width = totalWidth + 'px';\n        }\n    }\n    updateRemainTemplate(raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {\n            viewWrapper.removeChild(viewWrapper.firstChild);\n        }\n        raminElement.innerHTML = '';\n        let remainTemp = remainContent.replace('${count}', remaining.toString());\n        let totalTemp = totalContent.replace('${count}', remaining.toString());\n        raminElement.innerText = (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) ? remainTemp : totalTemp;\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {\n            viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n        }\n        else {\n            viewWrapper.classList.add(TOTAL_COUNT_WRAPPER);\n            this.updateRemainWidth(viewWrapper, totalWidth);\n        }\n        return raminElement;\n    }\n    updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent) {\n        const overAllContainer = this.componentWrapper.offsetWidth -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n        let wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n        if (((wrapperleng + downIconWidth) >= overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n            this.viewWrapper.firstChild.nodeType === 3) {\n            while (((wrapperleng + downIconWidth) > overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n                this.viewWrapper.firstChild.nodeType === 3) {\n                const textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);\n                textArr.pop();\n                this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);\n                if (this.viewWrapper.firstChild.nodeValue === '') {\n                    this.viewWrapper.removeChild(this.viewWrapper.firstChild);\n                }\n                remaining++;\n                wrapperleng = this.viewWrapper.offsetWidth;\n            }\n            const totalWidth = overAllContainer - downIconWidth;\n            this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);\n        }\n    }\n    getOverflowVal(index) {\n        let temp;\n        if (this.mainData && this.mainData.length) {\n            if (this.mode === 'CheckBox') {\n                const newTemp = this.listData;\n                this.listData = this.mainData;\n                temp = this.getTextByValue(this.value[index]);\n                this.listData = newTemp;\n            }\n            else {\n                temp = this.getTextByValue(this.value[index]);\n            }\n        }\n        else {\n            temp = this.value[index];\n        }\n        return temp;\n    }\n    unWireEvent() {\n        if (!isNullOrUndefined(this.componentWrapper)) {\n            EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);\n        }\n        EventHandler.remove(window, 'resize', this.windowResize);\n        if (!isNullOrUndefined(this.inputElement)) {\n            EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);\n            EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);\n            if (this.mode !== 'CheckBox') {\n                EventHandler.remove(this.inputElement, 'input', this.onInput);\n            }\n            EventHandler.remove(this.inputElement, 'keyup', this.keyUp);\n            const formElement = closest(this.inputElement, 'form');\n            if (formElement) {\n                EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n            }\n            EventHandler.remove(this.inputElement, 'blur', this.onBlurHandler);\n        }\n        if (!isNullOrUndefined(this.componentWrapper)) {\n            EventHandler.remove(this.componentWrapper, 'mouseover', this.mouseIn);\n            EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);\n        }\n        if (!isNullOrUndefined(this.overAllClear)) {\n            EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n        }\n        if (!isNullOrUndefined(this.inputElement)) {\n            EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n        }\n    }\n    selectAllItem(state, event, list) {\n        let li;\n        if (!isNullOrUndefined(this.list)) {\n            li = this.list.querySelectorAll(state ?\n                'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n                'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        }\n        if (this.value && this.value.length && event && event.target\n            && closest(event.target, '.e-close-hooker') && this.allowFiltering) {\n            li = this.mainList.querySelectorAll(state ?\n                'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n                'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        }\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            let target = (event ? (this.groupTemplate ? closest(event.target, '.e-list-group-item') : event.target) : null);\n            target = (event && event.keyCode === 32) ? list : target;\n            target = (target && target.classList.contains('e-frame')) ? target.parentElement.parentElement : target;\n            if (target && target.classList.contains('e-list-group-item')) {\n                let listElement = target.nextElementSibling;\n                if (isNullOrUndefined(listElement)) {\n                    return;\n                }\n                while (listElement.classList.contains('e-list-item')) {\n                    if (state) {\n                        if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            let selectionLimit = this.value && this.value.length ? this.value.length : 0;\n                            if (listElement.classList.contains('e-active')) {\n                                selectionLimit -= 1;\n                            }\n                            if (selectionLimit < this.maximumSelectionLength) {\n                                this.updateListSelection(listElement, event);\n                            }\n                        }\n                    }\n                    else {\n                        if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            this.updateListSelection(listElement, event);\n                        }\n                    }\n                    listElement = listElement.nextElementSibling;\n                    if (listElement == null) {\n                        break;\n                    }\n                }\n                if (target.classList.contains('e-list-group-item')) {\n                    const focusedElement = this.list.getElementsByClassName('e-item-focus')[0];\n                    if (focusedElement) {\n                        focusedElement.classList.remove('e-item-focus');\n                    }\n                    if (state) {\n                        target.classList.add('e-active');\n                    }\n                    else {\n                        target.classList.remove('e-active');\n                    }\n                    target.classList.add('e-item-focus');\n                    this.updateAriaActiveDescendant();\n                }\n                this.textboxValueUpdate();\n                this.checkPlaceholderSize();\n                if (!this.changeOnBlur && event) {\n                    this.updateValueState(event, this.value, this.tempValues);\n                }\n            }\n            else {\n                this.updateValue(event, li, state);\n            }\n        }\n        else {\n            this.updateValue(event, li, state);\n        }\n        this.addValidInputClass();\n    }\n    updateValue(event, li, state) {\n        const length = li.length;\n        const beforeSelectArgs = {\n            event: event,\n            items: state ? li : [],\n            itemData: state ? this.listData : [],\n            isInteracted: event ? true : false,\n            isChecked: state,\n            preventSelectEvent: false\n        };\n        this.trigger('beforeSelectAll', beforeSelectArgs);\n        if (li && li.length) {\n            let index = 0;\n            let count = 0;\n            if (this.enableGroupCheckBox) {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;\n            }\n            else {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;\n            }\n            if (!beforeSelectArgs.preventSelectEvent) {\n                while (index < length && index <= 50 && index < count) {\n                    this.updateListSelection(li[index], event, length - index);\n                    if (this.enableGroupCheckBox) {\n                        this.findGroupStart(li[index]);\n                    }\n                    index++;\n                }\n                if (length > 50) {\n                    setTimeout(() => {\n                        while (index < length && index < count) {\n                            this.updateListSelection(li[index], event, length - index);\n                            if (this.enableGroupCheckBox) {\n                                this.findGroupStart(li[index]);\n                            }\n                            index++;\n                        }\n                        this.updatedataValueItems(event);\n                        if (!this.changeOnBlur) {\n                            this.updateValueState(event, this.value, this.tempValues);\n                            this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;\n                        }\n                        this.updateHiddenElement();\n                    }, 0);\n                }\n            }\n            else {\n                for (let i = 0; i < li.length && i < count; i++) {\n                    this.removeHover();\n                    let customVal = li[i].getAttribute('data-value');\n                    let value = this.getFormattedValue(customVal);\n                    let mainElement = this.mainList ? this.mainList.querySelectorAll(state ?\n                        'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n                        'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)')[i] : null;\n                    if (state) {\n                        this.value = !this.value ? [] : this.value;\n                        if (this.value.indexOf(value) < 0) {\n                            this.setProperties({ value: [].concat([], this.value, [value]) }, true);\n                        }\n                        this.removeFocus();\n                        this.addListSelection(li[i], mainElement);\n                        this.updateChipStatus();\n                        this.checkMaxSelection();\n                    }\n                    else {\n                        this.removeAllItems(value, event, false, li[i], mainElement);\n                    }\n                    if (this.enableGroupCheckBox) {\n                        this.findGroupStart(li[i]);\n                    }\n                }\n                if (!state) {\n                    const limit = this.value && this.value.length ? this.value.length : 0;\n                    if (limit < this.maximumSelectionLength) {\n                        const collection = this.list.querySelectorAll('li.'\n                            + dropDownBaseClasses.li + ':not(.e-active)');\n                        removeClass(collection, 'e-disable');\n                    }\n                }\n                const args = {\n                    event: event,\n                    items: state ? li : [],\n                    itemData: state ? this.listData : [],\n                    isInteracted: event ? true : false,\n                    isChecked: state\n                };\n                this.trigger('selectedAll', args);\n            }\n        }\n        this.updatedataValueItems(event);\n        this.checkPlaceholderSize();\n        if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {\n            if (!this.changeOnBlur) {\n                this.updateValueState(event, this.value, this.tempValues);\n                this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;\n            }\n            this.updateHiddenElement();\n        }\n    }\n    updateHiddenElement() {\n        let hiddenValue = '';\n        let wrapperText = '';\n        let data = '';\n        const text = [];\n        if (this.mode === 'CheckBox') {\n            this.value.map((value, index) => {\n                hiddenValue += '<option selected value =\"' + value + '\">' + index + '</option>';\n                if (this.listData) {\n                    data = this.getTextByValue(value);\n                }\n                else {\n                    data = value;\n                }\n                wrapperText += data + this.delimiterChar + ' ';\n                text.push(data);\n            });\n            this.hiddenElement.innerHTML = hiddenValue;\n            this.updateWrapperText(this.delimiterWrapper, wrapperText);\n            this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n            this.inputElement.setAttribute('aria-labelledby', this.delimiterWrapper.id);\n            this.setProperties({ text: text.toString() }, true);\n            this.refreshInputHight();\n            this.refreshPlaceHolder();\n        }\n    }\n    updatedataValueItems(event) {\n        this.deselectHeader();\n        this.textboxValueUpdate(event);\n    }\n    textboxValueUpdate(event) {\n        const isRemoveAll = event && event.target && (closest(event.target, '.e-selectall-parent')\n            || closest(event.target, '.e-close-hooker'));\n        if (this.mode !== 'Box' && !this.isPopupOpen() && !(this.mode === 'CheckBox' && (this.isSelectAll || isRemoveAll))) {\n            this.updateDelimView();\n        }\n        else {\n            this.searchWrapper.classList.remove(ZERO_SIZE);\n        }\n        if (this.mode === 'CheckBox') {\n            this.updateDelimView();\n            if (!(isRemoveAll || this.isSelectAll)) {\n                this.updateDelimeter(this.delimiterChar, event);\n            }\n            this.refreshInputHight();\n        }\n        else {\n            this.updateDelimeter(this.delimiterChar, event);\n        }\n        this.refreshPlaceHolder();\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateDataSource(prop) {\n        if (isNullOrUndefined(this.list)) {\n            this.renderPopup();\n        }\n        else {\n            this.resetList(this.dataSource);\n        }\n        if (this.value && this.value.length) {\n            this.setProperties({ 'value': this.value });\n            this.refreshSelection();\n        }\n    }\n    onLoadSelect() {\n        this.setDynValue = true;\n        this.renderPopup();\n    }\n    selectAllItems(state, event) {\n        if (isNullOrUndefined(this.list)) {\n            this.selectAllAction = () => {\n                if (this.mode === 'CheckBox' && this.showSelectAll) {\n                    const args = {\n                        module: 'CheckBoxSelection',\n                        enable: this.mode === 'CheckBox',\n                        value: state ? 'check' : 'uncheck'\n                    };\n                    this.notify('checkSelectAll', args);\n                }\n                this.selectAllItem(state, event);\n                this.selectAllAction = null;\n            };\n            super.render();\n        }\n        else {\n            this.selectAllAction = null;\n            if (this.mode === 'CheckBox' && this.showSelectAll) {\n                const args = {\n                    value: state ? 'check' : 'uncheck',\n                    enable: this.mode === 'CheckBox',\n                    module: 'CheckBoxSelection'\n                };\n                this.notify('checkSelectAll', args);\n            }\n            this.selectAllItem(state, event);\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} Returns the persisted data of the component.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    /**\n     * Dynamically change the value of properties.\n     *\n     * @param {MultiSelectModel} newProp - Returns the dynamic property value of the component.\n     * @param {MultiSelectModel} oldProp - Returns the previous property value of the component.\n     * @private\n     * @returns {void}\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))\n            || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n            if (this.resetFilteredData) {\n                // The filtered data is not being reset in the component after the user focuses out.\n                this.resetMainList = !this.resetMainList ? this.mainList : this.resetMainList;\n                this.resetFilteredData = false;\n            }\n            this.mainList = null;\n            this.mainData = null;\n            this.isFirstClick = false;\n            this.isDynamicDataChange = true;\n        }\n        if (this.getModuleName() === 'multiselect') {\n            this.filterAction = false;\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        if (!isNullOrUndefined(this.popupObj)) {\n                            this.popupObj.destroy();\n                            this.popupObj = null;\n                        }\n                        this.renderPopup();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttribute();\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'text':\n                    this.updateVal(this.value, this.value, 'text');\n                    break;\n                case 'value':\n                    this.updateVal(this.value, oldProp.value, 'value');\n                    this.addValidInputClass();\n                    if (!this.closePopupOnSelect && this.isPopupOpen()) {\n                        this.refreshPopup();\n                    }\n                    this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    this.popupObj.setProperties({ width: this.calcPopupWidth() });\n                    break;\n                case 'placeholder':\n                    this.refreshPlaceHolder();\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        this.notify('filterBarPlaceholder', { filterBarPlaceholder: newProp.filterBarPlaceholder });\n                    }\n                    break;\n                case 'delimiterChar':\n                    if (this.mode !== 'Box') {\n                        this.updateDelimView();\n                    }\n                    this.updateData(newProp.delimiterChar);\n                    break;\n                case 'cssClass':\n                    this.updateOldPropCssClass(oldProp.cssClass);\n                    this.updateCssClass();\n                    this.calculateWidth();\n                    break;\n                case 'enableRtl':\n                    this.enableRTL(newProp.enableRtl);\n                    super.onPropertyChanged(newProp, oldProp);\n                    break;\n                case 'readonly':\n                    this.updateReadonly(newProp.readonly);\n                    this.hidePopup();\n                    break;\n                case 'enabled':\n                    this.hidePopup();\n                    this.enable(newProp.enabled);\n                    break;\n                case 'showSelectAll':\n                    if (this.popupObj) {\n                        this.popupObj.destroy();\n                        this.popupObj = null;\n                    }\n                    this.renderPopup();\n                    break;\n                case 'showDropDownIcon':\n                    this.dropDownIcon();\n                    break;\n                case 'floatLabelType':\n                    this.setFloatLabelType();\n                    this.addValidInputClass();\n                    Input.createSpanElement(this.overAllWrapper, this.createElement);\n                    this.calculateWidth();\n                    if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n                        this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n                    }\n                    break;\n                case 'enableSelectionOrder':\n                    break;\n                case 'selectAllText':\n                    this.notify('selectAllText', false);\n                    break;\n                case 'popupHeight':\n                    if (this.popupObj) {\n                        let overAllHeight = parseInt(this.popupHeight, 10);\n                        if (this.popupHeight !== 'auto') {\n                            this.list.style.maxHeight = formatUnit(overAllHeight);\n                            this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n                        }\n                        else {\n                            this.list.style.maxHeight = formatUnit(this.popupHeight);\n                        }\n                    }\n                    break;\n                case 'headerTemplate':\n                case 'footerTemplate':\n                    this.reInitializePoup();\n                    break;\n                case 'allowFiltering':\n                    if (this.mode === 'CheckBox' && this.popupObj) {\n                        this.reInitializePoup();\n                    }\n                    this.updateSelectElementData(this.allowFiltering);\n                    break;\n                case 'fields':\n                    if (isNullOrUndefined(this.fields.groupBy)) {\n                        this.removeScrollEvent();\n                    }\n                    break;\n                default:\n                    {\n                        // eslint-disable-next-line max-len\n                        const msProps = this.getPropObject(prop, newProp, oldProp);\n                        super.onPropertyChanged(msProps.newProperty, msProps.oldProperty);\n                    }\n                    break;\n            }\n        }\n    }\n    reInitializePoup() {\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            this.popupObj = null;\n        }\n        this.renderPopup();\n    }\n    presentItemValue(ulElement) {\n        let valuecheck = [];\n        for (let i = 0; i < this.value.length; i++) {\n            let checkEle = this.findListElement(((this.allowFiltering && !isNullOrUndefined(this.mainList)) ? this.mainList : ulElement), 'li', 'data-value', this.value[i]);\n            if (!checkEle) {\n                valuecheck.push(this.value[i]);\n            }\n        }\n        return valuecheck;\n    }\n    ;\n    addNonPresentItems(valuecheck, ulElement, list, event) {\n        this.dataSource.executeQuery(this.getForQuery(valuecheck)).then((e) => {\n            if (e.result.length > 0) {\n                this.addItem(e.result, list.length);\n            }\n            this.updateActionList(ulElement, list, event);\n        });\n    }\n    ;\n    updateVal(newProp, oldProp, prop) {\n        if (!this.list) {\n            this.onLoadSelect();\n        }\n        else if ((this.dataSource instanceof DataManager) && (!this.listData || !(this.mainList && this.mainData))) {\n            this.onLoadSelect();\n        }\n        else {\n            let valuecheck = [];\n            if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n                valuecheck = this.presentItemValue(this.ulElement);\n            }\n            if (prop == 'value' && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value)\n                && this.listData != null) {\n                this.mainData = null;\n                this.setDynValue = true;\n                this.addNonPresentItems(valuecheck, this.ulElement, this.listData);\n            }\n            else {\n                if (prop === 'text') {\n                    this.initialTextUpdate();\n                    newProp = this.value;\n                }\n                if (isNullOrUndefined(this.value) || this.value.length === 0) {\n                    this.tempValues = oldProp;\n                }\n                // eslint-disable-next-line\n                if (this.allowCustomValue && (this.mode === 'Default' || this.mode === 'Box') && this.isReact && this.inputFocus\n                    && this.isPopupOpen() && this.mainData !== this.listData) {\n                    const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n                    this.onActionComplete(list, this.mainData);\n                }\n                this.initialValueUpdate();\n                if (this.mode !== 'Box' && !this.inputFocus) {\n                    this.updateDelimView();\n                }\n                if (!this.inputFocus) {\n                    this.refreshInputHight();\n                }\n                this.refreshPlaceHolder();\n                if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                    this.updateValueState(null, newProp, oldProp);\n                }\n                this.checkPlaceholderSize();\n            }\n        }\n        if (!this.changeOnBlur) {\n            this.updateValueState(null, newProp, oldProp);\n        }\n    }\n    /**\n     * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     *\n     * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @returns {void}\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Hides the popup, if the popup in a open state.\n     *\n     * @returns {void}\n     */\n    hidePopup(e) {\n        const delay = 100;\n        if (this.isPopupOpen()) {\n            const animModel = {\n                name: 'FadeOut',\n                duration: 100,\n                delay: delay ? delay : 0\n            };\n            const eventArgs = { popup: this.popupObj, cancel: false, animation: animModel, event: e || null };\n            this.trigger('close', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (this.fields.groupBy && this.mode !== 'CheckBox' && this.fixedHeaderElement) {\n                        remove(this.fixedHeaderElement);\n                        this.fixedHeaderElement = null;\n                    }\n                    this.beforePopupOpen = false;\n                    this.overAllWrapper.classList.remove(iconAnimation);\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                    attributes(this.inputElement, { 'aria-expanded': 'false' });\n                    this.inputElement.removeAttribute('aria-owns');\n                    this.inputElement.removeAttribute('aria-activedescendant');\n                    if (this.allowFiltering) {\n                        this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'clear' });\n                    }\n                    this.popupObj.hide();\n                    removeClass([document.body, this.popupObj.element], 'e-popup-full-page');\n                    EventHandler.remove(this.list, 'keydown', this.onKeyDown);\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        EventHandler.remove(this.popupObj.element, 'click', this.clickHandler);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Shows the popup, if the popup in a closed state.\n     *\n     * @returns {void}\n     */\n    showPopup(e) {\n        if (!this.enabled) {\n            return;\n        }\n        const args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                if (!this.ulElement) {\n                    this.beforePopupOpen = true;\n                    super.render(e);\n                    if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                        this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    }\n                    return;\n                }\n                if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                    this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                }\n                const mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;\n                const liLength = this.ulElement.querySelectorAll('li.'\n                    + dropDownBaseClasses.li + '.' + HIDE_LIST).length;\n                if (mainLiLength > 0 && (mainLiLength === liLength) && (liLength === this.mainData.length) && !(this.targetElement() !== '' && this.allowCustomValue)) {\n                    this.beforePopupOpen = false;\n                    return;\n                }\n                this.onPopupShown(e);\n            }\n        });\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     * parameter\n     * `true`   - Selects entire list items.\n     * `false`  - Un Selects entire list items.\n     *\n     * @param {boolean} state - if it’s true then Selects the entire list items. If it’s false the Unselects entire list items.\n     * @returns {void}\n     */\n    selectAll(state) {\n        this.isSelectAll = true;\n        this.selectAllItems(state);\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'multiselect';\n    }\n    /**\n     * Allows you to clear the selected values from the Multiselect component.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this.selectAll(false);\n        if (this.value && this.value.length) {\n            setTimeout(() => {\n                this.setProperties({ value: null }, true);\n            }, 0);\n        }\n        else {\n            this.setProperties({ value: null }, true);\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        if (!isNullOrUndefined(this.value)) {\n            // eslint-disable-next-line\n            this.value = [...this.value];\n        }\n        this.setDynValue = this.initStatus = false;\n        this.isSelectAll = false;\n        this.selectAllEventEle = [];\n        this.searchWrapper = this.createElement('span', { className: SEARCHBOX_WRAPPER + ' ' + ((this.mode === 'Box') ? BOX_ELEMENT : '') });\n        this.viewWrapper = this.createElement('span', { className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER, styles: 'display:none;' });\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS, styles: 'display:none;'\n        });\n        this.componentWrapper = this.createElement('div', { className: ELEMENT_WRAPPER });\n        this.overAllWrapper = this.createElement('div', { className: OVER_ALL_WRAPPER });\n        if (this.mode === 'CheckBox') {\n            addClass([this.overAllWrapper], 'e-checkbox');\n        }\n        if (Browser.isDevice) {\n            this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);\n        }\n        this.setWidth(this.width);\n        this.overAllWrapper.appendChild(this.componentWrapper);\n        this.popupWrapper = this.createElement('div', { id: this.element.id + '_popup', className: POPUP_WRAPPER });\n        if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n            this.delimiterWrapper = this.createElement('span', { className: DELIMITER_WRAPPER, styles: 'display:none' });\n            this.componentWrapper.appendChild(this.delimiterWrapper);\n        }\n        else {\n            this.chipCollectionWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER,\n                styles: 'display:none'\n            });\n            if (this.mode === 'Default') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_default'));\n            }\n            else if (this.mode === 'Box') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_box'));\n            }\n            this.componentWrapper.appendChild(this.chipCollectionWrapper);\n        }\n        if (this.mode !== 'Box') {\n            this.componentWrapper.appendChild(this.viewWrapper);\n        }\n        this.componentWrapper.appendChild(this.searchWrapper);\n        if (this.showClearButton && !Browser.isDevice) {\n            this.componentWrapper.appendChild(this.overAllClear);\n        }\n        else {\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n        this.dropDownIcon();\n        this.inputElement = this.createElement('input', {\n            className: INPUT_ELEMENT,\n            attrs: {\n                spellcheck: 'false',\n                type: 'text',\n                autocomplete: 'off',\n                tabindex: '0',\n                role: 'combobox'\n            }\n        });\n        if (this.mode === 'Default' || this.mode === 'Box') {\n            this.inputElement.setAttribute('aria-labelledby', this.chipCollectionWrapper.id);\n        }\n        if (this.element.tagName !== this.getNgDirective()) {\n            this.element.style.display = 'none';\n        }\n        if (this.element.tagName === this.getNgDirective()) {\n            this.element.appendChild(this.overAllWrapper);\n            this.searchWrapper.appendChild(this.inputElement);\n        }\n        else {\n            this.element.parentElement.insertBefore(this.overAllWrapper, this.element);\n            this.searchWrapper.appendChild(this.inputElement);\n            this.searchWrapper.appendChild(this.element);\n            this.element.removeAttribute('tabindex');\n        }\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n        else if (this.floatLabelType === 'Never') {\n            this.refreshPlaceHolder();\n        }\n        this.addValidInputClass();\n        this.element.style.opacity = '';\n        const id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n        this.element.id = id;\n        this.hiddenElement = this.createElement('select', {\n            attrs: { 'aria-hidden': 'true', 'class': HIDDEN_ELEMENT, 'tabindex': '-1', 'multiple': '' }\n        });\n        this.componentWrapper.appendChild(this.hiddenElement);\n        this.validationAttribute(this.element, this.hiddenElement);\n        if (this.mode !== 'CheckBox') {\n            this.hideOverAllClear();\n        }\n        if (!isNullOrUndefined(closest(this.element, \"fieldset\")) && closest(this.element, \"fieldset\").disabled) {\n            this.enabled = false;\n        }\n        this.wireEvent();\n        this.enable(this.enabled);\n        this.enableRTL(this.enableRtl);\n        this.checkInitialValue();\n        if (this.element.hasAttribute('data-val')) {\n            this.element.setAttribute('data-val', 'false');\n        }\n        Input.createSpanElement(this.overAllWrapper, this.createElement);\n        this.calculateWidth();\n        if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n            this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n        }\n        this.renderComplete();\n    }\n    checkInitialValue() {\n        const isData = this.dataSource instanceof Array ? (this.dataSource.length > 0)\n            : !isNullOrUndefined(this.dataSource);\n        if (!(this.value && this.value.length) &&\n            isNullOrUndefined(this.text) &&\n            !isData &&\n            this.element.tagName === 'SELECT' &&\n            this.element.options.length > 0) {\n            const optionsElement = this.element.options;\n            const valueCol = [];\n            let textCol = '';\n            for (let index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {\n                const opt = optionsElement[index];\n                if (!isNullOrUndefined(opt.getAttribute('selected'))) {\n                    if (opt.getAttribute('value')) {\n                        valueCol.push(opt.getAttribute('value'));\n                    }\n                    else {\n                        textCol += (opt.text + this.delimiterChar);\n                    }\n                }\n            }\n            if (valueCol.length > 0) {\n                this.setProperties({ value: valueCol }, true);\n            }\n            else if (textCol !== '') {\n                this.setProperties({ text: textCol }, true);\n            }\n            if (valueCol.length > 0 || textCol !== '') {\n                this.refreshInputHight();\n                this.refreshPlaceHolder();\n            }\n        }\n        if ((this.value && this.value.length) || !isNullOrUndefined(this.text)) {\n            if (!this.list) {\n                super.render();\n            }\n        }\n        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.initialTextUpdate();\n        }\n        if (this.value && this.value.length) {\n            if (!(this.dataSource instanceof DataManager)) {\n                this.initialValueUpdate();\n                this.initialUpdate();\n            }\n            else {\n                this.setInitialValue = () => {\n                    this.initStatus = false;\n                    this.initialValueUpdate();\n                    this.initialUpdate();\n                    this.setInitialValue = null;\n                    this.initStatus = true;\n                };\n            }\n            this.updateTempValue();\n        }\n        else {\n            this.initialUpdate();\n        }\n        this.initStatus = true;\n        this.checkAutoFocus();\n        if (!isNullOrUndefined(this.text)) {\n            this.element.setAttribute('data-initial-value', this.text);\n        }\n    }\n    checkAutoFocus() {\n        if (this.element.hasAttribute('autofocus')) {\n            this.inputElement.focus();\n        }\n    }\n    setFloatLabelType() {\n        removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n    }\n    addValidInputClass() {\n        if (!isNullOrUndefined(this.overAllWrapper)) {\n            if ((!isNullOrUndefined(this.value) && this.value.length) || this.floatLabelType === 'Always') {\n                addClass([this.overAllWrapper], 'e-valid-input');\n            }\n            else {\n                removeClass([this.overAllWrapper], 'e-valid-input');\n            }\n        }\n    }\n    dropDownIcon() {\n        if (this.showDropDownIcon) {\n            this.dropIcon = this.createElement('span', { className: dropdownIcon });\n            this.componentWrapper.appendChild(this.dropIcon);\n            addClass([this.componentWrapper], ['e-down-icon']);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.dropIcon.parentElement.removeChild(this.dropIcon);\n                removeClass([this.componentWrapper], ['e-down-icon']);\n            }\n        }\n    }\n    initialUpdate() {\n        if (this.mode !== 'Box' && !(this.setDynValue && this.mode === 'Default' && this.inputFocus)) {\n            this.updateDelimView();\n        }\n        this.updateCssClass();\n        this.updateHTMLAttribute();\n        this.updateReadonly(this.readonly);\n        this.refreshInputHight();\n        this.checkPlaceholderSize();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    destroy() {\n        // eslint-disable-next-line\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        if (this.popupObj) {\n            this.popupObj.hide();\n        }\n        this.notify(destroy, {});\n        this.unwireListEvents();\n        this.unWireEvent();\n        this.list = null;\n        this.popupObj = null;\n        this.mainList = null;\n        this.mainData = null;\n        this.filterParent = null;\n        this.ulElement = null;\n        this.mainListCollection = null;\n        super.destroy();\n        const temp = ['readonly', 'aria-disabled', 'placeholder'];\n        let length = temp.length;\n        if (!isNullOrUndefined(this.inputElement)) {\n            while (length > 0) {\n                this.inputElement.removeAttribute(temp[length - 1]);\n                length--;\n            }\n        }\n        if (!isNullOrUndefined(this.element)) {\n            this.element.removeAttribute('data-initial-value');\n            this.element.style.display = 'block';\n        }\n        if (this.overAllWrapper && this.overAllWrapper.parentElement) {\n            if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {\n                remove(this.overAllWrapper);\n            }\n            else {\n                this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);\n                remove(this.overAllWrapper);\n            }\n        }\n        this.componentWrapper = null;\n        this.overAllClear = null;\n        this.overAllWrapper = null;\n        this.hiddenElement = null;\n        this.searchWrapper = null;\n        this.viewWrapper = null;\n        this.chipCollectionWrapper = null;\n        this.targetInputElement = null;\n        this.popupWrapper = null;\n        this.inputElement = null;\n        this.delimiterWrapper = null;\n        this.popupObj = null;\n        this.popupWrapper = null;\n        this.liCollections = null;\n        this.header = null;\n        this.mainList = null;\n        this.mainListCollection = null;\n        this.footer = null;\n        this.selectAllEventEle = null;\n    }\n};\n__decorate([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], MultiSelect.prototype, \"fields\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Property('No records found')\n], MultiSelect.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property('Request failed')\n], MultiSelect.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property('None')\n], MultiSelect.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Property([])\n], MultiSelect.prototype, \"dataSource\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"query\", void 0);\n__decorate([\n    Property('StartsWith')\n], MultiSelect.prototype, \"filterType\", void 0);\n__decorate([\n    Property(1000)\n], MultiSelect.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Property()\n], MultiSelect.prototype, \"locale\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"enableGroupCheckBox\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('100%')\n], MultiSelect.prototype, \"width\", void 0);\n__decorate([\n    Property('300px')\n], MultiSelect.prototype, \"popupHeight\", void 0);\n__decorate([\n    Property('100%')\n], MultiSelect.prototype, \"popupWidth\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"placeholder\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Property({})\n], MultiSelect.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"valueTemplate\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"footerTemplate\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"changeOnBlur\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"allowCustomValue\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(1000)\n], MultiSelect.prototype, \"maximumSelectionLength\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"readonly\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"text\", void 0);\n__decorate([\n    Property(null)\n], MultiSelect.prototype, \"value\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"hideSelectedItem\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"closePopupOnSelect\", void 0);\n__decorate([\n    Property('Default')\n], MultiSelect.prototype, \"mode\", void 0);\n__decorate([\n    Property(',')\n], MultiSelect.prototype, \"delimiterChar\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"showDropDownIcon\", void 0);\n__decorate([\n    Property('Never')\n], MultiSelect.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"showSelectAll\", void 0);\n__decorate([\n    Property('Select All')\n], MultiSelect.prototype, \"selectAllText\", void 0);\n__decorate([\n    Property('Unselect All')\n], MultiSelect.prototype, \"unSelectAllText\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"enableSelectionOrder\", void 0);\n__decorate([\n    Property(true)\n], MultiSelect.prototype, \"openOnClick\", void 0);\n__decorate([\n    Property(false)\n], MultiSelect.prototype, \"addTagOnBlur\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"removing\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"removed\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"beforeSelectAll\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"selectedAll\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"beforeOpen\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"blur\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"focus\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"chipSelection\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"filtering\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"tagging\", void 0);\n__decorate([\n    Event()\n], MultiSelect.prototype, \"customValueSelection\", void 0);\nMultiSelect = __decorate([\n    NotifyPropertyChanges\n], MultiSelect);\nexport { MultiSelect };\n","import { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { EventHandler, select, removeClass, addClass, detach, compile, L10n } from '@syncfusion/ej2-base';\nimport { Browser, attributes, isNullOrUndefined, append, closest, prepend } from '@syncfusion/ej2-base';\nimport { dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nconst ICON = 'e-icons';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECK = 'e-check';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst INDETERMINATE = 'e-stop';\nconst checkAllParent = 'e-selectall-parent';\nconst searchBackIcon = 'e-input-group-icon e-back-icon e-icons';\nconst filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';\nconst filterInput = 'e-input-filter';\nconst filterParent = 'e-filter-parent';\nconst mobileFilter = 'e-ddl-device-filter';\nconst clearIcon = 'e-clear-icon';\nconst popupFullScreen = 'e-popup-full-page';\nconst device = 'e-ddl-device';\nconst FOCUS = 'e-input-focus';\n/**\n * The Multiselect enable CheckBoxSelection call this inject module.\n */\nexport class CheckBoxSelection {\n    constructor(parent) {\n        this.activeLi = [];\n        this.activeEle = [];\n        this.parent = parent;\n        this.removeEventListener();\n        this.addEventListener();\n    }\n    getModuleName() {\n        return 'CheckBoxSelection';\n    }\n    addEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on('updatelist', this.listSelection, this);\n        this.parent.on('listoption', this.listOption, this);\n        this.parent.on('selectAll', this.setSelectAll, this);\n        this.parent.on('checkSelectAll', this.checkSelectAll, this);\n        this.parent.on('searchBox', this.setSearchBox, this);\n        this.parent.on('blur', this.onBlurHandler, this);\n        this.parent.on('targetElement', this.targetElement, this);\n        this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);\n        this.parent.on('inputFocus', this.getFocus, this);\n        this.parent.on('reOrder', this.setReorder, this);\n        this.parent.on('activeList', this.getActiveList, this);\n        this.parent.on('selectAllText', this.setLocale, this);\n        this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n        this.parent.on('addItem', this.checboxCreate, this);\n        this.parent.on('popupFullScreen', this.setPopupFullScreen, this);\n    }\n    removeEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updatelist', this.listSelection);\n        this.parent.off('listoption', this.listOption);\n        this.parent.off('selectAll', this.setSelectAll);\n        this.parent.off('checkSelectAll', this.checkSelectAll);\n        this.parent.off('searchBox', this.setSearchBox);\n        this.parent.off('blur', this.onBlurHandler);\n        this.parent.off('targetElement', this.targetElement);\n        this.parent.off('deviceSearchBox', this.setDeviceSearchBox);\n        this.parent.off('inputFocus', this.getFocus);\n        this.parent.off('reOrder', this.setReorder);\n        this.parent.off('activeList', this.getActiveList);\n        this.parent.off('selectAllText', this.setLocale);\n        this.parent.off('filterBarPlaceholder', this.setPlaceholder);\n        this.parent.off('addItem', this.checboxCreate);\n        this.parent.off('popupFullScreen', this.setPopupFullScreen);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    listOption(args) {\n        if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n            };\n        }\n        else {\n            const itemCreated = this.parent.listCurrentOptions.itemCreated;\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n                itemCreated.apply(this, [e]);\n            };\n        }\n    }\n    setPlaceholder(props) {\n        Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);\n    }\n    checboxCreate(e) {\n        let item;\n        if (!isNullOrUndefined(e.item)) {\n            item = e.item;\n        }\n        else {\n            item = e;\n        }\n        if (this.parent.enableGroupCheckBox || (item.className !== 'e-list-group-item '\n            && item.className !== 'e-list-group-item')) {\n            const checkboxEle = createCheckBox(this.parent.createElement, true);\n            const icon = select('div.' + ICON, item);\n            item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n            select('.' + CHECKBOXFRAME, checkboxEle);\n            if (this.parent.enableGroupCheckBox) {\n                this.parent.popupWrapper.classList.add('e-multiselect-group');\n            }\n            return item;\n        }\n        else {\n            return item;\n        }\n    }\n    setSelectAll() {\n        if (this.parent.showSelectAll) {\n            if (isNullOrUndefined(this.checkAllParent)) {\n                this.checkAllParent = this.parent.createElement('div', {\n                    className: checkAllParent\n                });\n                this.selectAllSpan = this.parent.createElement('span', {\n                    className: 'e-all-text'\n                });\n                this.selectAllSpan.textContent = '';\n                this.checkAllParent.appendChild(this.selectAllSpan);\n                this.setLocale();\n                this.checboxCreate(this.checkAllParent);\n                if (this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        append([this.checkAllParent], this.parent.filterParent);\n                    }\n                    else {\n                        append([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                if (!this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);\n                    }\n                    else {\n                        prepend([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);\n            }\n            if (this.parent.list.classList.contains('e-nodata') || (this.parent.listData && this.parent.listData.length <= 1 &&\n                !(this.parent.isDynamicDataChange)) || (this.parent.isDynamicDataChange &&\n                this.parent.listData && this.parent.listData.length <= 1)) {\n                this.checkAllParent.style.display = 'none';\n            }\n            else {\n                this.checkAllParent.style.display = 'block';\n            }\n            this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        else if (!isNullOrUndefined(this.checkAllParent)) {\n            this.checkAllParent.parentElement.removeChild(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    destroy() {\n        this.removeEventListener();\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.checkAllParent = null;\n        this.clearIconElement = null;\n        this.filterInput = null;\n        this.filterInputObj = null;\n        this.checkWrapper = null;\n        this.selectAllSpan = null;\n    }\n    listSelection(args) {\n        let target;\n        if (!isNullOrUndefined(args.e)) {\n            const frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');\n            target = !isNullOrUndefined(args.e.target) ?\n                (args.e.target.classList.contains('e-frame')\n                    && (!this.parent.showSelectAll\n                        || (this.checkAllParent && !this.checkAllParent.contains(args.e.target)))) ?\n                    args.e.target : args.li.querySelector('.e-checkbox-wrapper').childNodes[1]\n                : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];\n        }\n        else {\n            const checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');\n            target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];\n        }\n        if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {\n            target = args.li.firstElementChild.childNodes[1];\n        }\n        if (!isNullOrUndefined(target)) {\n            this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n        }\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            const checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n            const selectAll = false;\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), args.li, args.e, selectAll);\n        }\n    }\n    validateCheckNode(checkWrap, isCheck, li, e, selectAll) {\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll);\n    }\n    clickHandler(e) {\n        let target;\n        if (e.currentTarget.classList.contains(this.checkAllParent.className) || (e.currentTarget.classList.value === this.checkAllParent.className)) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.currentTarget;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n        const selectAll = true;\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            const checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), null, e, selectAll);\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e, isPrevent, selectAll) {\n        let ariaState;\n        const frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            ariaState = 'true';\n            if (selectAll) {\n                this.parent.selectAllItems(true, e);\n                this.setLocale(true);\n            }\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            ariaState = 'false';\n            if (selectAll) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n        else if (state === 'indeterminate' && !(frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK]);\n            frameSpan.classList.add(INDETERMINATE);\n            ariaState = 'false';\n            if (selectAll) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n    }\n    setSearchBox(args) {\n        if (isNullOrUndefined(this.parent.filterParent)) {\n            this.parent.filterParent = this.parent.createElement('span', {\n                className: filterParent\n            });\n            this.filterInput = this.parent.createElement('input', {\n                attrs: { type: 'text' },\n                className: filterInput\n            });\n            this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n                this.parent.mobFilter = false;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],\n                properties: { placeholder: this.parent.filterBarPlaceholder }\n            }, this.parent.createElement);\n            if (!isNullOrUndefined(this.parent.cssClass)) {\n                if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], this.parent.filterParent);\n            prepend([this.parent.filterParent], args.popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'role': 'combobox',\n                'autocomplete': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);\n            EventHandler.add(this.filterInput, 'keyup', this.parent.keyUp, this.parent);\n            EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);\n            EventHandler.add(this.filterInput, 'blur', this.onBlurHandler, this);\n            EventHandler.add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);\n            this.parent.searchBoxHeight = (this.filterInputObj.container.parentElement).getBoundingClientRect().height;\n            return this.filterInputObj;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickOnBackIcon(e) {\n        this.parent.hidePopup();\n        removeClass([document.body, this.parent.popupObj.element], popupFullScreen);\n        this.parent.inputElement.focus();\n    }\n    clearText(e) {\n        this.parent.targetInputElement.value = '';\n        if (this.parent.allowFiltering && this.parent.targetInputElement.value === '') {\n            this.parent.search(null);\n        }\n        this.parent.refreshPopup();\n        this.parent.refreshListItems(null);\n        this.clearIconElement.style.visibility = 'hidden';\n        this.filterInput.focus();\n        this.setReorder(e);\n        e.preventDefault();\n    }\n    setDeviceSearchBox() {\n        this.parent.popupObj.element.classList.add(device);\n        this.parent.popupObj.element.classList.add(mobileFilter);\n        this.parent.popupObj.position = { X: 0, Y: 0 };\n        this.parent.popupObj.dataBind();\n        this.setSearchBoxPosition();\n        this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');\n        this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);\n        this.clearIconElement.style.visibility = 'hidden';\n        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n    }\n    setSearchBoxPosition() {\n        const searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        let selectAllHeight = 0;\n        if (this.checkAllParent) {\n            selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        this.parent.popupObj.element.style.maxHeight = '100%';\n        this.parent.popupObj.element.style.width = '100%';\n        this.parent.list.style.maxHeight = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        this.parent.list.style.height = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        const clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupFullScreen() {\n        if (this.parent && this.parent.popupObj) {\n            attributes(this.parent.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n            addClass([document.body, this.parent.popupObj.element], popupFullScreen);\n            this.parent.popupObj.element.style.maxHeight = '100%';\n            this.parent.popupObj.element.style.width = '100%';\n        }\n    }\n    targetElement() {\n        if (!isNullOrUndefined(this.clearIconElement)) {\n            this.parent.targetInputElement = this.filterInput;\n            this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';\n        }\n        return this.parent.targetInputElement.value;\n    }\n    onBlurHandler(e) {\n        if (!this.parent.element.classList.contains('e-listbox')) {\n            let target;\n            if (this.parent.keyAction) {\n                return;\n            }\n            if (Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.target;\n            }\n            if (!Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.relatedTarget;\n            }\n            // eslint-disable-next-line max-len\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target)\n                && !Browser.isIE && this.filterInput) {\n                this.filterInput.focus();\n                return;\n            }\n            if (this.parent.scrollFocusStatus && this.filterInput) {\n                e.preventDefault();\n                this.filterInput.focus();\n                this.parent.scrollFocusStatus = false;\n                return;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element)\n                && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);\n                this.parent.dispatchEvent(this.parent.hiddenElement, 'change');\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.overAllWrapper.classList.remove(FOCUS);\n                this.parent.trigger('blur');\n                this.parent.focused = true;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close') && !Browser.isDevice) {\n                this.parent.hidePopup();\n            }\n        }\n    }\n    onDocumentClick(e) {\n        if (this.parent.getLocaleName() !== 'listbox') {\n            const target = e.target;\n            if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]')) {\n                if (!(this.filterInput && this.filterInput.value !== '')) {\n                    e.preventDefault();\n                }\n            }\n            if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]'))\n                && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {\n                if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {\n                    this.parent.inputFocus = false;\n                    this.parent.scrollFocusStatus = false;\n                    this.parent.hidePopup();\n                    this.parent.onBlurHandler(e, true);\n                    this.parent.focused = true;\n                }\n            }\n            else {\n                this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') &&\n                    (document.activeElement === this.filterInput);\n            }\n            if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') &&\n                !this.parent.isPopupOpen()) {\n                if (Browser.isIE) {\n                    this.parent.onBlurHandler();\n                }\n                else {\n                    this.parent.onBlurHandler(e);\n                }\n            }\n            if (this.filterInput === target) {\n                this.filterInput.focus();\n            }\n        }\n    }\n    getFocus(e) {\n        this.parent.overAllWrapper.classList.remove(FOCUS);\n        if (this.parent.keyAction && e.value !== 'clear' && e.value !== 'focus') {\n            this.parent.keyAction = false;\n            return;\n        }\n        if (e.value === 'focus') {\n            this.filterInput.focus();\n            this.parent.removeFocus();\n            EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);\n        }\n        if (e.value === 'clear') {\n            this.filterInput.value = '';\n            this.clearIconElement.style.visibility = 'hidden';\n        }\n    }\n    checkSelectAll(e) {\n        if (e.value === 'check') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale(true);\n        }\n        if (e.value === 'uncheck') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n        if (e.value === 'indeterminate') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n    }\n    setLocale(unSelect) {\n        if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {\n            const template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;\n            this.selectAllSpan.textContent = '';\n            const compiledString = compile(template);\n            const templateName = unSelect ? 'unSelectAllText' : 'selectAllText';\n            for (const item of compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            const l10nLocale = { selectAllText: 'Select All', unSelectAllText: 'Unselect All' };\n            let l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);\n            if (l10n.getConstant('selectAllText') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.parent.locale);\n            }\n            this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');\n        }\n    }\n    getActiveList(args) {\n        if (args.li.classList.contains('e-active')) {\n            this.activeLi.push(args.li.cloneNode(true));\n        }\n        else {\n            this.activeLi.splice(args.index, 1);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setReorder(args) {\n        if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {\n            const activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;\n            let remLi;\n            const ulEle = this.parent.createElement('ul', {\n                className: 'e-list-parent e-ul e-reorder'\n            });\n            if (activeLiCount > 0) {\n                const activeListItems = this.parent.ulElement.querySelectorAll('li.e-active');\n                activeListItems.forEach(item => {\n                    ulEle.appendChild(item);\n                });\n                remLi = this.parent.ulElement.querySelectorAll('li.e-active');\n                addClass(remLi, 'e-reorder-hide');\n                prepend([ulEle], this.parent.list);\n            }\n            this.parent.focusAtFirstListItem();\n        }\n    }\n}\n","/**\n * export all modules from current location\n */\nexport * from './multi-select';\nexport * from './checkbox-selection';\nexport * from './float-label';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ListBox_1;\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nimport { EventHandler, closest, removeClass, addClass, Complex, Property, ChildProperty, L10n } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, getComponent, Event, extend, detach, attributes } from '@syncfusion/ej2-base';\nimport { getUniqueID, Browser, formatUnit, isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { prepend, append } from '@syncfusion/ej2-base';\nimport { cssClass, Sortable, moveTo } from '@syncfusion/ej2-lists';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { createSpinner, showSpinner, hideSpinner, getZindexPartial } from '@syncfusion/ej2-popups';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nconst ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\n/**\n * Defines the Selection settings of List Box.\n */\nexport class SelectionSettings extends ChildProperty {\n}\n__decorate([\n    Property('Multiple')\n], SelectionSettings.prototype, \"mode\", void 0);\n__decorate([\n    Property(false)\n], SelectionSettings.prototype, \"showCheckbox\", void 0);\n__decorate([\n    Property(false)\n], SelectionSettings.prototype, \"showSelectAll\", void 0);\n__decorate([\n    Property('Left')\n], SelectionSettings.prototype, \"checkboxPosition\", void 0);\n/**\n * Defines the toolbar settings of List Box.\n */\nexport class ToolbarSettings extends ChildProperty {\n}\n__decorate([\n    Property([])\n], ToolbarSettings.prototype, \"items\", void 0);\n__decorate([\n    Property('Right')\n], ToolbarSettings.prototype, \"position\", void 0);\n/**\n * The ListBox is a graphical user interface component used to display a list of items.\n * Users can select one or more items in the list using a checkbox or by keyboard selection.\n * It supports sorting, grouping, reordering and drag and drop of items.\n * ```html\n * <select id=\"listbox\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var listObj = new ListBox();\n *   listObj.appendTo(\"#listbox\");\n * </script>\n * ```\n */\nlet ListBox = ListBox_1 = class ListBox extends DropDownBase {\n    /**\n     * Constructor for creating the ListBox component.\n     *\n     * @param {ListBoxModel} options - Specifies ListBox model\n     * @param {string | HTMLElement} element - Specifies the element.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isValidKey = false;\n        this.isDataSourceUpdate = false;\n        this.keyDownStatus = false;\n    }\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     *\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @returns {void}.\n     * @private\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Build and render the component.\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        this.inputString = '';\n        this.initLoad = true;\n        this.isCustomFiltering = false;\n        this.initialSelectedOptions = this.value;\n        super.render();\n        this.setEnabled();\n        this.renderComplete();\n    }\n    initWrapper() {\n        const hiddenSelect = this.createElement('select', { className: 'e-hidden-select', attrs: { 'multiple': '' } });\n        hiddenSelect.style.visibility = 'hidden';\n        this.list.classList.add('e-listbox-wrapper');\n        if (this.itemTemplate) {\n            this.list.classList.add('e-list-template');\n        }\n        this.list.classList.add('e-wrapper');\n        this.list.classList.add('e-lib');\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.setAttribute('tabindex', '0');\n            if (this.initLoad) {\n                this.element.appendChild(this.list);\n            }\n        }\n        else {\n            if (this.initLoad) {\n                this.element.parentElement.insertBefore(this.list, this.element);\n            }\n            this.list.insertBefore(this.element, this.list.firstChild);\n            this.element.style.display = 'none';\n        }\n        this.list.insertBefore(hiddenSelect, this.list.firstChild);\n        if (this.list.getElementsByClassName('e-list-item')[0]) {\n            this.list.getElementsByClassName('e-list-item')[0].classList.remove(dropDownBaseClasses.focus);\n        }\n        if (this.itemTemplate) {\n            this.renderReactTemplates();\n        }\n        removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);\n        this.validationAttribute(this.element, hiddenSelect);\n        this.list.setAttribute('role', 'listbox');\n        attributes(this.list, { 'role': 'listbox', 'aria-label': 'listbox', 'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false' });\n        this.updateSelectionSettings();\n    }\n    updateSelectionSettings() {\n        if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {\n            const l10nSelect = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n            this.showSelectAll = true;\n            this.selectAllText = l10nSelect.getConstant('selectAllText');\n            this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');\n            this.popupWrapper = this.list;\n            this.checkBoxSelectionModule.checkAllParent = null;\n            this.notify('selectAll', {});\n        }\n    }\n    initDraggable() {\n        if (this.ulElement) {\n            this.ulElement.id = this.element.id + '_parent';\n        }\n        if (this.allowDragAndDrop) {\n            new Sortable(this.ulElement, {\n                scope: this.scope,\n                itemClass: 'e-list-item',\n                dragStart: this.triggerDragStart.bind(this),\n                drag: this.triggerDrag.bind(this),\n                beforeDrop: this.beforeDragEnd.bind(this),\n                drop: this.dragEnd.bind(this),\n                placeHolder: () => { return this.createElement('span', { className: 'e-placeholder' }); },\n                helper: (e) => {\n                    const wrapper = this.list.cloneNode();\n                    const ele = e.sender.cloneNode(true);\n                    wrapper.appendChild(ele);\n                    const refEle = this.getItems()[0];\n                    wrapper.style.width = refEle.offsetWidth + 'px';\n                    wrapper.style.height = refEle.offsetHeight + 'px';\n                    if ((this.value && this.value.length) > 1 && this.isSelected(ele)) {\n                        ele.appendChild(this.createElement('span', {\n                            className: 'e-list-badge', innerHTML: this.value.length + ''\n                        }));\n                    }\n                    wrapper.style.zIndex = getZindexPartial(this.element) + '';\n                    return wrapper;\n                }\n            });\n        }\n    }\n    updateActionCompleteData(li, item, index) {\n        this.jsonData.splice(index, 0, item);\n    }\n    initToolbar() {\n        const pos = this.toolbarSettings.position;\n        const prevScope = this.element.getAttribute('data-value');\n        if (this.toolbarSettings.items.length) {\n            const toolElem = this.createElement('div', { className: 'e-listbox-tool', attrs: { 'role': 'toolbar' } });\n            const wrapper = this.createElement('div', {\n                className: 'e-listboxtool-wrapper e-lib e-' + pos.toLowerCase()\n            });\n            this.list.parentElement.insertBefore(wrapper, this.list);\n            wrapper.appendChild(pos === 'Right' ? this.list : toolElem);\n            wrapper.appendChild(pos === 'Right' ? toolElem : this.list);\n            this.createButtons(toolElem);\n            if (!this.element.id) {\n                this.element.id = getUniqueID('e-' + this.getModuleName());\n            }\n            if (this.scope) {\n                document.querySelector(this.scope).setAttribute('data-value', this.element.id);\n            }\n            else {\n                this.updateToolBarState();\n            }\n        }\n        const scope = this.element.getAttribute('data-value');\n        if (prevScope && scope && (prevScope !== scope)) {\n            this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n        else if (scope) {\n            this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    createButtons(toolElem) {\n        let btn;\n        let ele;\n        let title;\n        const l10n = new L10n(this.getModuleName(), {\n            moveUp: 'Move Up', moveDown: 'Move Down', moveTo: 'Move To',\n            moveFrom: 'Move From', moveAllTo: 'Move All To', moveAllFrom: 'Move All From'\n        }, this.locale);\n        this.toolbarSettings.items.forEach((value) => {\n            title = l10n.getConstant(value);\n            ele = this.createElement('button', {\n                attrs: {\n                    'type': 'button',\n                    'data-value': value,\n                    'title': title,\n                    'aria-label': title\n                }\n            });\n            toolElem.appendChild(ele);\n            btn = new Button({ iconCss: 'e-icons e-' + value.toLowerCase() }, ele);\n            btn.createElement = this.createElement;\n        });\n    }\n    validationAttribute(input, hiddenSelect) {\n        super.validationAttribute(input, hiddenSelect);\n        hiddenSelect.required = input.required;\n        input.required = false;\n    }\n    setHeight() {\n        const ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        ele.style.height = formatUnit(this.height);\n        if (this.allowFiltering && this.height.toString().indexOf('%') < 0) {\n            addClass([this.list], 'e-filter-list');\n        }\n        else {\n            removeClass([this.list], 'e-filter-list');\n        }\n    }\n    setCssClass() {\n        const wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.cssClass) {\n            addClass([wrap], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n        }\n        if (this.enableRtl) {\n            addClass([this.list], 'e-rtl');\n        }\n    }\n    setEnable() {\n        const ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.enabled) {\n            removeClass([ele], cssClass.disabled);\n        }\n        else {\n            addClass([ele], cssClass.disabled);\n        }\n    }\n    showSpinner() {\n        if (!this.spinner) {\n            this.spinner = this.createElement('div', { className: 'e-listbox-wrapper' });\n        }\n        this.spinner.style.height = formatUnit(this.height);\n        this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);\n        createSpinner({ target: this.spinner }, this.createElement);\n        showSpinner(this.spinner);\n    }\n    hideSpinner() {\n        if (this.spinner.querySelector('.e-spinner-pane')) {\n            hideSpinner(this.spinner);\n        }\n        if (this.spinner.parentElement) {\n            detach(this.spinner);\n        }\n    }\n    onInput() {\n        this.isDataSourceUpdate = false;\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        this.refreshClearIcon();\n    }\n    clearText() {\n        this.filterInput.value = '';\n        this.refreshClearIcon();\n        const event = document.createEvent('KeyboardEvent');\n        this.isValidKey = true;\n        this.KeyUp(event);\n    }\n    refreshClearIcon() {\n        if (this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon)) {\n            const clearElement = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n    }\n    onActionComplete(ulElement, list, e) {\n        let searchEle;\n        if (this.allowFiltering && this.list.getElementsByClassName('e-filter-parent')[0]) {\n            searchEle = this.list.getElementsByClassName('e-filter-parent')[0].cloneNode(true);\n        }\n        if (list.length === 0) {\n            const noRecElem = ulElement.childNodes[0];\n            if (noRecElem) {\n                ulElement.removeChild(noRecElem);\n            }\n        }\n        super.onActionComplete(ulElement, list, e);\n        if (this.allowFiltering && !isNullOrUndefined(searchEle)) {\n            this.list.insertBefore(searchEle, this.list.firstElementChild);\n            this.filterParent = this.list.getElementsByClassName('e-filter-parent')[0];\n            this.filterWireEvents(searchEle);\n        }\n        this.initWrapper();\n        this.setSelection();\n        this.initDraggable();\n        this.mainList = this.ulElement;\n        if (this.initLoad) {\n            this.jsonData = [];\n            extend(this.jsonData, list, []);\n            this.initToolbarAndStyles();\n            this.wireEvents();\n            if (this.showCheckbox) {\n                this.setCheckboxPosition();\n            }\n            if (this.allowFiltering) {\n                this.setFiltering();\n            }\n        }\n        else {\n            if (this.isDataSourceUpdate) {\n                this.jsonData = [];\n                extend(this.jsonData, list, []);\n                this.isDataSourceUpdate = false;\n            }\n            if (this.allowFiltering) {\n                const filterElem = this.list.getElementsByClassName('e-input-filter')[0];\n                const txtLength = this.filterInput.value.length;\n                filterElem.selectionStart = txtLength;\n                filterElem.selectionEnd = txtLength;\n                filterElem.focus();\n            }\n        }\n        if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf('#') > -1 && !isNullOrUndefined(e)) {\n            const scope = this.scope.replace('#', '');\n            const scopedLB = getComponent(document.getElementById(scope), this.getModuleName());\n            scopedLB.initToolbar();\n        }\n        this.initLoad = false;\n    }\n    initToolbarAndStyles() {\n        this.initToolbar();\n        this.setCssClass();\n        this.setEnable();\n        this.setHeight();\n    }\n    triggerDragStart(args) {\n        let badge;\n        args = extend(this.getDragArgs(args), { dragSelected: true });\n        if (Browser.isIos) {\n            this.list.style.overflow = 'hidden';\n        }\n        this.trigger('dragStart', args, (dragEventArgs) => {\n            this.allowDragAll = dragEventArgs.dragSelected;\n            if (!this.allowDragAll) {\n                badge = this.ulElement.getElementsByClassName('e-list-badge')[0];\n                if (badge) {\n                    detach(badge);\n                }\n            }\n        });\n    }\n    triggerDrag(args) {\n        let scrollParent;\n        let boundRect;\n        const scrollMoved = 36;\n        let scrollHeight = 10;\n        if (this.itemTemplate && args.target) {\n            if (args.target && args.target.closest('.e-list-item')) {\n                scrollHeight = args.target.closest('.e-list-item').scrollHeight;\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const listItem = args.element.querySelector('.e-list-item');\n                if (listItem) {\n                    scrollHeight = listItem.scrollHeight;\n                }\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const event = args.event;\n        let wrapper;\n        if (args.target && (args.target.classList.contains('e-listbox-wrapper') || args.target.classList.contains('e-list-item')\n            || args.target.classList.contains('e-filter-parent') || args.target.classList.contains('e-input-group')\n            || args.target.closest('.e-list-item'))) {\n            if (args.target.classList.contains('e-list-item') || args.target.classList.contains('e-filter-parent')\n                || args.target.classList.contains('e-input-group')\n                || args.target.closest('.e-list-item')) {\n                wrapper = args.target.closest('.e-listbox-wrapper');\n            }\n            else {\n                wrapper = args.target;\n            }\n            if (this.allowFiltering) {\n                scrollParent = wrapper.querySelector('.e-list-parent');\n            }\n            else {\n                scrollParent = wrapper;\n            }\n            boundRect = scrollParent.getBoundingClientRect();\n            if ((boundRect.y + scrollParent.offsetHeight) - (event.clientY + scrollMoved) < 1) {\n                scrollParent.scrollTop = scrollParent.scrollTop + scrollHeight;\n            }\n            else if ((event.clientY - scrollMoved) - boundRect.y < 1) {\n                scrollParent.scrollTop = scrollParent.scrollTop - scrollHeight;\n            }\n        }\n        if (args.target === null) {\n            return;\n        }\n        this.trigger('drag', this.getDragArgs(args));\n    }\n    beforeDragEnd(args) {\n        let items = [];\n        this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n        if (this.value.indexOf(this.dragValue) > -1) {\n            args.items = this.getDataByValues(this.value);\n        }\n        else {\n            args.items = this.getDataByValues([this.dragValue]);\n        }\n        extend(items, args.items);\n        this.trigger('beforeDrop', args);\n        if (args.items !== items) {\n            this.customDraggedItem = args.items;\n        }\n    }\n    dragEnd(args) {\n        let listData;\n        let liColl;\n        let jsonData;\n        let droppedData;\n        let selectedOptions;\n        let sortedData;\n        const dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n        const listObj = this.getComponent(args.droppedElement);\n        const getArgs = this.getDragArgs({ target: args.droppedElement }, true);\n        const sourceArgs = { previousData: this.dataSource };\n        const destArgs = { previousData: listObj.dataSource };\n        let dragArgs = extend({}, getArgs, { target: args.target, source: { previousData: this.dataSource },\n            previousIndex: args.previousIndex, currentIndex: args.currentIndex });\n        if (listObj !== this) {\n            const sourceArgs1 = extend(sourceArgs, { currentData: this.listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });\n        }\n        if (Browser.isIos) {\n            this.list.style.overflow = '';\n        }\n        const targetListObj = this.getComponent(args.target);\n        if (targetListObj && targetListObj.listData.length === 0) {\n            const noRecElem = targetListObj.ulElement.childNodes[0];\n            if (noRecElem) {\n                targetListObj.ulElement.removeChild(noRecElem);\n            }\n        }\n        if (listObj === this) {\n            const ul = this.ulElement;\n            listData = [].slice.call(this.listData);\n            liColl = [].slice.call(this.liCollections);\n            jsonData = [].slice.call(this.jsonData);\n            sortedData = [].slice.call(this.sortedData);\n            const toSortIdx = args.currentIndex;\n            let toIdx = args.currentIndex = this.getCurIdx(this, args.currentIndex);\n            const rIdx = listData.indexOf(this.getDataByValue(dropValue));\n            const jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));\n            const sIdx = sortedData.indexOf(this.getDataByValue(dropValue));\n            listData.splice(toIdx, 0, listData.splice(rIdx, 1)[0]);\n            sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n            jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n            liColl.splice(toIdx, 0, liColl.splice(rIdx, 1)[0]);\n            if (this.allowDragAll) {\n                selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];\n                if (!isNullOrUndefined(this.customDraggedItem)) {\n                    selectedOptions = [];\n                    this.customDraggedItem.forEach((item) => {\n                        selectedOptions.push(getValue(this.fields.value, item));\n                    });\n                }\n                selectedOptions.forEach((value) => {\n                    if (value !== dropValue) {\n                        const idx = listData.indexOf(this.getDataByValue(value));\n                        const jsonIdx = jsonData.indexOf(this.getDataByValue(value));\n                        const sIdx = sortedData.indexOf(this.getDataByValue(value));\n                        if (idx > toIdx) {\n                            toIdx++;\n                        }\n                        jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n                        listData.splice(toIdx, 0, listData.splice(idx, 1)[0]);\n                        sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n                        liColl.splice(toIdx, 0, liColl.splice(idx, 1)[0]);\n                        ul.insertBefore(this.getItems()[this.getIndexByValue(value)], ul.getElementsByClassName('e-placeholder')[0]);\n                    }\n                });\n            }\n            this.listData = listData;\n            this.jsonData = jsonData;\n            this.sortedData = sortedData;\n            this.liCollections = liColl;\n        }\n        else {\n            let li;\n            const fLiColl = [].slice.call(this.liCollections);\n            let currIdx = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);\n            const ul = listObj.ulElement;\n            listData = [].slice.call(listObj.listData);\n            liColl = [].slice.call(listObj.liCollections);\n            jsonData = [].slice.call(listObj.jsonData);\n            sortedData = [].slice.call(listObj.sortedData);\n            selectedOptions = (this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll)\n                ? this.value : [dropValue];\n            if (!isNullOrUndefined(this.customDraggedItem)) {\n                selectedOptions = [];\n                this.customDraggedItem.forEach((item) => {\n                    selectedOptions.push(getValue(this.fields.value, item));\n                });\n            }\n            const fListData = [].slice.call(this.listData);\n            const fSortData = [].slice.call(this.sortedData);\n            selectedOptions.forEach((value, index) => {\n                droppedData = this.getDataByValue(value);\n                const srcIdx = this.listData.indexOf(droppedData);\n                const jsonSrcIdx = this.jsonData.indexOf(droppedData);\n                const sortIdx = this.sortedData.indexOf(droppedData);\n                fListData.splice(srcIdx, 1);\n                this.jsonData.splice(jsonSrcIdx, 1);\n                fSortData.splice(sortIdx, 1);\n                this.listData = fListData;\n                this.sortedData = fSortData;\n                const destIdx = value === dropValue ? args.currentIndex : currIdx;\n                listData.splice(destIdx, 0, droppedData);\n                jsonData.splice(destIdx, 0, droppedData);\n                sortedData.splice(destIdx, 0, droppedData);\n                liColl.splice(destIdx, 0, fLiColl.splice(srcIdx, 1)[0]);\n                if (!value) {\n                    const liCollElem = this.getItems();\n                    for (let i = 0; i < liCollElem.length; i++) {\n                        if (liCollElem[i].getAttribute('data-value') === null && liCollElem[i].classList.contains('e-list-item')) {\n                            li = liCollElem[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    li = this.getItems()[this.getIndexByValue(value)];\n                }\n                if (!li) {\n                    li = args.helper;\n                }\n                this.removeSelected(this, value === dropValue ? [args.droppedElement] : [li]);\n                ul.insertBefore(li, ul.getElementsByClassName('e-placeholder')[0]);\n                currIdx++;\n            });\n            if (this.fields.groupBy) {\n                const sourceElem = this.renderItems(this.listData, this.fields);\n                this.updateListItems(sourceElem, this.ulElement);\n                this.setSelection();\n            }\n            if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox\n                !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {\n                const sortable = getComponent(ul, 'sortable');\n                const sourceElem = listObj.renderItems(listData, listObj.fields);\n                listObj.updateListItems(sourceElem, ul);\n                this.setSelection();\n                if (sortable.placeHolderElement) {\n                    ul.appendChild(sortable.placeHolderElement);\n                }\n                ul.appendChild(args.helper);\n                listObj.setSelection();\n            }\n            this.liCollections = fLiColl;\n            listObj.liCollections = liColl;\n            listObj.jsonData = extend([], [], jsonData, false);\n            listObj.listData = extend([], [], listData, false);\n            listObj.sortedData = extend([], [], sortedData, false);\n            if (this.listData.length === 0) {\n                this.l10nUpdate();\n            }\n        }\n        if (this === listObj) {\n            const sourceArgs1 = extend(sourceArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1 });\n        }\n        else {\n            const dragArgs1 = extend(destArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { destination: dragArgs1 });\n        }\n        if (!isNullOrUndefined(this.customDraggedItem)) {\n            dragArgs.items = this.customDraggedItem;\n        }\n        this.trigger('drop', dragArgs);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const liCollElem = dragArgs.elements;\n        if (liCollElem.length) {\n            for (let i = 0; i < liCollElem.length; i++) {\n                liCollElem[i].classList.remove('e-grabbed');\n            }\n        }\n    }\n    updateListItems(sourceElem, destElem) {\n        const i = 0;\n        destElem.innerHTML = '';\n        while (i < sourceElem.childNodes.length) {\n            destElem.appendChild(sourceElem.childNodes[i]);\n        }\n    }\n    removeSelected(listObj, elems) {\n        if (listObj.selectionSettings.showCheckbox) {\n            elems.forEach((ele) => { ele.getElementsByClassName('e-frame')[0].classList.remove('e-check'); });\n        }\n        else {\n            removeClass(elems, cssClass.selected);\n        }\n    }\n    getCurIdx(listObj, idx) {\n        if (listObj.fields.groupBy) {\n            idx -= [].slice.call(listObj.ulElement.children).slice(0, idx)\n                .filter((ele) => ele.classList.contains(cssClass.group)).length;\n        }\n        return idx;\n    }\n    getComponent(li) {\n        let listObj;\n        const ele = (this.element.tagName === 'EJS-LISTBOX' ? closest(li, '.e-listbox')\n            : closest(li, '.e-listbox-wrapper') && closest(li, '.e-listbox-wrapper').querySelector('.e-listbox'));\n        if (ele) {\n            listObj = getComponent(ele, this.getModuleName());\n        }\n        return listObj;\n    }\n    /**\n     * Sets the enabled state to DropDownBase.\n     *\n     * @returns {void}\n     */\n    setEnabled() {\n        this.element.setAttribute('aria-disabled', (this.enabled) ? 'false' : 'true');\n    }\n    listOption(dataSource, fields) {\n        this.listCurrentOptions = super.listOption(dataSource, fields);\n        this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);\n        this.notify('listoption', { module: 'CheckBoxSelection' });\n        return this.listCurrentOptions;\n    }\n    triggerBeforeItemRender(e) {\n        e.item.setAttribute('tabindex', '-1');\n        this.trigger('beforeItemRender', { element: e.item, item: e.curData });\n    }\n    requiredModules() {\n        const modules = [];\n        if (this.selectionSettings.showCheckbox) {\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    /**\n     * This method is used to enable or disable the items in the ListBox based on the items and enable argument.\n     *\n     * @param {string[]} items - Text items that needs to be enabled/disabled.\n     * @param {boolean} enable - Set `true`/`false` to enable/disable the list items.\n     * @param {boolean} isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns {void}\n     */\n    enableItems(items, enable = true, isValue) {\n        let li;\n        items.forEach((item) => {\n            const text = item;\n            li = this.findListElement(this.list, 'li', 'data-value', isValue ? text : this.getValueByText(text));\n            if (!li) {\n                return;\n            }\n            if (enable) {\n                removeClass([li], cssClass.disabled);\n                li.removeAttribute('aria-disabled');\n            }\n            else {\n                addClass([li], cssClass.disabled);\n                li.setAttribute('aria-disabled', 'true');\n            }\n        });\n    }\n    /**\n     * Based on the state parameter, specified list item will be selected/deselected.\n     *\n     * @param {string[]} items - Array of text value of the item.\n     * @param {boolean} state - Set `true`/`false` to select/un select the list items.\n     * @param {boolean} isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns {void}\n     */\n    selectItems(items, state = true, isValue) {\n        if (state && !this.selectionSettings.showCheckbox && this.selectionSettings.mode === 'Single') {\n            this.getSelectedItems().forEach((li) => {\n                li.classList.remove('e-active');\n                li.removeAttribute('aria-selected');\n                removeClass([li], cssClass.selected);\n            });\n        }\n        this.setSelection(items, state, !isValue);\n        this.updateSelectedOptions();\n        let selElems = [];\n        for (let i = 0; i < items.length; i++) {\n            const liColl = this.list.querySelectorAll('[aria-selected=\"true\"]');\n            for (let j = 0; j < liColl.length; j++) {\n                if (items[i] === this.getFormattedValue(liColl[j].getAttribute('data-value'))) {\n                    selElems.push(liColl[j]);\n                }\n            }\n        }\n        this.triggerChange(selElems, null);\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     *\n     * @param {boolean} state - Set `true`/`false` to select/un select the entire list items.\n     * @returns {void}\n     */\n    selectAll(state = true) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Adds a new item to the list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     *\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the list.\n     * @returns {void}.\n     */\n    addItems(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     *\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItems(items, itemIndex) {\n        this.removeItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     *\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItem(items, itemIndex) {\n        const liCollections = [];\n        const liElement = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n        if (items) {\n            items = (items instanceof Array ? items : [items]);\n            const fields = this.fields;\n            let dataValue;\n            let objValue;\n            const dupData = [];\n            let itemIdx;\n            extend(dupData, [], this.jsonData);\n            const removeIdxes = [];\n            const removeLiIdxes = [];\n            for (let j = 0; j < items.length; j++) {\n                if (items[j] instanceof Object) {\n                    dataValue = getValue(fields.value, items[j]);\n                }\n                else {\n                    dataValue = items[j].toString();\n                }\n                for (let i = 0, len = dupData.length; i < len; i++) {\n                    if (dupData[i] instanceof Object) {\n                        objValue = getValue(fields.value, dupData[i]);\n                    }\n                    else {\n                        objValue = dupData[i].toString();\n                    }\n                    if (objValue === dataValue) {\n                        itemIdx = this.getIndexByValue(dataValue);\n                        const idx = itemIdx === i ? itemIdx : i;\n                        liCollections.push(liElement[idx]);\n                        removeIdxes.push(idx);\n                        removeLiIdxes.push(idx);\n                    }\n                }\n            }\n            for (let k = removeIdxes.length - 1; k >= 0; k--) {\n                this.listData.splice(removeIdxes[k], 1);\n            }\n            for (let k = removeIdxes.length - 1; k >= 0; k--) {\n                this.jsonData.splice(removeIdxes[k], 1);\n            }\n            for (let k = removeLiIdxes.length - 1; k >= 0; k--) {\n                this.updateLiCollection(removeLiIdxes[k]);\n            }\n        }\n        else {\n            itemIndex = itemIndex ? itemIndex : 0;\n            liCollections.push(liElement[itemIndex]);\n            this.listData.splice(itemIndex, 1);\n            this.jsonData.splice(itemIndex, 1);\n            this.updateLiCollection(itemIndex);\n        }\n        for (let i = 0; i < liCollections.length; i++) {\n            this.ulElement.removeChild(liCollections[i]);\n        }\n        if (this.listData.length === 0) {\n            this.l10nUpdate();\n        }\n        this.value = [];\n        this.updateToolBarState();\n    }\n    /**\n     * Gets the array of data Object that matches the given array of values.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.\n     * @returns {object[]}.\n     */\n    getDataByValues(value) {\n        const data = [];\n        for (let i = 0; i < value.length; i++) {\n            data.push(this.getDataByValue(value[i]));\n        }\n        return data;\n    }\n    /**\n     * Moves the given value(s) / selected value(s) upwards.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveUp(value) {\n        const elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(true, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) downwards.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveDown(value) {\n        const elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(false, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) in Top of the list.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveTop(value) {\n        const elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(null, false, elem, true);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) in bottom of the list.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveBottom(value) {\n        const elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(true, false, elem, false, true);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.\n     *\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.\n     * @param {number} index - Specifies the index.\n     * @param {string} targetId - Specifies the target id.\n     * @returns {void}\n     */\n    moveTo(value, index, targetId) {\n        const elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        const tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n        this.moveData(this, tlistbox, false, elem, index);\n    }\n    /**\n     * Moves all the values from one ListBox to the scoped ListBox.\n     *\n     * @param  { string } targetId - Specifies the scoped ListBox ID.\n     * @param  { string } index - Specifies the index to where the items moved.\n     * @returns {void}\n     */\n    moveAllTo(targetId, index) {\n        if (this.listData.length > 0) {\n            const tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n            this.moveAllData(this, tlistbox, false, index);\n        }\n    }\n    /* eslint-disable */\n    /**\n     * Gets the updated dataSource in ListBox.\n     *\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]} - Updated DataSource.\n     */\n    /* eslint-enable */\n    getDataList() {\n        return this.jsonData;\n    }\n    /* eslint-disable */\n    /**\n     * Returns the sorted Data in ListBox.\n     *\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]} - Sorted data\n     */\n    /* eslint-enable */\n    getSortedList() {\n        let sortData;\n        let tempData;\n        sortData = tempData = this.sortedData;\n        if (this.fields.groupBy) {\n            sortData = [];\n            for (let i = 0; i < tempData.length; i++) {\n                if (tempData[i].isHeader) {\n                    continue;\n                }\n                sortData.push(tempData[i]);\n            }\n        }\n        return sortData;\n    }\n    getElemByValue(value) {\n        const elem = [];\n        for (let i = 0; i < value.length; i++) {\n            elem.push(this.ulElement.querySelector('[data-value =\"' + value[i] + '\"]'));\n        }\n        return elem;\n    }\n    updateLiCollection(index) {\n        const tempLi = [].slice.call(this.liCollections);\n        tempLi.splice(index, 1);\n        this.liCollections = tempLi;\n    }\n    selectAllItems(state, event) {\n        [].slice.call(this.getItems()).forEach((li) => {\n            if (!li.classList.contains(cssClass.disabled)) {\n                if (this.selectionSettings.showCheckbox) {\n                    const ele = li.getElementsByClassName('e-check')[0];\n                    if ((!ele && state) || (ele && !state)) {\n                        this.notify('updatelist', { li: li, module: 'listbox' });\n                        if (this.maximumSelectionLength >= this.list.querySelectorAll('.e-list-item span.e-check').length) {\n                            this.checkMaxSelection();\n                        }\n                    }\n                }\n                else {\n                    if (state) {\n                        li.classList.add(cssClass.selected);\n                    }\n                    else {\n                        li.classList.remove(cssClass.selected);\n                    }\n                }\n            }\n        });\n        this.updateSelectedOptions();\n        if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n            const liEle = this.list.getElementsByTagName('li');\n            let index = 0;\n            if (state) {\n                for (index = 0; index < liEle.length; index++) {\n                    const dataValue1 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    if (!this.value.some((e) => e === dataValue1)) {\n                        this.value.push(this.getFormattedValue(liEle[index].getAttribute('data-value')));\n                    }\n                }\n            }\n            else {\n                for (index = 0; index < liEle.length; index++) {\n                    const dataValue2 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    this.value = this.value.filter((e) => e !== dataValue2);\n                }\n            }\n            if (document.querySelectorAll('ul').length < 2) {\n                this.updateMainList();\n            }\n        }\n        this.triggerChange(this.getSelectedItems(), event);\n    }\n    updateMainList() {\n        const mainList = this.mainList.querySelectorAll('.e-list-item');\n        const ulList = this.ulElement.querySelectorAll('.e-list-item');\n        const mainCount = mainList.length;\n        const ulEleCount = ulList.length;\n        if (this.selectionSettings.showCheckbox || (document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount)) {\n            let listindex = 0;\n            let valueindex = 0;\n            let count = 0;\n            for (listindex; listindex < mainCount;) {\n                if (this.value) {\n                    for (valueindex; valueindex < this.value.length; valueindex++) {\n                        if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {\n                            count++;\n                        }\n                    }\n                }\n                if (!count && this.selectionSettings.showCheckbox) {\n                    mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');\n                }\n                if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {\n                    this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);\n                    listindex = 0;\n                }\n                else {\n                    listindex++;\n                }\n                count = 0;\n                valueindex = 0;\n            }\n        }\n    }\n    wireEvents() {\n        const form = closest(this.element, 'form');\n        const wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.add(this.list, 'click', this.clickHandler, this);\n        EventHandler.add(wrapper, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(wrapper, 'focusout', this.focusOutHandler, this);\n        this.wireToolbarEvent();\n        if (this.selectionSettings.showCheckbox) {\n            EventHandler.remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);\n        }\n        if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        }\n        if (form) {\n            EventHandler.add(form, 'reset', this.formResetHandler, this);\n        }\n    }\n    wireToolbarEvent() {\n        if (this.toolbarSettings.items.length) {\n            EventHandler.add(this.getToolElem(), 'click', this.toolbarClickHandler, this);\n        }\n    }\n    unwireEvents() {\n        const form = closest(this.element, 'form');\n        const wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.remove(this.list, 'click', this.clickHandler);\n        EventHandler.remove(wrapper, 'keydown', this.keyDownHandler);\n        EventHandler.remove(wrapper, 'focusout', this.focusOutHandler);\n        if (this.allowFiltering && this.clearFilterIconElem) {\n            EventHandler.remove(this.clearFilterIconElem, 'click', this.clearText);\n        }\n        if (this.toolbarSettings.items.length) {\n            EventHandler.remove(this.getToolElem(), 'click', this.toolbarClickHandler);\n        }\n        if (form) {\n            EventHandler.remove(form, 'reset', this.formResetHandler);\n        }\n    }\n    clickHandler(e) {\n        this.selectHandler(e);\n    }\n    checkSelectAll() {\n        let searchCount = 0;\n        const liItems = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        for (let i = 0; i < liItems.length; i++) {\n            if (!liItems[i].classList.contains('e-disabled')) {\n                searchCount++;\n            }\n        }\n        const len = this.getSelectedItems().length;\n        if (this.showSelectAll && searchCount) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection',\n                value: (searchCount === len) ? 'check' : (len === 0) ? 'uncheck' : 'indeterminate' });\n        }\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.allowFiltering) {\n            const filterType = this.inputString === '' ? 'contains' : this.filterType;\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (dataType === null) {\n                dataType = this.typeOfData(this.jsonData).typeof;\n            }\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                const fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query : this.query ? this.query : new Query();\n        }\n        return filterQuery;\n    }\n    setFiltering() {\n        let filterInputObj;\n        if (this.initLoad || isNullOrUndefined(this.filterParent)) {\n            this.filterParent = this.createElement('span', {\n                className: listBoxClasses.filterParent\n            });\n            this.filterInput = this.createElement('input', {\n                attrs: { type: 'text' },\n                className: listBoxClasses.filterInput\n            });\n            this.element.parentNode.insertBefore(this.filterInput, this.element);\n            filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: [listBoxClasses.filterBarClearIcon],\n                properties: { placeholder: this.filterBarPlaceholder }\n            }, this.createElement);\n            append([filterInputObj.container], this.filterParent);\n            prepend([this.filterParent], this.list);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'aria-label': 'search list item',\n                'autocomplete': 'off',\n                'autocorrect': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            if (this.height.toString().indexOf('%') < 0) {\n                addClass([this.list], 'e-filter-list');\n            }\n            this.inputString = this.filterInput.value;\n            this.filterWireEvents();\n            return filterInputObj;\n        }\n    }\n    filterWireEvents(filterElem) {\n        if (filterElem) {\n            this.filterInput = filterElem.querySelector('.e-input-filter');\n        }\n        this.clearFilterIconElem = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n        if (this.clearFilterIconElem) {\n            EventHandler.add(this.clearFilterIconElem, 'click', this.clearText, this);\n            if (!filterElem) {\n                this.clearFilterIconElem.style.visibility = 'hidden';\n            }\n        }\n        EventHandler.add(this.filterInput, 'input', this.onInput, this);\n        EventHandler.add(this.filterInput, 'keyup', this.KeyUp, this);\n        EventHandler.add(this.filterInput, 'keydown', this.onKeyDown, this);\n    }\n    selectHandler(e, isKey) {\n        let isSelect = true;\n        let currSelIdx;\n        const li = closest(e.target, '.' + 'e-list-item');\n        let selectedLi = [li];\n        if (li && li.parentElement) {\n            currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            if (!this.selectionSettings.showCheckbox) {\n                if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {\n                    li.classList.remove(cssClass.selected);\n                    li.removeAttribute('aria-selected');\n                    isSelect = false;\n                }\n                else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || e.metaKey || Browser.isDevice))) {\n                    this.getSelectedItems().forEach((ele) => {\n                        ele.removeAttribute('aria-selected');\n                    });\n                    removeClass(this.getSelectedItems(), cssClass.selected);\n                }\n            }\n            else {\n                isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n            }\n            if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {\n                selectedLi = [].slice.call(li.parentElement.children)\n                    .slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1)\n                    .filter((ele) => { return ele.classList.contains('e-list-item'); });\n            }\n            else {\n                this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            }\n            if (isSelect) {\n                if (!this.selectionSettings.showCheckbox) {\n                    addClass(selectedLi, cssClass.selected);\n                }\n                selectedLi.forEach((ele) => {\n                    ele.setAttribute('aria-selected', 'true');\n                });\n                this.list.setAttribute('aria-activedescendant', li.id);\n            }\n            else {\n                selectedLi.forEach((ele) => {\n                    ele.setAttribute('aria-selected', 'false');\n                });\n            }\n            if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) &&\n                (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) &&\n                !(this.maximumSelectionLength < (this.value && this.value.length))) {\n                this.notify('updatelist', { li: li, e: e, module: 'listbox' });\n            }\n            if (this.allowFiltering && !isKey) {\n                const liDataValue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (!isSelect) {\n                    this.value = this.value.filter((value1) => value1 !== liDataValue);\n                }\n                else {\n                    const values = [];\n                    extend(values, this.value);\n                    values.push(liDataValue);\n                    this.value = values;\n                }\n                if (document.querySelectorAll('ul').length < 2) {\n                    this.updateMainList();\n                }\n            }\n            this.updateSelectedOptions();\n            this.triggerChange(this.getSelectedItems(), e);\n            if (this.list) {\n                this.checkMaxSelection();\n            }\n        }\n    }\n    triggerChange(selectedLis, event) {\n        this.trigger('change', { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event: event });\n    }\n    getDataByElems(elems) {\n        const data = [];\n        for (let i = 0, len = elems.length; i < len; i++) {\n            data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));\n        }\n        return data;\n    }\n    getDataByElements(elems) {\n        const data = [];\n        let value;\n        let sIdx = 0;\n        if (!isNullOrUndefined(this.listData)) {\n            const type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (const item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && item === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (const item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            return data;\n        }\n        return null;\n    }\n    checkMaxSelection() {\n        const limit = this.list.querySelectorAll('.e-list-item span.e-check').length;\n        if (this.selectionSettings.showCheckbox) {\n            let index = 0;\n            const liCollElem = this.list.getElementsByClassName('e-list-item');\n            for (index; index < liCollElem.length; index++) {\n                if (!liCollElem[index].querySelector('.e-frame.e-check')) {\n                    if (limit === this.maximumSelectionLength) {\n                        liCollElem[index].classList.add('e-disable');\n                    }\n                    else if (liCollElem[index].classList.contains('e-disable')) {\n                        liCollElem[index].classList.remove('e-disable');\n                    }\n                }\n            }\n        }\n    }\n    toolbarClickHandler(e) {\n        const btn = closest(e.target, 'button');\n        if (btn) {\n            this.toolbarAction = btn.getAttribute('data-value');\n            if (btn.disabled) {\n                return;\n            }\n            switch (this.toolbarAction) {\n                case 'moveUp':\n                    this.moveUpDown(true);\n                    break;\n                case 'moveDown':\n                    this.moveUpDown();\n                    break;\n                case 'moveTo':\n                    this.moveItemTo();\n                    break;\n                case 'moveFrom':\n                    this.moveItemFrom();\n                    break;\n                case 'moveAllTo':\n                    this.moveAllItemTo();\n                    break;\n                case 'moveAllFrom':\n                    this.moveAllItemFrom();\n                    break;\n                default:\n                    this.trigger('actionBegin', { cancel: false, items: this.getDataByElems(this.getSelectedItems()),\n                        eventName: this.toolbarAction });\n                    break;\n            }\n        }\n    }\n    moveUpDown(isUp, isKey, value, isTop, isBottom) {\n        let elems = this.getSelectedItems();\n        if (value) {\n            elems = value;\n        }\n        if (((isUp && this.isSelected(this.ulElement.firstElementChild))\n            || (!isUp && this.isSelected(this.ulElement.lastElementChild))) && !value) {\n            return;\n        }\n        const tempItems = this.getDataByElems(elems);\n        const localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        this.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        (isUp ? elems : elems.reverse()).forEach((ele) => {\n            const jsonToIdx = Array.prototype.indexOf.call(this.ulElement.querySelectorAll('.e-list-item'), ele);\n            const idx = Array.prototype.indexOf.call(this.ulElement.children, ele);\n            if (isTop) {\n                moveTo(this.ulElement, this.ulElement, [idx], 0);\n                this.changeData(idx, 0, jsonToIdx, ele);\n            }\n            else if (isBottom) {\n                moveTo(this.ulElement, this.ulElement, [idx], this.ulElement.querySelectorAll('.e-list-item').length);\n                this.changeData(idx, this.ulElement.querySelectorAll('.e-list-item').length, jsonToIdx, ele);\n            }\n            else {\n                moveTo(this.ulElement, this.ulElement, [idx], isUp ? idx - 1 : idx + 2);\n                this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);\n            }\n        });\n        this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n        elems[0].focus();\n        if (!isKey && this.toolbarSettings.items.length) {\n            this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();\n        }\n        this.updateToolBarState();\n    }\n    moveItemTo() {\n        this.moveData(this, this.getScopedListBox());\n    }\n    moveItemFrom() {\n        this.moveData(this.getScopedListBox(), this);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {ListBox} fListBox - Specifies the from listbox.\n     * @param {ListBox} tListBox - Specifies the to listbox.\n     * @param {boolean} isKey - Specifies the key.\n     * @param {Element[]} value - Specifies the value.\n     * @param {number} index - Specifies the index.\n     * @returns {void}\n     * @private\n     */\n    moveData(fListBox, tListBox, isKey, value, index) {\n        const idx = [];\n        const dataIdx = [];\n        const jsonIdx = [];\n        const sortIdx = [];\n        const listData = [].slice.call(fListBox.listData);\n        const tListData = [].slice.call(tListBox.listData);\n        const sortData = [].slice.call(fListBox.sortedData);\n        let tSortData = [].slice.call(tListBox.sortedData);\n        const fliCollections = [].slice.call(fListBox.liCollections);\n        const dataLiIdx = [];\n        const tliCollections = [].slice.call(tListBox.liCollections);\n        const tempItems = [];\n        const data = [];\n        let elems = fListBox.getSelectedItems();\n        if (value) {\n            elems = value;\n        }\n        const isRefresh = tListBox.sortOrder !== 'None' || (tListBox.selectionSettings.showCheckbox !==\n            fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;\n        fListBox.value = [];\n        if (elems.length) {\n            this.removeSelected(fListBox, elems);\n            elems.forEach((ele) => {\n                idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem\n                // To update lb view data\n                dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele));\n                // To update lb listdata data\n                dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));\n                // To update lb sorted data\n                sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));\n                // To update lb original data\n                jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));\n            });\n            if (this.sortOrder !== 'None') {\n                sortIdx.forEach((i) => {\n                    tempItems.push(fListBox.sortedData[i]);\n                });\n            }\n            else {\n                jsonIdx.forEach((i) => {\n                    tempItems.push(fListBox.jsonData[i]);\n                });\n            }\n            const localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n            fListBox.trigger('actionBegin', localDataArgs);\n            if (localDataArgs.cancel) {\n                return;\n            }\n            const rLiCollection = [];\n            dataLiIdx.sort((n1, n2) => n1 - n2).reverse().forEach((i) => {\n                rLiCollection.push(fliCollections.splice(i, 1)[0]);\n            });\n            fListBox.liCollections = fliCollections;\n            if (index) {\n                const toColl = tliCollections.splice(0, index);\n                tListBox.liCollections = toColl.concat(rLiCollection.reverse()).concat(tliCollections);\n            }\n            else {\n                tListBox.liCollections = tliCollections.concat(rLiCollection.reverse());\n            }\n            if (tListBox.listData.length === 0) {\n                const noRecElem = tListBox.ulElement.childNodes[0];\n                if (noRecElem) {\n                    tListBox.ulElement.removeChild(noRecElem);\n                }\n            }\n            dataIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                listData.splice(i, 1)[0];\n            });\n            sortIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                sortData.splice(i, 1)[0];\n            });\n            jsonIdx.slice().reverse().forEach((i) => {\n                data.push(fListBox.jsonData.splice(i, 1)[0]);\n            });\n            if (isRefresh) {\n                if (fListBox.fields.groupBy) {\n                    const sourceElem = fListBox.renderItems(listData, fListBox.fields);\n                    fListBox.updateListItems(sourceElem, fListBox.ulElement);\n                }\n                else {\n                    elems.forEach((ele) => { detach(ele); });\n                }\n            }\n            else {\n                moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);\n                fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n            if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {\n                tListBox.mainList = tListBox.ulElement;\n            }\n            fListBox.updateMainList();\n            const tJsonData = [].slice.call(tListBox.jsonData);\n            tSortData = [].slice.call(tListBox.sortedData);\n            this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n            if (isKey) {\n                this.list.focus();\n            }\n            fListBox.listData = listData;\n            fListBox.sortedData = sortData;\n            index = (index) ? index : tListData.length;\n            for (let i = tempItems.length - 1; i >= 0; i--) {\n                tListData.splice(index, 0, tempItems[i]);\n                tJsonData.splice(index, 0, tempItems[i]);\n                tSortData.splice(index, 0, tempItems[i]);\n            }\n            tListBox.listData = tListData;\n            tListBox.jsonData = tJsonData;\n            tListBox.sortedData = tSortData;\n            if (isRefresh) {\n                const sourceElem = tListBox.renderItems(tListData, tListBox.fields);\n                tListBox.updateListItems(sourceElem, tListBox.ulElement);\n                tListBox.setSelection();\n                fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n            fListBox.updateSelectedOptions();\n            if (fListBox.listData.length === 0) {\n                fListBox.l10nUpdate();\n            }\n        }\n        if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {\n            fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute('data-value'));\n        }\n    }\n    selectNextList(elems, dataLiIdx, dataIdx, inst) {\n        const childCnt = inst.ulElement.querySelectorAll('.e-list-item').length;\n        let ele;\n        let liIdx;\n        let validIdx = -1;\n        if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {\n            liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];\n            ele = inst.ulElement.querySelectorAll('.e-list-item')[liIdx];\n            validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);\n            if (validIdx > -1) {\n                (inst.ulElement.querySelectorAll('.e-list-item')[validIdx].classList.add(cssClass.selected));\n            }\n        }\n    }\n    moveAllItemTo() {\n        this.moveAllData(this, this.getScopedListBox());\n    }\n    moveAllItemFrom() {\n        this.moveAllData(this.getScopedListBox(), this);\n    }\n    moveAllData(fListBox, tListBox, isKey, index) {\n        let listData = [].slice.call(tListBox.listData);\n        const jsonData = [].slice.call(tListBox.jsonData);\n        const isRefresh = tListBox.sortOrder !== 'None' || (tListBox.selectionSettings.showCheckbox !==\n            fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;\n        this.removeSelected(fListBox, fListBox.getSelectedItems());\n        const tempItems = [].slice.call(fListBox.listData);\n        const localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        fListBox.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        if (tListBox.listData.length === 0) {\n            const noRecElem = tListBox.ulElement.childNodes[0];\n            if (noRecElem) {\n                tListBox.ulElement.removeChild(noRecElem);\n            }\n        }\n        if (isRefresh) {\n            const noRecElem = fListBox.ulElement.childNodes[0];\n            if (noRecElem) {\n                fListBox.ulElement.removeChild(noRecElem);\n            }\n        }\n        moveTo(fListBox.ulElement, tListBox.ulElement, \n        // eslint-disable-next-line prefer-spread\n        Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number), index);\n        this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n        if (isKey) {\n            this.list.focus();\n        }\n        index = (index) ? index : listData.length;\n        for (let i = 0; i < fListBox.listData.length; i++) {\n            listData.splice(index + i, 0, fListBox.listData[i]);\n        }\n        for (let i = 0; i < fListBox.jsonData.length; i++) {\n            jsonData.splice(index + i, 0, fListBox.jsonData[i]);\n        }\n        const fliCollections = [].slice.call(fListBox.liCollections);\n        const tliCollections = [].slice.call(tListBox.liCollections);\n        fListBox.liCollections = [];\n        if (index) {\n            const toColl = tliCollections.splice(0, index);\n            tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);\n        }\n        else {\n            tListBox.liCollections = tliCollections.concat(fliCollections);\n        }\n        fListBox.value = [];\n        listData = listData\n            .filter((data) => data.isHeader !== true);\n        const sortedData = listData.filter(function (val) {\n            return tListBox.jsonData.indexOf(val) === -1;\n        });\n        for (let i = 0; i < sortedData.length; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            tListBox.jsonData.splice(index + i, 0, sortedData[i]);\n        }\n        tListBox.listData = listData;\n        if (fListBox.listData.length === fListBox.jsonData.length) {\n            fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];\n        }\n        else if (fListBox.allowFiltering) {\n            for (let i = 0; i < fListBox.listData.length; i++) {\n                for (let j = 0; j < fListBox.jsonData.length; j++) {\n                    if (fListBox.listData[i] === fListBox.jsonData[j]) {\n                        fListBox.jsonData.splice(j, 1);\n                    }\n                }\n            }\n            fListBox.listData = fListBox.sortedData = [];\n        }\n        if (isRefresh) {\n            const sourceElem = tListBox.renderItems(listData, tListBox.fields);\n            tListBox.updateListItems(sourceElem, tListBox.ulElement);\n            this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n        }\n        else {\n            tListBox.sortedData = listData;\n        }\n        fListBox.updateSelectedOptions();\n        if (fListBox.listData.length === 0) {\n            fListBox.l10nUpdate();\n        }\n    }\n    changeData(fromIdx, toIdx, jsonToIdx, ele) {\n        const listData = [].slice.call(this.listData);\n        const jsonData = [].slice.call(this.jsonData);\n        const sortData = [].slice.call(this.sortedData);\n        const jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);\n        const sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);\n        const liColl = [].slice.call(this.liCollections);\n        listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);\n        jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n        sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);\n        liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);\n        this.listData = listData;\n        this.jsonData = jsonData;\n        this.liCollections = liColl;\n        this.sortedData = sortData;\n    }\n    getSelectedItems() {\n        let ele = [];\n        if (this.selectionSettings.showCheckbox) {\n            [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach((cbox) => {\n                ele.push(closest(cbox, '.' + 'e-list-item'));\n            });\n        }\n        else {\n            ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));\n        }\n        return ele;\n    }\n    getScopedListBox() {\n        let listObj;\n        if (this.scope) {\n            [].slice.call(document.querySelectorAll(this.scope)).forEach((ele) => {\n                if (getComponent(ele, this.getModuleName())) {\n                    listObj = getComponent(ele, this.getModuleName());\n                }\n            });\n        }\n        return listObj;\n    }\n    getGrabbedItems(args) {\n        let grabbItems = false;\n        for (let i = 0; i < this.value.length; i++) {\n            if (this.value[i] === this.getFormattedValue(args.target.getAttribute('data-value'))) {\n                grabbItems = true;\n                break;\n            }\n        }\n        if (grabbItems) {\n            for (let i = 0; i < this.value.length; i++) {\n                const liColl = this.list.querySelectorAll('[aria-selected=\"true\"]');\n                for (let j = 0; j < liColl.length; j++) {\n                    if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute('data-value'))) {\n                        liColl[j].classList.add('e-grabbed');\n                    }\n                }\n            }\n        }\n        let elems;\n        if (this.isAngular) {\n            elems = Array.prototype.slice.call(this.element.getElementsByClassName('e-list-parent')[0].querySelectorAll('.e-grabbed'));\n        }\n        else {\n            elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll('.e-grabbed'));\n        }\n        return elems;\n    }\n    getDragArgs(args, isDragEnd) {\n        let elems = this.getGrabbedItems(args);\n        if (elems.length) {\n            if (isDragEnd) {\n                elems.push(args.target);\n            }\n        }\n        else {\n            elems = [args.target];\n        }\n        return { elements: elems, items: this.getDataByElems(elems) };\n    }\n    onKeyDown(e) {\n        this.keyDownHandler(e);\n        e.stopPropagation();\n    }\n    keyDownHandler(e) {\n        if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {\n            if (e.target && e.target.className.indexOf('e-edit-template') > -1) {\n                return;\n            }\n            e.preventDefault();\n            if (e.keyCode === 32 && this.ulElement.children.length) {\n                this.selectHandler({\n                    target: this.ulElement.getElementsByClassName('e-focused')[0],\n                    ctrlKey: e.ctrlKey, shiftKey: e.shiftKey\n                });\n            }\n            else if (e.keyCode === 65 && e.ctrlKey) {\n                this.selectAll();\n            }\n            else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {\n                this.moveUpDown(e.keyCode === 38 ? true : false, true);\n            }\n            else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {\n                const listObj = this.tBListBox || this.getScopedListBox();\n                if (e.keyCode === 39) {\n                    if (e.shiftKey) {\n                        this.moveAllData(this, listObj, true);\n                    }\n                    else {\n                        this.moveData(this, listObj, true);\n                    }\n                }\n                else {\n                    if (e.shiftKey) {\n                        this.moveAllData(listObj, this, true);\n                    }\n                    else {\n                        this.moveData(listObj, this, true);\n                    }\n                }\n            }\n            else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== 'KeyA') {\n                this.upDownKeyHandler(e);\n            }\n        }\n        else if (this.allowFiltering) {\n            if (e.keyCode === 40 || e.keyCode === 38) {\n                this.upDownKeyHandler(e);\n            }\n        }\n    }\n    upDownKeyHandler(e) {\n        const ul = this.ulElement;\n        const defaultIdx = (e.keyCode === 40 || e.keyCode === 36) ? 0 : ul.childElementCount - 1;\n        let fliIdx = defaultIdx;\n        const fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(cssClass.selected)[0];\n        if (fli) {\n            if (e.keyCode !== 35 && e.keyCode !== 36) {\n                fliIdx = Array.prototype.indexOf.call(ul.children, fli);\n                if (e.keyCode === 40) {\n                    fliIdx++;\n                }\n                else {\n                    fliIdx--;\n                }\n                if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {\n                    return;\n                }\n            }\n            removeClass([fli], 'e-focused');\n        }\n        const cli = ul.children[fliIdx];\n        if (cli) {\n            fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);\n            if (fliIdx === -1) {\n                addClass([fli], 'e-focused');\n                return;\n            }\n            ul.children[fliIdx].focus();\n            ul.children[fliIdx].classList.add('e-focused');\n            if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {\n                this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);\n            }\n            if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {\n                const selectedidx = Array.prototype.indexOf.call(ul.children, fli);\n                const sidx = e.code === 'Home' ? 0 : selectedidx;\n                const eidx = e.code === 'Home' ? selectedidx : ul.children.length - 1;\n                for (let i = sidx; i <= eidx; i++) {\n                    const item = ul.children[i];\n                    this.notify('updatelist', { li: item, e: {\n                            target: this.ulElement.getElementsByClassName('e-focused')[0],\n                            ctrlKey: e.ctrlKey, shiftKey: e.shiftKey\n                        }, module: 'listbox' });\n                }\n            }\n        }\n    }\n    KeyUp(e) {\n        const char = String.fromCharCode(e.keyCode);\n        const isWordCharacter = char.match(/\\w/);\n        if (!isNullOrUndefined(isWordCharacter)) {\n            this.isValidKey = true;\n        }\n        this.isValidKey = (e.keyCode === 8) || (e.keyCode === 46) || this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                default:\n                    if (this.allowFiltering) {\n                        const eventArgsData = {\n                            preventDefaultAction: false,\n                            text: this.targetElement(),\n                            updateData: (dataSource, query, fields) => {\n                                if (eventArgsData.cancel) {\n                                    return;\n                                }\n                                this.isFiltered = true;\n                                this.remoteFilterAction = true;\n                                this.dataUpdater(dataSource, query, fields);\n                            },\n                            event: e,\n                            cancel: false\n                        };\n                        this.trigger('filtering', eventArgsData, (args) => {\n                            this.isDataFetched = false;\n                            if (args.cancel || (this.filterInput.value !== '' && this.isFiltered)) {\n                                return;\n                            }\n                            if (!args.cancel && !this.isCustomFiltering && !args.preventDefaultAction) {\n                                this.inputString = this.filterInput.value;\n                                this.filteringAction(this.jsonData, new Query(), this.fields);\n                            }\n                            if (!this.isFiltered && !this.isCustomFiltering && !args.preventDefaultAction) {\n                                this.dataUpdater(this.jsonData, new Query(), this.fields);\n                            }\n                        });\n                    }\n            }\n        }\n    }\n    /**\n     * To filter the data from given data source by using query.\n     *\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}.\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFiltering = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        this.resetList(dataSource, fields, query);\n    }\n    targetElement() {\n        this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];\n        return this.targetInputElement.value;\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        const backCommand = true;\n        if (this.targetElement().trim() === '') {\n            const list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (backCommand) {\n                this.remoteCustomValue = false;\n                this.onActionComplete(list, this.jsonData);\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.selectionSettings.showCheckbox, e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n        }\n    }\n    focusOutHandler() {\n        const ele = this.list.getElementsByClassName('e-focused')[0];\n        if (ele) {\n            ele.classList.remove('e-focused');\n        }\n        if (this.allowFiltering) {\n            this.refreshClearIcon();\n        }\n    }\n    getValidIndex(cli, index, keyCode) {\n        const cul = this.ulElement;\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            if (keyCode === 40 || keyCode === 36) {\n                index++;\n            }\n            else {\n                index--;\n            }\n        }\n        if (index < 0 || index === cul.childElementCount) {\n            return -1;\n        }\n        cli = cul.childNodes[index];\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            index = this.getValidIndex(cli, index, keyCode);\n        }\n        return index;\n    }\n    updateSelectedOptions() {\n        const selectedOptions = [];\n        const values = [];\n        extend(values, this.value);\n        this.getSelectedItems().forEach((ele) => {\n            if (!ele.classList.contains('e-grabbed')) {\n                selectedOptions.push(this.getFormattedValue(ele.getAttribute('data-value')));\n            }\n        });\n        if (this.mainList.childElementCount === this.ulElement.childElementCount) {\n            if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n                for (let i = 0; i < selectedOptions.length; i++) {\n                    if (values.indexOf(selectedOptions[i]) > -1) {\n                        continue;\n                    }\n                    else {\n                        values.push(selectedOptions[i]);\n                    }\n                }\n                this.setProperties({ value: values }, true);\n            }\n            else {\n                this.setProperties({ value: selectedOptions }, true);\n            }\n        }\n        this.updateSelectTag();\n        this.updateToolBarState();\n        if (this.tBListBox) {\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    clearSelection(values = this.value) {\n        if (this.selectionSettings.showCheckbox) {\n            let dvalue;\n            this.getSelectedItems().forEach((li) => {\n                dvalue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (values.indexOf(dvalue) < 0) {\n                    li.getElementsByClassName('e-check')[0].classList.remove('e-check');\n                    li.removeAttribute('aria-selected');\n                }\n            });\n        }\n    }\n    setSelection(values = this.value, isSelect = true, isText = false) {\n        let li;\n        let liselect;\n        if (values) {\n            values.forEach((value) => {\n                let text;\n                if (isText) {\n                    text = this.getValueByText(value);\n                }\n                else {\n                    text = value;\n                }\n                if (typeof (text) === 'string') {\n                    text = text.split('\\\\').join('\\\\\\\\');\n                    li = this.list.querySelector('[data-value=\"' + text.replace(/\"/g, '\\\\\"') + '\"]');\n                }\n                else {\n                    li = this.list.querySelector('[data-value=\"' + text + '\"]');\n                }\n                if (li) {\n                    if (this.selectionSettings.showCheckbox) {\n                        liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n                    }\n                    else {\n                        liselect = li.classList.contains('e-selected');\n                    }\n                    if (!isSelect && liselect || isSelect && !liselect && li) {\n                        if (this.selectionSettings.showCheckbox) {\n                            this.notify('updatelist', { li: li, module: 'listbox' });\n                            li.focus();\n                        }\n                        else {\n                            if (isSelect) {\n                                li.classList.add(cssClass.selected);\n                                li.setAttribute('aria-selected', 'true');\n                                li.focus();\n                            }\n                            else {\n                                li.classList.remove(cssClass.selected);\n                                li.removeAttribute('aria-selected');\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        this.updateSelectTag();\n    }\n    updateSelectTag() {\n        const ele = this.getSelectTag();\n        let innerHTML = '';\n        ele.innerHTML = '';\n        if (this.value) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                innerHTML += '<option selected>' + this.value[i] + '</option>';\n            }\n            ele.innerHTML += innerHTML;\n            for (let i = 0, len = ele.childNodes.length; i < len; i++) {\n                ele.childNodes[i].setAttribute('value', this.value[i].toString());\n            }\n        }\n        this.checkSelectAll();\n    }\n    checkDisabledState(inst) {\n        return inst.ulElement.querySelectorAll('.' + cssClass.li).length === 0;\n    }\n    updateToolBarState() {\n        if (this.toolbarSettings.items.length) {\n            const listObj = this.getScopedListBox();\n            const wrap = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n            this.toolbarSettings.items.forEach((value) => {\n                const btn = wrap.querySelector('[data-value=\"' + value + '\"]');\n                switch (value) {\n                    case 'moveAllTo':\n                        btn.disabled = this.checkDisabledState(this);\n                        break;\n                    case 'moveAllFrom':\n                        btn.disabled = this.checkDisabledState(listObj);\n                        break;\n                    case 'moveFrom':\n                        btn.disabled = listObj.value && listObj.value.length ? false : true;\n                        break;\n                    case 'moveUp':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[0]) ? false : true;\n                        break;\n                    case 'moveDown':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[this.ulElement.childElementCount - 1]) ? false : true;\n                        break;\n                    default:\n                        btn.disabled = this.value && this.value.length ? false : true;\n                        break;\n                }\n            });\n        }\n    }\n    setCheckboxPosition() {\n        const listWrap = this.list;\n        if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {\n            listWrap.classList.remove('e-right');\n        }\n        if (this.selectionSettings.checkboxPosition === 'Right') {\n            listWrap.classList.add('e-right');\n        }\n    }\n    showCheckbox(showCheckbox) {\n        let index = 0;\n        const liColl = this.list.lastElementChild.querySelectorAll('li');\n        const liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;\n        if (showCheckbox) {\n            this.ulElement = this.renderItems(this.listData, this.fields);\n            this.mainList = this.ulElement;\n            this.list.removeChild(this.list.getElementsByTagName('ul')[0]);\n            this.list.appendChild(this.ulElement);\n            if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                const l10nShow = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                this.showSelectAll = true;\n                this.selectAllText = l10nShow.getConstant('selectAllText');\n                this.unSelectAllText = l10nShow.getConstant('unSelectAllText');\n                this.popupWrapper = this.list;\n                this.checkBoxSelectionModule.checkAllParent = null;\n                this.notify('selectAll', {});\n                this.checkSelectAll();\n            }\n        }\n        else {\n            if (this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);\n            }\n            for (index; index < liCollLen; index++) {\n                if (liColl[index].classList.contains('e-list-item')) {\n                    liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);\n                }\n                if (liColl[index].hasAttribute('aria-selected')) {\n                    liColl[index].removeAttribute('aria-selected');\n                }\n            }\n            this.mainList = this.ulElement;\n        }\n        this.value = [];\n    }\n    isSelected(ele) {\n        if (!isNullOrUndefined(ele)) {\n            return ele.classList.contains(cssClass.selected) || ele.querySelector('.e-check') !== null;\n        }\n        else {\n            return false;\n        }\n    }\n    getSelectTag() {\n        return this.list.getElementsByClassName('e-hidden-select')[0];\n    }\n    getToolElem() {\n        return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n    }\n    formResetHandler() {\n        this.value = this.initialSelectedOptions;\n    }\n    /**\n     * Return the module name.\n     *\n     * @private\n     * @returns {string} - Module name\n     */\n    getModuleName() {\n        return 'listbox';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Persist data\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    getLocaleName() {\n        return 'listbox';\n    }\n    destroy() {\n        this.unwireEvents();\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.innerHTML = '';\n        }\n        else {\n            this.element.style.display = 'inline-block';\n            if (this.toolbarSettings.items.length) {\n                this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);\n                detach(this.list.nextElementSibling);\n            }\n            this.list.parentElement.insertBefore(this.element, this.list);\n        }\n        super.destroy();\n        this.enableRtlElements = [];\n        this.liCollections = null;\n        this.list = null;\n        this.ulElement = null;\n        this.mainList = null;\n        this.spinner = null;\n        this.rippleFun = null;\n        if (this.itemTemplate) {\n            this.clearTemplate();\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {ListBoxModel} newProp - Specifies the new properties.\n     * @param {ListBoxModel} oldProp - Specifies the old properties.\n     * @returns {void}\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        const wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        super.onPropertyChanged(newProp, oldProp);\n        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrap], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrap], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        this.list.classList.add('e-rtl');\n                    }\n                    else {\n                        this.list.classList.remove('e-rtl');\n                    }\n                    break;\n                case 'value':\n                    removeClass(this.list.querySelectorAll('.' + cssClass.selected), cssClass.selected);\n                    this.clearSelection(this.value);\n                    this.setSelection();\n                    break;\n                case 'height':\n                    this.setHeight();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'allowDragAndDrop':\n                    if (newProp.allowDragAndDrop) {\n                        this.initDraggable();\n                    }\n                    else {\n                        getComponent(this.ulElement, 'sortable').destroy();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.setFiltering();\n                    }\n                    else {\n                        this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);\n                        this.filterParent = null;\n                        removeClass([this.list], 'e-filter-list');\n                    }\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        if (this.filterInput) {\n                            Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                        }\n                    }\n                    break;\n                case 'scope':\n                    if (this.allowDragAndDrop) {\n                        getComponent(this.ulElement, 'sortable').scope = newProp.scope;\n                    }\n                    if (this.toolbarSettings.items.length) {\n                        if (oldProp.scope) {\n                            getComponent(document.querySelector(oldProp.scope), this.getModuleName())\n                                .tBListBox = null;\n                        }\n                        if (newProp.scope) {\n                            getComponent(document.querySelector(newProp.scope), this.getModuleName())\n                                .tBListBox = this;\n                        }\n                    }\n                    break;\n                case 'toolbarSettings': {\n                    let ele;\n                    const pos = newProp.toolbarSettings.position;\n                    const toolElem = this.getToolElem();\n                    if (pos) {\n                        removeClass([wrap], ['e-right', 'e-left']);\n                        wrap.classList.add('e-' + pos.toLowerCase());\n                        if (pos === 'Left') {\n                            wrap.insertBefore(toolElem, this.list);\n                        }\n                        else {\n                            wrap.appendChild(toolElem);\n                        }\n                    }\n                    if (newProp.toolbarSettings.items) {\n                        if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {\n                            ele = this.list.parentElement;\n                            ele.parentElement.insertBefore(this.list, ele);\n                            detach(ele);\n                        }\n                        this.initToolbarAndStyles();\n                        this.wireToolbarEvent();\n                    }\n                    break;\n                }\n                case 'selectionSettings': {\n                    const showSelectAll = newProp.selectionSettings.showSelectAll;\n                    const showCheckbox = newProp.selectionSettings.showCheckbox;\n                    if (!isNullOrUndefined(showSelectAll)) {\n                        this.showSelectAll = showSelectAll;\n                        if (this.showSelectAll) {\n                            const l10nSel = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                            this.checkBoxSelectionModule.checkAllParent = null;\n                            this.showSelectAll = true;\n                            this.selectAllText = l10nSel.getConstant('selectAllText');\n                            this.unSelectAllText = l10nSel.getConstant('selectAllText');\n                            this.popupWrapper = this.list;\n                        }\n                        this.notify('selectAll', {});\n                        this.checkSelectAll();\n                    }\n                    if (!isNullOrUndefined(showCheckbox)) {\n                        this.showCheckbox(showCheckbox);\n                    }\n                    if (this.selectionSettings.showCheckbox) {\n                        this.setCheckboxPosition();\n                    }\n                    break;\n                }\n                case 'dataSource':\n                    this.isDataSourceUpdate = true;\n                    this.jsonData = [].slice.call(this.dataSource);\n                    break;\n            }\n        }\n    }\n};\n__decorate([\n    Property('')\n], ListBox.prototype, \"cssClass\", void 0);\n__decorate([\n    Property([])\n], ListBox.prototype, \"value\", void 0);\n__decorate([\n    Property('')\n], ListBox.prototype, \"height\", void 0);\n__decorate([\n    Property(true)\n], ListBox.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], ListBox.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property(false)\n], ListBox.prototype, \"allowDragAndDrop\", void 0);\n__decorate([\n    Property(1000)\n], ListBox.prototype, \"maximumSelectionLength\", void 0);\n__decorate([\n    Property(false)\n], ListBox.prototype, \"allowFiltering\", void 0);\n__decorate([\n    Property('')\n], ListBox.prototype, \"scope\", void 0);\n__decorate([\n    Property(true)\n], ListBox.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(null)\n], ListBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"beforeItemRender\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"filtering\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"beforeDrop\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"dragStart\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"drag\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"drop\", void 0);\n__decorate([\n    Event()\n], ListBox.prototype, \"dataBound\", void 0);\n__decorate([\n    Property(null)\n], ListBox.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Property('Request failed')\n], ListBox.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property(1000)\n], ListBox.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], ListBox.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Complex({}, ToolbarSettings)\n], ListBox.prototype, \"toolbarSettings\", void 0);\n__decorate([\n    Complex({}, SelectionSettings)\n], ListBox.prototype, \"selectionSettings\", void 0);\nListBox = ListBox_1 = __decorate([\n    NotifyPropertyChanges\n], ListBox);\nexport { ListBox };\nconst listBoxClasses = {\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    clearIcon: 'e-clear-icon'\n};\n","/**\n * export all modules from current location\n */\nexport * from './list-box';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyboardEvents, compile, Property, EventHandler, Animation, formatUnit, append, attributes } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, detach, Event, Complex, addClass, removeClass, closest, isUndefined, getValue, NotifyPropertyChanges, Browser } from '@syncfusion/ej2-base';\nimport { FieldSettings } from '../drop-down-base/drop-down-base';\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { Popup, isCollide, createSpinner, showSpinner, hideSpinner, getZindexPartial } from '@syncfusion/ej2-popups';\nimport { highlightSearch, revertHighlightSearch } from '../common/highlight-search';\n/**\n * The Mention component is used to list someone or something based on user input in textarea, input,\n * or any other editable element from which the user can select.\n */\nlet Mention = class Mention extends DropDownBase {\n    /**\n     * * Constructor for creating the widget\n     *\n     * @param {MentionModel} options - Specifies the MentionComponent model.\n     * @param {string | HTMLElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n     *\n     * @param {MentionModel} newProp - Returns the dynamic property value of the component.\n     * @param {MentionModel} oldProp - Returns the previous property value of the component.\n     * @private\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onPropertyChanged(newProp, oldProp) {\n        for (const prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'minLength':\n                    this.minLength = newProp.minLength;\n                    break;\n                case 'suffixText':\n                    this.suffixText = newProp.suffixText;\n                    break;\n                case 'allowSpaces':\n                    this.allowSpaces = newProp.allowSpaces;\n                    break;\n                case 'mentionChar':\n                    this.mentionChar = newProp.mentionChar;\n                    break;\n                case 'showMentionChar':\n                    this.showMentionChar = newProp.showMentionChar;\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        if (!isNullOrUndefined(oldClass)) {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(newClass)) {\n            newClass = (newClass.replace(/\\s+/g, ' ')).trim();\n        }\n        this.setCssClass(newClass, [this.inputElement], oldClass);\n        if (this.popupObj) {\n            this.setCssClass(newClass, [this.popupObj.element], oldClass);\n        }\n    }\n    setCssClass(cssClass, elements, oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n            addClass(elements, cssClass.split(' '));\n        }\n    }\n    initializeData() {\n        this.isSelected = false;\n        this.isFiltered = false;\n        this.beforePopupOpen = false;\n        this.initRemoteRender = false;\n        this.isListResetted = false;\n        this.isPopupOpen = false;\n        this.isCollided = false;\n        this.lineBreak = false;\n        this.keyConfigure = {\n            tab: 'tab',\n            enter: '13',\n            escape: '27',\n            end: '35',\n            home: '36',\n            down: '40',\n            up: '38',\n            pageUp: '33',\n            pageDown: '34',\n            open: 'alt+40',\n            close: 'shift+tab',\n            hide: 'alt+38',\n            space: '32'\n        };\n    }\n    /**\n     * Execute before render the list items\n     *\n     * @private\n     * @returns {void}\n     */\n    preRender() {\n        this.initializeData();\n        super.preRender();\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    render() {\n        const isSelector = typeof this.target === 'string';\n        this.inputElement = !isNullOrUndefined(this.target) ?\n            this.checkAndUpdateInternalComponent(isSelector\n                ? document.querySelector(this.target)\n                : this.target) : this.element;\n        if (this.isContentEditable(this.inputElement)) {\n            this.inputElement.setAttribute('contenteditable', 'true');\n            addClass([this.inputElement], ['e-mention']);\n            if (isNullOrUndefined(this.target)) {\n                addClass([this.inputElement], ['e-editable-element']);\n            }\n        }\n        this.inputElement.setAttribute('role', 'textbox');\n        this.queryString = this.elementValue();\n        this.wireEvent();\n    }\n    wireEvent() {\n        EventHandler.add(this.inputElement, 'keyup', this.onKeyUp, this);\n        this.bindCommonEvent();\n    }\n    unWireEvent() {\n        EventHandler.remove(this.inputElement, 'keyup', this.onKeyUp);\n        this.unBindCommonEvent();\n    }\n    bindCommonEvent() {\n        if (!Browser.isDevice) {\n            this.keyboardModule = new KeyboardEvents(this.inputElement, {\n                keyAction: this.keyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     *\n     * @private\n     * @returns {void}\n     */\n    hideSpinner() {\n        this.hideWaitingSpinner();\n    }\n    hideWaitingSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n        }\n        if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {\n            detach(this.spinnerTemplateElement);\n        }\n    }\n    checkAndUpdateInternalComponent(targetElement) {\n        if (!this.isVue && targetElement.classList.contains('e-richtexteditor')) {\n            return targetElement.querySelector('.e-content');\n        }\n        if (this.isVue && targetElement.nodeName === 'TEXTAREA' && targetElement.classList.contains('e-rte-hidden')) {\n            const parentElement = targetElement.parentElement;\n            if (parentElement && parentElement.classList.contains('e-richtexteditor')) {\n                return parentElement.querySelector('.e-content');\n            }\n        }\n        return targetElement;\n    }\n    /**\n     * Shows the spinner loader.\n     *\n     * @returns {void}\n     */\n    showWaitingSpinner() {\n        if (!isNullOrUndefined(this.popupObj)) {\n            if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {\n                this.spinnerElement = this.popupObj.element;\n                createSpinner({\n                    target: this.spinnerElement,\n                    width: Browser.isDevice ? '16px' : '14px'\n                }, this.createElement);\n                showSpinner(this.spinnerElement);\n            }\n            if (!isNullOrUndefined(this.spinnerTemplate)) {\n                this.setSpinnerTemplate();\n            }\n        }\n    }\n    keyActionHandler(e) {\n        const isNavigation = (e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown'\n            || e.action === 'home' || e.action === 'end');\n        const isTabAction = e.action === 'tab' || e.action === 'close';\n        if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape' && e.action !== 'space') {\n            this.renderList();\n        }\n        if (isNullOrUndefined(this.list) || (!isNullOrUndefined(this.liCollections) &&\n            isNavigation && this.liCollections.length === 0) || this.isRequested) {\n            return;\n        }\n        if (e.action === 'escape') {\n            e.preventDefault();\n        }\n        this.isSelected = e.action === 'escape' ? false : this.isSelected;\n        switch (e.action) {\n            case 'down':\n            case 'up':\n                this.isUpDownKey = true;\n                this.updateUpDownAction(e);\n                break;\n            case 'tab':\n                if (this.isPopupOpen) {\n                    e.preventDefault();\n                    const li = this.list.querySelector('.' + dropDownBaseClasses.selected);\n                    if (li) {\n                        this.setSelection(li, e);\n                    }\n                    if (this.isPopupOpen) {\n                        this.hidePopup(e);\n                    }\n                }\n                break;\n            case 'enter':\n                if (this.isPopupOpen) {\n                    e.preventDefault();\n                    if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {\n                        this.updateSelectedItem(this.selectedLI, e, false, true);\n                    }\n                }\n                break;\n            case 'escape':\n                if (this.isPopupOpen) {\n                    this.hidePopup(e);\n                }\n                break;\n        }\n    }\n    updateUpDownAction(e) {\n        const focusEle = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (this.isSelectFocusItem(focusEle)) {\n            this.setSelection(focusEle, e);\n        }\n        else if (!isNullOrUndefined(this.liCollections)) {\n            const li = this.list.querySelector('.' + dropDownBaseClasses.selected);\n            if (!isNullOrUndefined(li)) {\n                const value = this.getFormattedValue(li.getAttribute('data-value'));\n                this.activeIndex = this.getIndexByValue(value);\n            }\n            let index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n            let startIndex = 0;\n            startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n            index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n            const nextItem = isNullOrUndefined(this.activeIndex) ?\n                this.liCollections[startIndex] : this.liCollections[index];\n            if (!isNullOrUndefined(nextItem)) {\n                this.setSelection(nextItem, e);\n            }\n        }\n        if (this.isPopupOpen) {\n            e.preventDefault();\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    unBindCommonEvent() {\n        if (!Browser.isDevice) {\n            this.keyboardModule.destroy();\n        }\n    }\n    onKeyUp(e) {\n        let rangetextContent;\n        if (this.isUpDownKey && this.isPopupOpen && e.keyCode === 229) {\n            this.isUpDownKey = false;\n            return;\n        }\n        this.isTyped = e.code !== 'Enter' && e.code !== 'Space' && e.code !== 'ArrowDown' && e.code !== 'ArrowUp' ? true : false;\n        if (document.activeElement != this.inputElement) {\n            this.inputElement.focus();\n        }\n        if (this.isContentEditable(this.inputElement)) {\n            this.range = this.getCurrentRange();\n            rangetextContent = this.range.startContainer.textContent.split('');\n        }\n        let currentRange = this.getTextRange();\n        const lastWordRange = this.getLastLetter(currentRange);\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const Regex = new RegExp(this.mentionChar.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g');\n        const charRegex = new RegExp('[a-zA-Z]', 'g');\n        if (e.key === 'Shift' || e.keyCode === 37 || e.keyCode === 39) {\n            return;\n        }\n        if ((!currentRange || !lastWordRange) || e.code === 'Enter' || e.keyCode === 27 ||\n            (lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1) ||\n            (this.isContentEditable(this.inputElement) && this.range.startContainer &&\n                this.range.startContainer.previousElementSibling && this.range.startContainer.textContent.split('').length > 0 &&\n                (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf('') === -1 ||\n                    this.range.startContainer.nodeType === 1))) {\n            if (this.allowSpaces && currentRange && currentRange.trim() !== '' && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1\n                && !this.isMatchedText() && (currentRange.length > 1 && currentRange.replace(/\\u00A0/g, ' ').charAt(currentRange.length - 2) !== ' ') &&\n                (this.list && this.list.querySelectorAll('ul').length > 0)) {\n                this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ');\n                this.searchLists(e);\n            }\n            else if (this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && (e.code !== 'ArrowDown' && e.code !== 'ArrowUp')) {\n                this.hidePopup();\n                this.lineBreak = true;\n            }\n            return;\n        }\n        this.queryString = lastWordRange.replace(this.mentionChar, '');\n        if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) &&\n            this.queryString !== '' && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {\n            this.searchLists(e);\n            if (!this.isPopupOpen && this.queryString.length >= this.minLength) {\n                if (!this.isContentEditable(this.inputElement)) {\n                    this.showPopup();\n                }\n                else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {\n                    this.showPopup();\n                }\n            }\n        }\n        else if (lastWordRange.indexOf(this.mentionChar) === 0 && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj ||\n            (isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) ||\n                !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element)))) {\n            if (this.initRemoteRender && this.list && this.list.classList.contains('e-nodata')) {\n                this.searchLists(e);\n            }\n            this.resetList(this.dataSource, this.fields);\n            if (isNullOrUndefined(this.list)) {\n                this.initValue();\n            }\n            if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40) {\n                this.didPopupOpenByTypingInitialChar = true;\n                this.showPopup();\n                if (this.initRemoteRender && this.list.querySelectorAll('li').length === 0) {\n                    this.showWaitingSpinner();\n                }\n                this.lineBreak = false;\n            }\n        }\n        else if (this.allowSpaces && this.queryString !== '' && currentRange && currentRange.trim() !== '' && currentRange.replace('\\u00a0', ' ').lastIndexOf(' ') < currentRange.length - 1 &&\n            e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {\n            this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ');\n            this.searchLists(e);\n        }\n        else if (this.queryString === '' && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {\n            this.searchLists(e);\n            if (!this.isListResetted) {\n                this.resetList(this.dataSource, this.fields);\n            }\n        }\n        this.isListResetted = false;\n    }\n    isMatchedText() {\n        let isMatched = false;\n        for (let i = 0; i < (this.liCollections && this.liCollections.length); i++) {\n            if (this.getTextRange() &&\n                this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ').trim() === this.liCollections[i].getAttribute('data-value').toLowerCase()) {\n                isMatched = true;\n            }\n        }\n        return isMatched;\n    }\n    getCurrentRange() {\n        this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);\n        return this.range;\n    }\n    searchLists(e) {\n        this.isDataFetched = false;\n        if (isNullOrUndefined(this.list)) {\n            super.render();\n            this.unWireListEvents();\n            this.wireListEvents();\n        }\n        if (e.type !== 'mousedown' && (e.keyCode === 40 || e.keyCode === 38)) {\n            this.queryString = this.queryString === '' ? null : this.queryString;\n            this.beforePopupOpen = true;\n            this.resetList(this.dataSource, this.fields);\n            return;\n        }\n        this.isSelected = false;\n        this.activeIndex = null;\n        const eventArgs = {\n            preventDefaultAction: false,\n            text: this.queryString,\n            updateData: (dataSource, query, fields) => {\n                if (eventArgs.cancel) {\n                    return;\n                }\n                this.isFiltered = true;\n                this.filterAction(dataSource, query, fields);\n            },\n            cancel: false\n        };\n        this.trigger('filtering', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel && !this.isFiltered && !eventArgs.preventDefaultAction) {\n                this.filterAction(this.dataSource, null, this.fields);\n            }\n        });\n    }\n    filterAction(dataSource, query, fields) {\n        this.beforePopupOpen = true;\n        if (this.queryString.length >= this.minLength) {\n            this.resetList(dataSource, fields, query);\n            this.isListResetted = true;\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            this.beforePopupOpen = false;\n        }\n        this.setDataIndex();\n        this.renderReactTemplates();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onActionComplete(ulElement, list, e, isUpdated) {\n        super.onActionComplete(ulElement, list, e);\n        if (this.isActive) {\n            if (!isNullOrUndefined(ulElement)) {\n                attributes(ulElement, { 'id': this.inputElement.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n            }\n            let focusItem = ulElement.querySelector('.' + dropDownBaseClasses.li);\n            if (focusItem) {\n                focusItem.classList.add(dropDownBaseClasses.selected);\n                this.selectedLI = focusItem;\n                const value = this.getFormattedValue(focusItem.getAttribute('data-value'));\n                this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);\n            }\n        }\n    }\n    setDataIndex() {\n        for (let i = 0; this.liCollections && i < this.liCollections.length; i++) {\n            this.liCollections[i].setAttribute('data-index', i.toString());\n        }\n    }\n    listOption(dataSource, fieldsSettings) {\n        const fields = super.listOption(dataSource, fieldsSettings);\n        if (isNullOrUndefined(fields.itemCreated)) {\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    if (this.inputElement.tagName === this.getNgDirective() && this.itemTemplate) {\n                        setTimeout(() => {\n                            highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                        }, 0);\n                    }\n                    else {\n                        highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                    }\n                }\n            };\n        }\n        else {\n            const itemCreated = fields.itemCreated;\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                }\n                itemCreated.apply(this, [e]);\n            };\n        }\n        return fields;\n    }\n    elementValue() {\n        if (!this.isContentEditable(this.inputElement)) {\n            return this.inputElement.value.replace(this.mentionChar, '');\n        }\n        else {\n            return this.inputElement.textContent.replace(this.mentionChar, '');\n        }\n    }\n    getQuery(query) {\n        const filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        const filterType = (this.queryString === '' && !isNullOrUndefined(this.elementValue())) ? 'equal' : this.filterType;\n        const queryString = (this.queryString === '' && !isNullOrUndefined(this.elementValue())) ?\n            this.elementValue() : this.queryString;\n        if (this.isFiltered) {\n            return filterQuery;\n        }\n        if (this.queryString !== null && this.queryString !== '') {\n            const dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                const mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : '';\n                filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        if (!isNullOrUndefined(this.suggestionCount)) {\n            // Since defualt value of suggestioncount is 25, checked the condition\n            if (this.suggestionCount !== 25) {\n                for (let queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n                    if (filterQuery.queries[queryElements].fn === 'onTake') {\n                        filterQuery.queries.splice(queryElements, 1);\n                    }\n                }\n            }\n            filterQuery.take(this.suggestionCount);\n        }\n        return filterQuery;\n    }\n    renderHightSearch() {\n        if (this.highlight) {\n            for (let i = 0; i < this.liCollections.length; i++) {\n                const isHighlight = this.ulElement.querySelector('.e-active');\n                if (!isHighlight) {\n                    revertHighlightSearch(this.liCollections[i]);\n                    highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);\n                }\n            }\n        }\n    }\n    getTextRange() {\n        let text;\n        if (!this.isContentEditable(this.inputElement)) {\n            const component = this.inputElement;\n            if (!isNullOrUndefined(component)) {\n                const startPos = component.selectionStart;\n                if (component.value && startPos >= 0) {\n                    text = component.value.substring(0, startPos);\n                }\n            }\n        }\n        else {\n            if (this.range) {\n                const selectedElem = this.range.startContainer;\n                if (!isNullOrUndefined(selectedElem)) {\n                    const workingNodeContent = selectedElem.textContent;\n                    const selectStartOffset = this.range.startOffset;\n                    if (workingNodeContent && selectStartOffset >= 0) {\n                        text = workingNodeContent.substring(0, selectStartOffset);\n                    }\n                }\n            }\n        }\n        return text;\n    }\n    getLastLetter(text) {\n        if (isNullOrUndefined(text)) {\n            return '';\n        }\n        const textValue = text.replace(/\\u00A0/g, ' ');\n        const words = textValue.split(/\\s+/);\n        const wordCnt = words.length - 1;\n        return words[wordCnt].trim();\n    }\n    isContentEditable(element) {\n        return element && element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA';\n    }\n    /**\n     * Opens the popup that displays the list of items.\n     *\n     * @returns {void}\n     */\n    showPopup() {\n        this.beforePopupOpen = true;\n        if (document.activeElement != this.inputElement) {\n            this.inputElement.focus();\n        }\n        this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : '';\n        this.didPopupOpenByTypingInitialChar = false;\n        if (this.isContentEditable(this.inputElement)) {\n            this.range = this.getCurrentRange();\n        }\n        if (!this.isTyped) {\n            this.resetList(this.dataSource, this.fields);\n        }\n        if (isNullOrUndefined(this.list)) {\n            this.initValue();\n        }\n        this.renderPopup();\n        attributes(this.inputElement, { 'aria-activedescendant': this.selectedElementID });\n        if (this.selectedElementID == null) {\n            this.inputElement.removeAttribute('aria-activedescendant');\n        }\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-param */\n    /**\n     * Hides the popup if it is in an open state.\n     *\n     * @returns {void}\n     */\n    hidePopup(e) {\n        this.removeSelection();\n        this.closePopup(0, e);\n    }\n    closePopup(delay, e) {\n        if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n            return;\n        }\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.inputElement.removeAttribute('aria-owns');\n        this.inputElement.removeAttribute('aria-activedescendant');\n        this.beforePopupOpen = false;\n        const animModel = {\n            name: 'FadeOut',\n            duration: 100,\n            delay: delay ? delay : 0\n        };\n        const popupInstance = this.popupObj;\n        const eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };\n        this.trigger('closed', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel && this.popupObj) {\n                if (this.isPopupOpen) {\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                }\n                else {\n                    this.destroyPopup();\n                }\n            }\n        });\n    }\n    renderPopup() {\n        const args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                let popupEle;\n                if (isNullOrUndefined(this.target)) {\n                    popupEle = this.createElement('div', {\n                        id: this.inputElement.id + '_popup', className: 'e-mention e-popup ' + (this.cssClass != null ? this.cssClass : '')\n                    });\n                }\n                else {\n                    popupEle = this.element;\n                    if (this.cssClass != null) {\n                        addClass([popupEle], this.cssClass.split(' '));\n                    }\n                }\n                if (!isNullOrUndefined(this.target)) {\n                    popupEle.id = this.inputElement.id + '_popup';\n                }\n                this.listHeight = formatUnit(this.popupHeight);\n                if (!isNullOrUndefined(this.list.querySelector('li')) && !this.initRemoteRender) {\n                    const li = this.list.querySelector('.' + dropDownBaseClasses.focus);\n                    if (!isNullOrUndefined(li)) {\n                        this.selectedLI = li;\n                        const value = this.getFormattedValue(li.getAttribute('data-value'));\n                        this.selectEventCallback(li, this.getDataByValue(value), value, true);\n                    }\n                }\n                append([this.list], popupEle);\n                if (this.inputElement.parentElement && this.inputElement.parentElement.parentElement &&\n                    this.inputElement.parentElement.parentElement.classList.contains('e-richtexteditor')) {\n                    if (popupEle.firstElementChild && popupEle.firstElementChild.childElementCount > 0) {\n                        popupEle.firstElementChild.setAttribute('aria-owns', this.inputElement.parentElement.parentElement.id);\n                    }\n                }\n                if ((!this.popupObj || !document.body.contains(this.popupObj.element)) ||\n                    !document.contains(popupEle) && isNullOrUndefined(this.target)) {\n                    document.body.appendChild(popupEle);\n                }\n                let coordinates;\n                popupEle.style.visibility = 'hidden';\n                this.setHeight(popupEle);\n                const offsetValue = 0;\n                const left = 0;\n                this.initializePopup(popupEle, offsetValue, left);\n                this.checkCollision(popupEle);\n                popupEle.style.visibility = 'visible';\n                let popupLeft = popupEle.parentElement.offsetWidth - popupEle.offsetWidth;\n                let popupHeight = popupEle.offsetHeight;\n                addClass([popupEle], ['e-mention', 'e-popup', 'e-popup-close']);\n                if (!isNullOrUndefined(this.list)) {\n                    this.unWireListEvents();\n                    this.wireListEvents();\n                }\n                this.selectedElementID = this.selectedLI ? this.selectedLI.id : null;\n                attributes(this.inputElement, { 'aria-owns': this.inputElement.id + '_options', 'aria-activedescendant': this.selectedElementID });\n                if (this.selectedElementID == null) {\n                    this.inputElement.removeAttribute('aria-activedescendant');\n                }\n                const animModel = { name: 'FadeIn', duration: 100 };\n                this.beforePopupOpen = true;\n                const popupInstance = this.popupObj;\n                const eventArgs = { popup: popupInstance, cancel: false, animation: animModel };\n                this.trigger('opened', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        this.renderReactTemplates();\n                        if (this.popupObj) {\n                            this.popupObj.show(new Animation(eventArgs.animation), (this.zIndex === 1000) ? this.inputElement : null);\n                        }\n                        if (isNullOrUndefined(this.getTriggerCharPosition())) {\n                            return;\n                        }\n                        coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());\n                        if (!this.isCollided) {\n                            popupEle.style.cssText = 'top: '.concat(coordinates.top.toString(), 'px;\\n left: ').concat(coordinates.left.toString(), 'px;\\nposition: absolute;\\n display: block;');\n                        }\n                        else {\n                            if (this.collision.length > 0 && this.collision.indexOf('right') > -1 && this.collision.indexOf('bottom') === -1) {\n                                popupEle.style.cssText = 'top: '.concat(coordinates.top.toString(), 'px;\\n left: ').concat(popupLeft.toString(), 'px;\\nposition: absolute;\\n display: block;');\n                            }\n                            else if (this.collision && this.collision.length > 0 && this.collision.indexOf('bottom') > -1 && this.collision.indexOf('right') === -1) {\n                                popupEle.style.left = formatUnit(coordinates.left);\n                                popupEle.style.top = formatUnit(coordinates.top - parseInt(popupHeight.toString()));\n                            }\n                            else if (this.collision && this.collision.length > 0 && this.collision.indexOf('bottom') > -1 && this.collision.indexOf('right') > -1) {\n                                popupEle.style.left = formatUnit(popupLeft);\n                                popupEle.style.top = formatUnit(coordinates.top - parseInt(popupHeight.toString()));\n                            }\n                            else {\n                                popupEle.style.left = formatUnit(coordinates.left);\n                                popupEle.style.top = formatUnit(coordinates.top - parseInt(this.popupHeight.toString()));\n                            }\n                            this.isCollided = false;\n                            this.collision = [];\n                        }\n                        popupEle.style.width = this.popupWidth !== '100%' && !isNullOrUndefined(this.popupWidth) ? formatUnit(this.popupWidth) : 'auto';\n                        this.setHeight(popupEle);\n                        popupEle.style.zIndex = this.zIndex === 1000 ? getZindexPartial(popupEle).toString() : this.zIndex.toString();\n                    }\n                    else {\n                        this.beforePopupOpen = false;\n                        this.destroyPopup();\n                    }\n                });\n            }\n            else {\n                this.beforePopupOpen = false;\n            }\n        });\n    }\n    setHeight(popupEle) {\n        if (this.popupHeight !== 'auto' && this.list) {\n            this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n            popupEle.style.maxHeight = formatUnit(this.popupHeight);\n        }\n        else {\n            popupEle.style.height = 'auto';\n        }\n    }\n    checkCollision(popupEle) {\n        if (!Browser.isDevice || (Browser.isDevice && !(this.getModuleName() === 'mention'))) {\n            let coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());\n            this.collision = isCollide(popupEle, null, coordinates.left, coordinates.top);\n            if (this.collision.length > 0) {\n                popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n                this.isCollided = true;\n            }\n            this.popupObj.resolveCollision();\n        }\n    }\n    getTriggerCharPosition() {\n        let mostRecentTriggerCharPos;\n        const currentRange = this.getTextRange();\n        if (currentRange !== undefined && currentRange !== null) {\n            mostRecentTriggerCharPos = 0;\n            const idx = currentRange.lastIndexOf(this.mentionChar);\n            if (idx >= mostRecentTriggerCharPos) {\n                mostRecentTriggerCharPos = idx;\n            }\n        }\n        return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;\n    }\n    initializePopup(element, offsetValue, left) {\n        this.popupObj = new Popup(element, {\n            width: this.setWidth(), targetType: 'relative',\n            relateTo: this.inputElement, collision: { X: 'flip', Y: 'flip' }, offsetY: offsetValue,\n            enableRtl: this.enableRtl, offsetX: left, position: { X: 'left', Y: 'bottom' }, actionOnScroll: 'hide',\n            zIndex: this.zIndex,\n            close: () => {\n                this.destroyPopup();\n            },\n            open: () => {\n                EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                this.isPopupOpen = true;\n                this.setDataIndex();\n            }\n        });\n    }\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            const inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        return width;\n    }\n    destroyPopup() {\n        this.isPopupOpen = false;\n        this.popupObj.destroy();\n        if (isNullOrUndefined(this.target)) {\n            detach(this.popupObj.element);\n        }\n        else {\n            this.popupObj.element.innerHTML = '';\n            this.popupObj.element.removeAttribute('style');\n            this.popupObj.element.removeAttribute('aria-disabled');\n        }\n    }\n    onDocumentClick(e) {\n        const target = e.target;\n        if (!(!isNullOrUndefined(this.popupObj) && closest(target, '#' + this.popupObj.element.id))) {\n            this.hidePopup(e);\n        }\n    }\n    getCoordinates(element, position) {\n        const properties = ['direction', 'boxSizing', 'width', 'height', 'overflowX', 'overflowY', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing'];\n        let div;\n        let span;\n        let range;\n        let globalRange;\n        let coordinates;\n        let computed;\n        let rect;\n        if (!this.isContentEditable(this.inputElement)) {\n            div = this.createElement('div', { className: 'e-form-mirror-div' });\n            document.body.appendChild(div);\n            computed = getComputedStyle(element);\n            div.style.position = 'absolute';\n            div.style.visibility = 'hidden';\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            properties.forEach((prop) => {\n                // eslint-disable-next-line security/detect-object-injection\n                div.style[prop] = computed[prop];\n            });\n            div.textContent = element.value.substring(0, position);\n            if (this.inputElement.nodeName === 'INPUT') {\n                div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n            }\n            span = this.createElement('span');\n            span.textContent = element.value.substring(position) || '.';\n            div.appendChild(span);\n            rect = element.getBoundingClientRect();\n        }\n        else {\n            const selectedNodePosition = this.getTriggerCharPosition();\n            globalRange = this.range;\n            range = document.createRange();\n            if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {\n                range.setStart(globalRange.startContainer, selectedNodePosition);\n                range.setEnd(globalRange.startContainer, selectedNodePosition);\n            }\n            else {\n                range.setStart(globalRange.startContainer, globalRange.startOffset);\n                range.setEnd(globalRange.startContainer, globalRange.endOffset);\n            }\n            this.isTyped = false;\n            range.collapse(false);\n            rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();\n        }\n        const doc = document.documentElement;\n        const windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n        const windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n        let width = 0;\n        if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {\n            for (let i = 0; i < this.range.startContainer.childNodes.length; i++) {\n                if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== '') {\n                    width += this.range.startContainer.childNodes[i].getClientRects()[0].width;\n                }\n                else if (this.range.startContainer.childNodes[i].textContent !== '') {\n                    let span = document.createElement(\"span\");\n                    span.innerHTML = this.range.startContainer.childNodes[i].nodeValue;\n                    document.body.appendChild(span);\n                    let textNodeWidth = span.offsetWidth;\n                    document.body.removeChild(span);\n                    width += textNodeWidth;\n                }\n            }\n        }\n        if (!this.isContentEditable(this.inputElement)) {\n            coordinates = {\n                top: rect.top + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) +\n                    parseInt(computed.fontSize, 10) + 3 - element.scrollTop - (this.isCollided ? 10 : 0),\n                left: rect.left + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)\n            };\n            document.body.removeChild(div);\n        }\n        else {\n            if (this.collision && this.collision.length > 0 && this.collision.indexOf('right') > -1 && this.collision.indexOf('bottom') === -1) {\n                coordinates = {\n                    top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10),\n                    left: rect.left + windowLeft + width\n                };\n            }\n            else {\n                coordinates = {\n                    top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),\n                    left: rect.left + windowLeft + width\n                };\n            }\n        }\n        return coordinates;\n    }\n    initValue() {\n        this.renderList();\n        if (this.dataSource instanceof DataManager) {\n            this.initRemoteRender = true;\n        }\n        else {\n            this.updateValues();\n        }\n    }\n    updateValues() {\n        const li = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (!isNullOrUndefined(li)) {\n            this.setSelection(li, null);\n        }\n    }\n    renderList() {\n        super.render();\n        this.unWireListEvents();\n        this.wireListEvents();\n    }\n    /**\n     * Event binding for list\n     *\n     * @returns {void}\n     */\n    wireListEvents() {\n        EventHandler.add(this.list, 'click', this.onMouseClick, this);\n        EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n    /**\n     * Event un binding for list items.\n     *\n     * @returns {void}\n     */\n    unWireListEvents() {\n        EventHandler.remove(this.list, 'click', this.onMouseClick);\n        EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n    onMouseClick(e) {\n        const target = e.target;\n        const li = closest(target, '.' + dropDownBaseClasses.li);\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        this.isSelected = true;\n        this.setSelection(li, e);\n        const delay = 100;\n        this.closePopup(delay, e);\n        this.inputElement.focus();\n    }\n    updateSelectedItem(li, e, preventSelect, isSelection) {\n        this.removeSelection();\n        li.classList.add(dropDownBaseClasses.selected);\n        this.removeHover();\n        const value = this.getFormattedValue(li.getAttribute('data-value'));\n        const selectedData = this.getDataByValue(value);\n        if (!preventSelect && !isNullOrUndefined(e) && !(e.action === \"down\" || e.action === \"up\")) {\n            const items = this.detachChanges(selectedData);\n            this.isSelected = true;\n            const eventArgs = {\n                e: e,\n                item: li,\n                itemData: items,\n                isInteracted: e ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    li.classList.remove(dropDownBaseClasses.selected);\n                    this.isSelected = false;\n                    this.isSelectCancel = true;\n                }\n                else {\n                    this.selectEventCallback(li, selectedData, value);\n                    if (isSelection) {\n                        this.setSelectOptions(li, e);\n                    }\n                }\n            });\n        }\n        else {\n            this.selectEventCallback(li, selectedData, value);\n            if (isSelection) {\n                this.setSelectOptions(li, e);\n            }\n        }\n    }\n    setSelection(li, e) {\n        if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || (this.isPopupOpen && this.isSelected\n            && li.classList.contains(dropDownBaseClasses.selected)))) {\n            this.updateSelectedItem(li, e, false, true);\n        }\n        else {\n            this.setSelectOptions(li, e);\n        }\n    }\n    setSelectOptions(li, e) {\n        if (this.list) {\n            this.removeHover();\n        }\n        this.previousSelectedLI = (!isNullOrUndefined(this.selectedLI)) ? this.selectedLI : null;\n        this.selectedLI = li;\n        if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {\n            this.setScrollPosition(e);\n        }\n        if (e && (e.keyCode === 38 || e.keyCode === 40)) {\n            return;\n        }\n        if (isNullOrUndefined(e) || this.setValue(e)) {\n            return;\n        }\n    }\n    setScrollPosition(e) {\n        if (!isNullOrUndefined(e)) {\n            switch (e.action) {\n                case 'pageDown':\n                case 'down':\n                case 'end':\n                    this.scrollBottom();\n                    break;\n                default:\n                    this.scrollTop();\n                    break;\n            }\n        }\n        else {\n            this.scrollBottom(true);\n        }\n    }\n    scrollBottom(isInitial) {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            const currentOffset = this.list.offsetHeight;\n            const nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n            nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n            const boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = nextOffset;\n            }\n        }\n    }\n    scrollTop() {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n            nextOffset = this.fields.groupBy && nextOffset;\n            const boxRange = (this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop);\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextOffset < 0) {\n                this.list.scrollTop = this.list.scrollTop + nextOffset;\n            }\n            else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = this.selectedLI.offsetTop;\n            }\n        }\n    }\n    selectEventCallback(li, selectedData, value, selectLi) {\n        this.previousItemData = (!isNullOrUndefined(this.itemData)) ? this.itemData : null;\n        this.item = li;\n        this.itemData = selectedData;\n        const focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (focusedItem) {\n            removeClass([focusedItem], dropDownBaseClasses.focus);\n        }\n        if (selectLi) {\n            addClass([li], dropDownBaseClasses.selected);\n        }\n        li.setAttribute('aria-selected', 'true');\n        this.activeIndex = this.getIndexByValue(value);\n    }\n    detachChanges(value) {\n        let items;\n        if (typeof value === 'string' ||\n            typeof value === 'boolean' ||\n            typeof value === 'number') {\n            items = Object.defineProperties({}, {\n                value: {\n                    value: value,\n                    enumerable: true\n                },\n                text: {\n                    value: value,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            items = value;\n        }\n        return items;\n    }\n    setValue(e) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            if (!isNullOrUndefined(this.displayTemplate)) {\n                this.setDisplayTemplate();\n            }\n            this.updateMentionValue(e);\n            return true;\n        }\n        else {\n            if (!isNullOrUndefined(this.displayTemplate)) {\n                this.setDisplayTemplate(e);\n            }\n            else {\n                this.updateMentionValue(e);\n            }\n            return true;\n        }\n    }\n    updateMentionValue(e) {\n        const dataItem = this.getItemData();\n        let textSuffix;\n        let value;\n        let endPos;\n        let range;\n        let globalRange;\n        const selection = this.inputElement.ownerDocument.getSelection();\n        const startPos = this.getTriggerCharPosition();\n        textSuffix = typeof this.suffixText === 'string' ? this.suffixText : '';\n        if (this.isSelectCancel) {\n            this.isSelectCancel = false;\n            return;\n        }\n        if (dataItem.text !== null) {\n            value = this.mentionVal(dataItem.text);\n        }\n        if (!this.isContentEditable(this.inputElement)) {\n            const myField = this.inputElement;\n            const currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);\n            value += textSuffix;\n            endPos = startPos + this.mentionChar.length;\n            endPos += currentTriggerSnippet.length;\n            myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);\n            myField.selectionStart = startPos + value.length;\n            myField.selectionEnd = startPos + value.length;\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            this.onChangeEvent(e);\n        }\n        else {\n            endPos = this.getTriggerCharPosition() + this.mentionChar.length;\n            if (this.range && (this.range.startContainer.textContent.trim() !== this.mentionChar)) {\n                endPos = this.range.endOffset;\n            }\n            globalRange = this.range;\n            range = document.createRange();\n            if (((this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) || this.getTextRange() && this.getTextRange().trim() === this.mentionChar)) {\n                range.setStart(globalRange.startContainer, startPos);\n                range.setEnd(globalRange.startContainer, endPos);\n            }\n            else {\n                if (globalRange.commonAncestorContainer.textContent.trim() !== '' && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {\n                    range.setStart(globalRange.startContainer, globalRange.startOffset - 1);\n                    range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);\n                }\n                else {\n                    range.setStart(globalRange.startContainer, globalRange.startOffset);\n                    range.setEnd(globalRange.startContainer, globalRange.endOffset);\n                }\n            }\n            this.isTyped = false;\n            range.deleteContents();\n            const element = this.createElement('div');\n            element.innerHTML = value;\n            const frag = document.createDocumentFragment();\n            let node;\n            let lastNode;\n            // eslint-disable-next-line no-cond-assign\n            while (node = element.firstChild) {\n                lastNode = frag.appendChild(node);\n            }\n            range.insertNode(frag);\n            if (lastNode) {\n                range = range.cloneRange();\n                range.setStartAfter(lastNode);\n                range.collapse(true);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            this.onChangeEvent(e);\n        }\n    }\n    mentionVal(value) {\n        const showChar = this.showMentionChar ? this.mentionChar : '';\n        if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {\n            value = this.displayTempElement.innerHTML;\n        }\n        if (this.isContentEditable(this.inputElement)) {\n            if (Browser.isAndroid) {\n                return '<span contenteditable=\"true\" class=\"e-mention-chip\">' + showChar + value + '</span>'.concat(typeof this.suffixText === 'string' ? this.suffixText : ' ');\n            }\n            else {\n                return '<span contenteditable=\"false\" class=\"e-mention-chip\">' + showChar + value + '</span>'.concat(typeof this.suffixText === 'string' ? this.suffixText : ' ');\n            }\n        }\n        else {\n            return showChar + value;\n        }\n    }\n    setDisplayTemplate(e) {\n        let compiledString;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate(['displayTemplate']);\n            if (this.displayTempElement) {\n                detach(this.displayTempElement);\n                this.displayTempElement = null;\n            }\n        }\n        if (!this.displayTempElement) {\n            this.displayTempElement = this.createElement('div');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            this.displayTempElement.innerHTML = '';\n        }\n        compiledString = compile(this.displayTemplate);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const displayCompTemp = compiledString(this.itemData, this, 'displayTemplate', this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);\n        if (displayCompTemp && displayCompTemp.length > 0) {\n            append(displayCompTemp, this.displayTempElement);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            this.renderTemplates();\n        }\n        else {\n            this.renderTemplates(() => {\n                this.updateMentionValue(e);\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    renderTemplates(callBack) {\n        this.renderReactTemplates(callBack);\n    }\n    setSpinnerTemplate() {\n        let compiledString;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact) {\n            this.clearTemplate(['spinnerTemplate']);\n            if (this.spinnerTemplateElement) {\n                detach(this.spinnerTemplateElement);\n                this.spinnerTemplateElement = null;\n            }\n        }\n        if (!this.spinnerTemplateElement) {\n            this.spinnerTemplateElement = this.createElement('div');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            this.spinnerTemplateElement.innerHTML = '';\n        }\n        compiledString = compile(this.spinnerTemplate);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const spinnerCompTemp = compiledString(null, this, 'spinnerTemplate', this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);\n        if (spinnerCompTemp && spinnerCompTemp.length > 0) {\n            for (let i = 0; i < spinnerCompTemp.length; i++) {\n                this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.isReact) {\n            this.renderTemplates();\n            this.popupObj.element.appendChild(this.spinnerTemplateElement);\n        }\n        else {\n            this.renderTemplates(() => {\n                this.popupObj.element.appendChild(this.spinnerTemplateElement);\n            });\n        }\n    }\n    onChangeEvent(eve) {\n        this.isSelected = false;\n        const items = this.detachMentionChanges(this.itemData);\n        let preItems;\n        if (typeof this.previousItemData === 'string' ||\n            typeof this.previousItemData === 'boolean' ||\n            typeof this.previousItemData === 'number') {\n            preItems = Object.defineProperties({}, {\n                value: {\n                    value: this.previousItemData,\n                    enumerable: true\n                },\n                text: {\n                    value: this.previousItemData,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            preItems = this.previousItemData;\n        }\n        const eventArgs = {\n            e: eve,\n            item: this.item,\n            itemData: items,\n            previousItem: this.previousSelectedLI,\n            previousItemData: preItems,\n            isInteracted: eve ? true : false,\n            value: this.item.innerHTML,\n            element: this.inputElement\n        };\n        this.trigger('change', eventArgs);\n    }\n    detachMentionChanges(value) {\n        let items;\n        if (typeof value === 'string' ||\n            typeof value === 'boolean' ||\n            typeof value === 'number') {\n            items = Object.defineProperties({}, {\n                value: {\n                    value: value,\n                    enumerable: true\n                },\n                text: {\n                    value: value,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            items = value;\n        }\n        return items;\n    }\n    getItemData() {\n        const fields = this.fields;\n        let dataItem = null;\n        dataItem = this.itemData;\n        let dataValue;\n        let dataText;\n        if (!isNullOrUndefined(dataItem)) {\n            dataValue = getValue(fields.value, dataItem);\n            dataText = getValue(fields.text, dataItem);\n        }\n        const value = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataValue : dataItem);\n        const text = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataText : dataItem);\n        return { value: value, text: text };\n    }\n    removeSelection() {\n        if (this.list) {\n            const selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n            if (selectedItems.length) {\n                removeClass(selectedItems, dropDownBaseClasses.selected);\n                selectedItems[0].removeAttribute('aria-selected');\n            }\n        }\n    }\n    onMouseOver(e) {\n        const currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        this.setHover(currentLi);\n    }\n    setHover(li) {\n        if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n    }\n    removeHover() {\n        if (this.list) {\n            const hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.hover);\n            }\n        }\n    }\n    isValidLI(li) {\n        return (li && li.hasAttribute('role') && li.getAttribute('role') === 'option');\n    }\n    onMouseLeave() {\n        this.removeHover();\n    }\n    /**\n     * Search the entered text and show it in the suggestion list if available.\n     *\n     * @returns {void}\n     */\n    search(text, positionX, positionY) {\n        if (this.isContentEditable(this.inputElement)) {\n            this.range = this.getCurrentRange();\n        }\n        const currentRange = this.getTextRange();\n        const lastWordRange = this.getLastLetter(currentRange);\n        if ((this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()))\n            || !this.ignoreCase && text === lastWordRange) {\n            this.resetList(this.dataSource, this.fields);\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            return;\n        }\n        if (isNullOrUndefined(this.list)) {\n            this.renderList();\n            this.renderPopup();\n        }\n        else {\n            this.showPopup();\n        }\n        this.popupObj.element.style.left = formatUnit(positionX);\n        this.popupObj.element.style.top = formatUnit(positionY);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    destroy() {\n        this.hidePopup();\n        this.unWireEvent();\n        if (this.list) {\n            this.unWireListEvents();\n        }\n        if (this.inputElement && !this.inputElement.classList.contains('e-' + this.getModuleName())) {\n            return;\n        }\n        this.previousSelectedLI = null;\n        this.item = null;\n        this.selectedLI = null;\n        this.popupObj = null;\n        super.destroy();\n    }\n    getLocaleName() {\n        return 'mention';\n    }\n    getNgDirective() {\n        return 'EJS-MENTION';\n    }\n    /**\n     * Return the module name of this component.\n     *\n     * @private\n     * @returns {string} Return the module name of this component.\n     */\n    getModuleName() {\n        return 'mention';\n    }\n};\n__decorate([\n    Property(null)\n], Mention.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('@')\n], Mention.prototype, \"mentionChar\", void 0);\n__decorate([\n    Property(false)\n], Mention.prototype, \"showMentionChar\", void 0);\n__decorate([\n    Property(false)\n], Mention.prototype, \"allowSpaces\", void 0);\n__decorate([\n    Property(null)\n], Mention.prototype, \"suffixText\", void 0);\n__decorate([\n    Property(25)\n], Mention.prototype, \"suggestionCount\", void 0);\n__decorate([\n    Property(0)\n], Mention.prototype, \"minLength\", void 0);\n__decorate([\n    Property('None')\n], Mention.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(true)\n], Mention.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(false)\n], Mention.prototype, \"highlight\", void 0);\n__decorate([\n    Property()\n], Mention.prototype, \"locale\", void 0);\n__decorate([\n    Property('auto')\n], Mention.prototype, \"popupWidth\", void 0);\n__decorate([\n    Property('300px')\n], Mention.prototype, \"popupHeight\", void 0);\n__decorate([\n    Property(null)\n], Mention.prototype, \"displayTemplate\", void 0);\n__decorate([\n    Property(null)\n], Mention.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property('No records found')\n], Mention.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property(null)\n], Mention.prototype, \"spinnerTemplate\", void 0);\n__decorate([\n    Property()\n], Mention.prototype, \"target\", void 0);\n__decorate([\n    Property([])\n], Mention.prototype, \"dataSource\", void 0);\n__decorate([\n    Property(null)\n], Mention.prototype, \"query\", void 0);\n__decorate([\n    Property('Contains')\n], Mention.prototype, \"filterType\", void 0);\n__decorate([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], Mention.prototype, \"fields\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"actionFailure\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"beforeOpen\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"opened\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"closed\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"filtering\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], Mention.prototype, \"destroyed\", void 0);\nMention = __decorate([\n    NotifyPropertyChanges\n], Mention);\nexport { Mention };\n","/**\n * export all modules from current location\n */\nexport * from './mention';\n","/**\n * export all modules from current location\n */\nexport * from './common/index';\nexport * from './drop-down-base/index';\nexport * from './drop-down-list/index';\nexport * from './drop-down-tree/index';\nexport * from './combo-box/index';\nexport * from './auto-complete/index';\nexport * from './multi-select/index';\nexport * from './list-box/index';\nexport * from './mention/index';\n"],"names":["matches","this","attributes","__decorate","isNOU","inputObject","DISABLED","CHIP_WRAPPER","CHIP","CHIP_CONTENT","CHIP_CLOSE","REMAIN_WRAPPER","CLOSEICON_CLASS","FOOTER","HEADER","SPINNER_CLASS","TOTAL_COUNT_WRAPPER","CHECKBOXFRAME","CHECK","CHECKBOXWRAP","FOCUS","selectAll","cssClass"],"mappings":";;;;;;;;;AAAA;;;AAGA,IAAI,WAAW,GAAG,EAAE,CAAC;AACrB,IAAI,UAAU,GAAG,EAAE,CAAC;AACpB,IAAIA,SAAO,GAAG,EAAE,CAAC;AACjB,MAAM,WAAW,GAAG,UAAU,CAAC;AAC/B,IAAI,aAAa,GAAG,EAAE,CAAC;;;;;;;;;;;;AAYvB,AAAO,SAAS,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE;IACpF,WAAW,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC5C,UAAU,CAAC,MAAM;QACb,WAAW,GAAG,EAAE,CAAC;KACpB,EAAE,IAAI,CAAC,CAAC;IACT,IAAI,KAAK,CAAC;IACV,WAAW,GAAG,UAAU,GAAG,WAAW,CAAC,WAAW,EAAE,GAAG,WAAW,CAAC;IACnE,IAAI,aAAa,KAAK,SAAS,IAAI,UAAU,KAAK,WAAW,EAAE;QAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAGA,SAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAIA,SAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gBAC5C,KAAK,GAAG,CAAC,CAAC;gBACV,MAAM;aACT;SACJ;QACD,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;QAClB,OAAOA,SAAO,CAAC,KAAK,CAAC,GAAGA,SAAO,CAAC,KAAK,CAAC,GAAGA,SAAO,CAAC,CAAC,CAAC,CAAC;KACvD;SACI;QACD,MAAM,SAAS,GAAG,KAAK,CAAC;QACxB,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;QACrC,IAAI,IAAI,CAAC;QACT,IAAI,IAAI,CAAC;QACT,aAAa,GAAG,aAAa,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,CAAC,GAAG,aAAa,CAAC;QACtBA,SAAO,GAAG,EAAE,CAAC;QACb,GAAG;YACC,IAAI,CAAC,KAAK,SAAS,CAAC,MAAM,EAAE;gBACxB,CAAC,GAAG,CAAC,CAAC,CAAC;aACV;YACD,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBACV,KAAK,GAAG,CAAC,CAAC;aACb;iBACI;gBACD,KAAK,GAAG,CAAC,CAAC;aACb;YACD,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;YAClE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,WAAW,EAAE;gBAC3CA,SAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;aAClC;YACD,CAAC,EAAE,CAAC;SACP,QAAQ,CAAC,KAAK,aAAa,EAAE;QAC9B,UAAU,GAAG,WAAW,CAAC;QACzB,aAAa,GAAG,SAAS,CAAC;QAC1B,OAAOA,SAAO,CAAC,CAAC,CAAC,CAAC;KACrB;CACJ;;;;;;;;;;AAUD,AAAO,SAAS,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE;IACtF,MAAM,SAAS,GAAG,KAAK,CAAC;IACxB,UAAU,GAAG,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;IACjF,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAC7C,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;QAC7B,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC;QAClC,IAAI,QAAQ,GAAG,UAAU,GAAG,QAAQ,CAAC,iBAAiB,EAAE,GAAG,QAAQ,CAAC;QACpE,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9D,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC;YACT,IAAI,WAAW,CAAC;YAChB,IAAI,KAAK,IAAI,UAAU,EAAE;gBACrB,IAAI,UAAU,GAAG,IAAI,CAAC;gBACtB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxC,UAAU,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;oBAC9B,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;;wBAE5D,IAAI,IAAI,KAAK,QAAQ,KAAK,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,IAAI,IAAI,KAAK,QAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;4BAClQ,WAAW,GAAG,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;yBACxD;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;aACN;YACD,IAAI,GAAG,UAAU,IAAI,WAAW,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC,iBAAiB,EAAE,GAAG,WAAW,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;